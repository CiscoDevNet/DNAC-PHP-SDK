<?php
/**
 * DiscoveryApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DiscoveryApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscoveryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteDiscovery
     *
     * Deletes all discovery
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function deleteDiscovery()
    {
        list($response) = $this->deleteDiscoveryWithHttpInfo();
        return $response;
    }

    /**
     * Operation deleteDiscoveryWithHttpInfo
     *
     * Deletes all discovery
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDiscoveryWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDiscoveryAsync
     *
     * Deletes all discovery
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryAsync()
    {
        return $this->deleteDiscoveryAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDiscoveryAsyncWithHttpInfo
     *
     * Deletes all discovery
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDiscovery'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDiscoveryRequest()
    {

        $resourcePath = '/api/v1/discovery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDiscoveryById
     *
     * Deletes the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function deleteDiscoveryById($id)
    {
        list($response) = $this->deleteDiscoveryByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteDiscoveryByIdWithHttpInfo
     *
     * Deletes the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDiscoveryByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDiscoveryByIdAsync
     *
     * Deletes the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryByIdAsync($id)
    {
        return $this->deleteDiscoveryByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDiscoveryByIdAsyncWithHttpInfo
     *
     * Deletes the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDiscoveryById'
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDiscoveryByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDiscoveryById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDiscoveryRange
     *
     * Deletes the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_delete Number of records to delete (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function deleteDiscoveryRange($start_index, $records_to_delete)
    {
        list($response) = $this->deleteDiscoveryRangeWithHttpInfo($start_index, $records_to_delete);
        return $response;
    }

    /**
     * Operation deleteDiscoveryRangeWithHttpInfo
     *
     * Deletes the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_delete Number of records to delete (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDiscoveryRangeWithHttpInfo($start_index, $records_to_delete)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryRangeRequest($start_index, $records_to_delete);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDiscoveryRangeAsync
     *
     * Deletes the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_delete Number of records to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryRangeAsync($start_index, $records_to_delete)
    {
        return $this->deleteDiscoveryRangeAsyncWithHttpInfo($start_index, $records_to_delete)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDiscoveryRangeAsyncWithHttpInfo
     *
     * Deletes the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_delete Number of records to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDiscoveryRangeAsyncWithHttpInfo($start_index, $records_to_delete)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteDiscoveryRangeRequest($start_index, $records_to_delete);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDiscoveryRange'
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_delete Number of records to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDiscoveryRangeRequest($start_index, $records_to_delete)
    {
        // verify the required parameter 'start_index' is set
        if ($start_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_index when calling deleteDiscoveryRange'
            );
        }
        // verify the required parameter 'records_to_delete' is set
        if ($records_to_delete === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records_to_delete when calling deleteDiscoveryRange'
            );
        }

        $resourcePath = '/api/v1/discovery/${startIndex}/${recordsToDelete}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($start_index !== null) {
            $resourcePath = str_replace(
                '{' . 'startIndex' . '}',
                ObjectSerializer::toPathValue($start_index),
                $resourcePath
            );
        }
        // path params
        if ($records_to_delete !== null) {
            $resourcePath = str_replace(
                '{' . 'recordsToDelete' . '}',
                ObjectSerializer::toPathValue($records_to_delete),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryAutoCompleteById
     *
     * Retrieve autoComplete values from a discovery based on id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $ip_address ipAddress (optional)
     * @param  string $ping_status pingStatus (optional)
     * @param  string $snmp_status snmpStatus (optional)
     * @param  string $cli_status cliStatus (optional)
     * @param  string $netconf_status netconfStatus (optional)
     * @param  string $http_status httpStatus (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SuccessResultList
     */
    public function getDiscoveryAutoCompleteById($id, $task_id = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        list($response) = $this->getDiscoveryAutoCompleteByIdWithHttpInfo($id, $task_id, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);
        return $response;
    }

    /**
     * Operation getDiscoveryAutoCompleteByIdWithHttpInfo
     *
     * Retrieve autoComplete values from a discovery based on id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $ip_address ipAddress (optional)
     * @param  string $ping_status pingStatus (optional)
     * @param  string $snmp_status snmpStatus (optional)
     * @param  string $cli_status cliStatus (optional)
     * @param  string $netconf_status netconfStatus (optional)
     * @param  string $http_status httpStatus (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SuccessResultList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryAutoCompleteByIdWithHttpInfo($id, $task_id = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getDiscoveryAutoCompleteByIdRequest($id, $task_id, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SuccessResultList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryAutoCompleteByIdAsync
     *
     * Retrieve autoComplete values from a discovery based on id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $ip_address ipAddress (optional)
     * @param  string $ping_status pingStatus (optional)
     * @param  string $snmp_status snmpStatus (optional)
     * @param  string $cli_status cliStatus (optional)
     * @param  string $netconf_status netconfStatus (optional)
     * @param  string $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryAutoCompleteByIdAsync($id, $task_id = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        return $this->getDiscoveryAutoCompleteByIdAsyncWithHttpInfo($id, $task_id, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryAutoCompleteByIdAsyncWithHttpInfo
     *
     * Retrieve autoComplete values from a discovery based on id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $ip_address ipAddress (optional)
     * @param  string $ping_status pingStatus (optional)
     * @param  string $snmp_status snmpStatus (optional)
     * @param  string $cli_status cliStatus (optional)
     * @param  string $netconf_status netconfStatus (optional)
     * @param  string $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryAutoCompleteByIdAsyncWithHttpInfo($id, $task_id = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getDiscoveryAutoCompleteByIdRequest($id, $task_id, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryAutoCompleteById'
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $ip_address ipAddress (optional)
     * @param  string $ping_status pingStatus (optional)
     * @param  string $snmp_status snmpStatus (optional)
     * @param  string $cli_status cliStatus (optional)
     * @param  string $netconf_status netconfStatus (optional)
     * @param  string $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryAutoCompleteByIdRequest($id, $task_id = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryAutoCompleteById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/autoComplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($ip_address !== null) {
            $queryParams['ipAddress'] = ObjectSerializer::toQueryValue($ip_address);
        }
        // query params
        if ($ping_status !== null) {
            $queryParams['pingStatus'] = ObjectSerializer::toQueryValue($ping_status);
        }
        // query params
        if ($snmp_status !== null) {
            $queryParams['snmpStatus'] = ObjectSerializer::toQueryValue($snmp_status);
        }
        // query params
        if ($cli_status !== null) {
            $queryParams['cliStatus'] = ObjectSerializer::toQueryValue($cli_status);
        }
        // query params
        if ($netconf_status !== null) {
            $queryParams['netconfStatus'] = ObjectSerializer::toQueryValue($netconf_status);
        }
        // query params
        if ($http_status !== null) {
            $queryParams['httpStatus'] = ObjectSerializer::toQueryValue($http_status);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryById
     *
     * Retrieves the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DiscoveryNIOResult
     */
    public function getDiscoveryById($id)
    {
        list($response) = $this->getDiscoveryByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDiscoveryByIdWithHttpInfo
     *
     * Retrieves the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DiscoveryNIOResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOResult';
        $request = $this->getDiscoveryByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryByIdAsync
     *
     * Retrieves the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryByIdAsync($id)
    {
        return $this->getDiscoveryByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryByIdAsyncWithHttpInfo
     *
     * Retrieves the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOResult';
        $request = $this->getDiscoveryByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryById'
     *
     * @param  string $id Discovery ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryCount
     *
     * Retrieves the number of discoveries
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getDiscoveryCount()
    {
        list($response) = $this->getDiscoveryCountWithHttpInfo();
        return $response;
    }

    /**
     * Operation getDiscoveryCountWithHttpInfo
     *
     * Retrieves the number of discoveries
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryCountWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoveryCountRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryCountAsync
     *
     * Retrieves the number of discoveries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryCountAsync()
    {
        return $this->getDiscoveryCountAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryCountAsyncWithHttpInfo
     *
     * Retrieves the number of discoveries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryCountAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoveryCountRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryCount'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryCountRequest()
    {

        $resourcePath = '/api/v1/discovery/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryJob
     *
     * Retrieves the list of discovery jobs for the given IP
     *
     * @param  string $ip_address ipAddress (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $name name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult
     */
    public function getDiscoveryJob($ip_address, $offset = null, $limit = null, $name = null)
    {
        list($response) = $this->getDiscoveryJobWithHttpInfo($ip_address, $offset, $limit, $name);
        return $response;
    }

    /**
     * Operation getDiscoveryJobWithHttpInfo
     *
     * Retrieves the list of discovery jobs for the given IP
     *
     * @param  string $ip_address ipAddress (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $name name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryJobWithHttpInfo($ip_address, $offset = null, $limit = null, $name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult';
        $request = $this->getDiscoveryJobRequest($ip_address, $offset, $limit, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryJobAsync
     *
     * Retrieves the list of discovery jobs for the given IP
     *
     * @param  string $ip_address ipAddress (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $name name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryJobAsync($ip_address, $offset = null, $limit = null, $name = null)
    {
        return $this->getDiscoveryJobAsyncWithHttpInfo($ip_address, $offset, $limit, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryJobAsyncWithHttpInfo
     *
     * Retrieves the list of discovery jobs for the given IP
     *
     * @param  string $ip_address ipAddress (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $name name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryJobAsyncWithHttpInfo($ip_address, $offset = null, $limit = null, $name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult';
        $request = $this->getDiscoveryJobRequest($ip_address, $offset, $limit, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryJob'
     *
     * @param  string $ip_address ipAddress (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $name name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryJobRequest($ip_address, $offset = null, $limit = null, $name = null)
    {
        // verify the required parameter 'ip_address' is set
        if ($ip_address === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_address when calling getDiscoveryJob'
            );
        }

        $resourcePath = '/api/v1/discovery/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($ip_address !== null) {
            $queryParams['ipAddress'] = ObjectSerializer::toQueryValue($ip_address);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryJobById
     *
     * Retrieves list of discovery jobs for the specified discovery id
     *
     * @param  string $id Discovery ID (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $ip_address ipAddress (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult
     */
    public function getDiscoveryJobById($id, $offset = null, $limit = null, $ip_address = null)
    {
        list($response) = $this->getDiscoveryJobByIdWithHttpInfo($id, $offset, $limit, $ip_address);
        return $response;
    }

    /**
     * Operation getDiscoveryJobByIdWithHttpInfo
     *
     * Retrieves list of discovery jobs for the specified discovery id
     *
     * @param  string $id Discovery ID (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $ip_address ipAddress (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryJobByIdWithHttpInfo($id, $offset = null, $limit = null, $ip_address = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult';
        $request = $this->getDiscoveryJobByIdRequest($id, $offset, $limit, $ip_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryJobByIdAsync
     *
     * Retrieves list of discovery jobs for the specified discovery id
     *
     * @param  string $id Discovery ID (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $ip_address ipAddress (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryJobByIdAsync($id, $offset = null, $limit = null, $ip_address = null)
    {
        return $this->getDiscoveryJobByIdAsyncWithHttpInfo($id, $offset, $limit, $ip_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryJobByIdAsyncWithHttpInfo
     *
     * Retrieves list of discovery jobs for the specified discovery id
     *
     * @param  string $id Discovery ID (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $ip_address ipAddress (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryJobByIdAsyncWithHttpInfo($id, $offset = null, $limit = null, $ip_address = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryJobNIOListResult';
        $request = $this->getDiscoveryJobByIdRequest($id, $offset, $limit, $ip_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryJobById'
     *
     * @param  string $id Discovery ID (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $ip_address ipAddress (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryJobByIdRequest($id, $offset = null, $limit = null, $ip_address = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryJobById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($ip_address !== null) {
            $queryParams['ipAddress'] = ObjectSerializer::toQueryValue($ip_address);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryNetworkDeviceByIdRange
     *
     * Retrieves the range of network devices discovered for the given discovery
     *
     * @param  string $id Discovery ID (required)
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult
     */
    public function getDiscoveryNetworkDeviceByIdRange($id, $start_index, $records_to_return, $task_id = null)
    {
        list($response) = $this->getDiscoveryNetworkDeviceByIdRangeWithHttpInfo($id, $start_index, $records_to_return, $task_id);
        return $response;
    }

    /**
     * Operation getDiscoveryNetworkDeviceByIdRangeWithHttpInfo
     *
     * Retrieves the range of network devices discovered for the given discovery
     *
     * @param  string $id Discovery ID (required)
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryNetworkDeviceByIdRangeWithHttpInfo($id, $start_index, $records_to_return, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult';
        $request = $this->getDiscoveryNetworkDeviceByIdRangeRequest($id, $start_index, $records_to_return, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryNetworkDeviceByIdRangeAsync
     *
     * Retrieves the range of network devices discovered for the given discovery
     *
     * @param  string $id Discovery ID (required)
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkDeviceByIdRangeAsync($id, $start_index, $records_to_return, $task_id = null)
    {
        return $this->getDiscoveryNetworkDeviceByIdRangeAsyncWithHttpInfo($id, $start_index, $records_to_return, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryNetworkDeviceByIdRangeAsyncWithHttpInfo
     *
     * Retrieves the range of network devices discovered for the given discovery
     *
     * @param  string $id Discovery ID (required)
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkDeviceByIdRangeAsyncWithHttpInfo($id, $start_index, $records_to_return, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult';
        $request = $this->getDiscoveryNetworkDeviceByIdRangeRequest($id, $start_index, $records_to_return, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryNetworkDeviceByIdRange'
     *
     * @param  string $id Discovery ID (required)
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryNetworkDeviceByIdRangeRequest($id, $start_index, $records_to_return, $task_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryNetworkDeviceByIdRange'
            );
        }
        // verify the required parameter 'start_index' is set
        if ($start_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_index when calling getDiscoveryNetworkDeviceByIdRange'
            );
        }
        // verify the required parameter 'records_to_return' is set
        if ($records_to_return === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records_to_return when calling getDiscoveryNetworkDeviceByIdRange'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/network-device/${startIndex}/${recordsToReturn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($start_index !== null) {
            $resourcePath = str_replace(
                '{' . 'startIndex' . '}',
                ObjectSerializer::toPathValue($start_index),
                $resourcePath
            );
        }
        // path params
        if ($records_to_return !== null) {
            $resourcePath = str_replace(
                '{' . 'recordsToReturn' . '}',
                ObjectSerializer::toPathValue($records_to_return),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryNetworkDeviceCountById
     *
     * Retrieves the number of network devices discovered in the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getDiscoveryNetworkDeviceCountById($id, $task_id = null)
    {
        list($response) = $this->getDiscoveryNetworkDeviceCountByIdWithHttpInfo($id, $task_id);
        return $response;
    }

    /**
     * Operation getDiscoveryNetworkDeviceCountByIdWithHttpInfo
     *
     * Retrieves the number of network devices discovered in the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryNetworkDeviceCountByIdWithHttpInfo($id, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoveryNetworkDeviceCountByIdRequest($id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryNetworkDeviceCountByIdAsync
     *
     * Retrieves the number of network devices discovered in the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkDeviceCountByIdAsync($id, $task_id = null)
    {
        return $this->getDiscoveryNetworkDeviceCountByIdAsyncWithHttpInfo($id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryNetworkDeviceCountByIdAsyncWithHttpInfo
     *
     * Retrieves the number of network devices discovered in the discovery specified by id
     *
     * @param  string $id Discovery ID (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkDeviceCountByIdAsyncWithHttpInfo($id, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoveryNetworkDeviceCountByIdRequest($id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryNetworkDeviceCountById'
     *
     * @param  string $id Discovery ID (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryNetworkDeviceCountByIdRequest($id, $task_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryNetworkDeviceCountById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/network-device/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryNetworkNetworkDeviceById
     *
     * Retrieves the network devices discovered in the discovery specified by id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult
     */
    public function getDiscoveryNetworkNetworkDeviceById($id, $task_id = null)
    {
        list($response) = $this->getDiscoveryNetworkNetworkDeviceByIdWithHttpInfo($id, $task_id);
        return $response;
    }

    /**
     * Operation getDiscoveryNetworkNetworkDeviceByIdWithHttpInfo
     *
     * Retrieves the network devices discovered in the discovery specified by id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryNetworkNetworkDeviceByIdWithHttpInfo($id, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult';
        $request = $this->getDiscoveryNetworkNetworkDeviceByIdRequest($id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryNetworkNetworkDeviceByIdAsync
     *
     * Retrieves the network devices discovered in the discovery specified by id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkNetworkDeviceByIdAsync($id, $task_id = null)
    {
        return $this->getDiscoveryNetworkNetworkDeviceByIdAsyncWithHttpInfo($id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryNetworkNetworkDeviceByIdAsyncWithHttpInfo
     *
     * Retrieves the network devices discovered in the discovery specified by id
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryNetworkNetworkDeviceByIdAsyncWithHttpInfo($id, $task_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceNIOListResult';
        $request = $this->getDiscoveryNetworkNetworkDeviceByIdRequest($id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryNetworkNetworkDeviceById'
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryNetworkNetworkDeviceByIdRequest($id, $task_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoveryNetworkNetworkDeviceById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/network-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoveryRange
     *
     * Retrieves the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DiscoveryNIOListResult
     */
    public function getDiscoveryRange($start_index, $records_to_return)
    {
        list($response) = $this->getDiscoveryRangeWithHttpInfo($start_index, $records_to_return);
        return $response;
    }

    /**
     * Operation getDiscoveryRangeWithHttpInfo
     *
     * Retrieves the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DiscoveryNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoveryRangeWithHttpInfo($start_index, $records_to_return)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOListResult';
        $request = $this->getDiscoveryRangeRequest($start_index, $records_to_return);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoveryRangeAsync
     *
     * Retrieves the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryRangeAsync($start_index, $records_to_return)
    {
        return $this->getDiscoveryRangeAsyncWithHttpInfo($start_index, $records_to_return)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoveryRangeAsyncWithHttpInfo
     *
     * Retrieves the discovery in the given range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoveryRangeAsyncWithHttpInfo($start_index, $records_to_return)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DiscoveryNIOListResult';
        $request = $this->getDiscoveryRangeRequest($start_index, $records_to_return);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoveryRange'
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoveryRangeRequest($start_index, $records_to_return)
    {
        // verify the required parameter 'start_index' is set
        if ($start_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_index when calling getDiscoveryRange'
            );
        }
        // verify the required parameter 'records_to_return' is set
        if ($records_to_return === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records_to_return when calling getDiscoveryRange'
            );
        }

        $resourcePath = '/api/v1/discovery/${startIndex}/${recordsToReturn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($start_index !== null) {
            $resourcePath = str_replace(
                '{' . 'startIndex' . '}',
                ObjectSerializer::toPathValue($start_index),
                $resourcePath
            );
        }
        // path params
        if ($records_to_return !== null) {
            $resourcePath = str_replace(
                '{' . 'recordsToReturn' . '}',
                ObjectSerializer::toPathValue($records_to_return),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscoverySummaryById
     *
     * Retrieve network devices from a discovery on given filters
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $sort_by sortBy (optional)
     * @param  string $sort_order sortOrder (optional)
     * @param  string[] $ip_address ipAddress (optional)
     * @param  string[] $ping_status pingStatus (optional)
     * @param  string[] $snmp_status snmpStatus (optional)
     * @param  string[] $cli_status cliStatus (optional)
     * @param  string[] $netconf_status netconfStatus (optional)
     * @param  string[] $http_status httpStatus (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getDiscoverySummaryById($id, $task_id = null, $sort_by = null, $sort_order = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        list($response) = $this->getDiscoverySummaryByIdWithHttpInfo($id, $task_id, $sort_by, $sort_order, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);
        return $response;
    }

    /**
     * Operation getDiscoverySummaryByIdWithHttpInfo
     *
     * Retrieve network devices from a discovery on given filters
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $sort_by sortBy (optional)
     * @param  string $sort_order sortOrder (optional)
     * @param  string[] $ip_address ipAddress (optional)
     * @param  string[] $ping_status pingStatus (optional)
     * @param  string[] $snmp_status snmpStatus (optional)
     * @param  string[] $cli_status cliStatus (optional)
     * @param  string[] $netconf_status netconfStatus (optional)
     * @param  string[] $http_status httpStatus (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscoverySummaryByIdWithHttpInfo($id, $task_id = null, $sort_by = null, $sort_order = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoverySummaryByIdRequest($id, $task_id, $sort_by, $sort_order, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscoverySummaryByIdAsync
     *
     * Retrieve network devices from a discovery on given filters
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $sort_by sortBy (optional)
     * @param  string $sort_order sortOrder (optional)
     * @param  string[] $ip_address ipAddress (optional)
     * @param  string[] $ping_status pingStatus (optional)
     * @param  string[] $snmp_status snmpStatus (optional)
     * @param  string[] $cli_status cliStatus (optional)
     * @param  string[] $netconf_status netconfStatus (optional)
     * @param  string[] $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoverySummaryByIdAsync($id, $task_id = null, $sort_by = null, $sort_order = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        return $this->getDiscoverySummaryByIdAsyncWithHttpInfo($id, $task_id, $sort_by, $sort_order, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscoverySummaryByIdAsyncWithHttpInfo
     *
     * Retrieve network devices from a discovery on given filters
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $sort_by sortBy (optional)
     * @param  string $sort_order sortOrder (optional)
     * @param  string[] $ip_address ipAddress (optional)
     * @param  string[] $ping_status pingStatus (optional)
     * @param  string[] $snmp_status snmpStatus (optional)
     * @param  string[] $cli_status cliStatus (optional)
     * @param  string[] $netconf_status netconfStatus (optional)
     * @param  string[] $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscoverySummaryByIdAsyncWithHttpInfo($id, $task_id = null, $sort_by = null, $sort_order = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getDiscoverySummaryByIdRequest($id, $task_id, $sort_by, $sort_order, $ip_address, $ping_status, $snmp_status, $cli_status, $netconf_status, $http_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscoverySummaryById'
     *
     * @param  string $id id (required)
     * @param  string $task_id taskId (optional)
     * @param  string $sort_by sortBy (optional)
     * @param  string $sort_order sortOrder (optional)
     * @param  string[] $ip_address ipAddress (optional)
     * @param  string[] $ping_status pingStatus (optional)
     * @param  string[] $snmp_status snmpStatus (optional)
     * @param  string[] $cli_status cliStatus (optional)
     * @param  string[] $netconf_status netconfStatus (optional)
     * @param  string[] $http_status httpStatus (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscoverySummaryByIdRequest($id, $task_id = null, $sort_by = null, $sort_order = null, $ip_address = null, $ping_status = null, $snmp_status = null, $cli_status = null, $netconf_status = null, $http_status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDiscoverySummaryById'
            );
        }

        $resourcePath = '/api/v1/discovery/${id}/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if (is_array($ip_address)) {
            $ip_address = ObjectSerializer::serializeCollection($ip_address, 'csv', true);
        }
        if ($ip_address !== null) {
            $queryParams['ipAddress'] = ObjectSerializer::toQueryValue($ip_address);
        }
        // query params
        if (is_array($ping_status)) {
            $ping_status = ObjectSerializer::serializeCollection($ping_status, 'csv', true);
        }
        if ($ping_status !== null) {
            $queryParams['pingStatus'] = ObjectSerializer::toQueryValue($ping_status);
        }
        // query params
        if (is_array($snmp_status)) {
            $snmp_status = ObjectSerializer::serializeCollection($snmp_status, 'csv', true);
        }
        if ($snmp_status !== null) {
            $queryParams['snmpStatus'] = ObjectSerializer::toQueryValue($snmp_status);
        }
        // query params
        if (is_array($cli_status)) {
            $cli_status = ObjectSerializer::serializeCollection($cli_status, 'csv', true);
        }
        if ($cli_status !== null) {
            $queryParams['cliStatus'] = ObjectSerializer::toQueryValue($cli_status);
        }
        // query params
        if (is_array($netconf_status)) {
            $netconf_status = ObjectSerializer::serializeCollection($netconf_status, 'csv', true);
        }
        if ($netconf_status !== null) {
            $queryParams['netconfStatus'] = ObjectSerializer::toQueryValue($netconf_status);
        }
        // query params
        if (is_array($http_status)) {
            $http_status = ObjectSerializer::serializeCollection($http_status, 'csv', true);
        }
        if ($http_status !== null) {
            $queryParams['httpStatus'] = ObjectSerializer::toQueryValue($http_status);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDiscovery
     *
     * Starts a new discovery process and returns a task-id
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postDiscovery($request)
    {
        list($response) = $this->postDiscoveryWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postDiscoveryWithHttpInfo
     *
     * Starts a new discovery process and returns a task-id
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDiscoveryWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postDiscoveryRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDiscoveryAsync
     *
     * Starts a new discovery process and returns a task-id
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDiscoveryAsync($request)
    {
        return $this->postDiscoveryAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDiscoveryAsyncWithHttpInfo
     *
     * Starts a new discovery process and returns a task-id
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDiscoveryAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postDiscoveryRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDiscovery'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDiscoveryRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postDiscovery'
            );
        }

        $resourcePath = '/api/v1/discovery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDiscovery
     *
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DiscoveryNIO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function putDiscovery($request)
    {
        list($response) = $this->putDiscoveryWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation putDiscoveryWithHttpInfo
     *
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DiscoveryNIO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDiscoveryWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putDiscoveryRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putDiscoveryAsync
     *
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DiscoveryNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDiscoveryAsync($request)
    {
        return $this->putDiscoveryAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDiscoveryAsyncWithHttpInfo
     *
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DiscoveryNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDiscoveryAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putDiscoveryRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDiscovery'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DiscoveryNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putDiscoveryRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putDiscovery'
            );
        }

        $resourcePath = '/api/v1/discovery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
