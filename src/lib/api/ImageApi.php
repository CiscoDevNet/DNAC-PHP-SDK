<?php
/**
 * ImageApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ImageApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getImageImportation
     *
     * Get image details with filter
     *
     * @param  string $image_uuid imageUuid (optional)
     * @param  string $name name (optional)
     * @param  string $family family (optional)
     * @param  string $application_type applicationType (optional)
     * @param  string $image_integrity_status imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param  string $version software Image Version (optional)
     * @param  string $image_series image Series (optional)
     * @param  string $image_name image Name (optional)
     * @param  bool $is_tagged_golden is Tagged Golden (optional)
     * @param  bool $is_cco_recommended is recommended from cisco.com (optional)
     * @param  bool $is_cco_latest is latest from cisco.com (optional)
     * @param  int $created_time time in milliseconds (epoch format) (optional)
     * @param  int $image_size_greater_than size in bytes (optional)
     * @param  int $image_size_lesser_than size in bytes (optional)
     * @param  string $sort_by sort results by this field (optional)
     * @param  string $sort_order sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param  int $limit limit (optional)
     * @param  int $offset offset (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ImageInfoListResponse
     */
    public function getImageImportation($image_uuid = null, $name = null, $family = null, $application_type = null, $image_integrity_status = null, $version = null, $image_series = null, $image_name = null, $is_tagged_golden = null, $is_cco_recommended = null, $is_cco_latest = null, $created_time = null, $image_size_greater_than = null, $image_size_lesser_than = null, $sort_by = null, $sort_order = null, $limit = null, $offset = null)
    {
        list($response) = $this->getImageImportationWithHttpInfo($image_uuid, $name, $family, $application_type, $image_integrity_status, $version, $image_series, $image_name, $is_tagged_golden, $is_cco_recommended, $is_cco_latest, $created_time, $image_size_greater_than, $image_size_lesser_than, $sort_by, $sort_order, $limit, $offset);
        return $response;
    }

    /**
     * Operation getImageImportationWithHttpInfo
     *
     * Get image details with filter
     *
     * @param  string $image_uuid imageUuid (optional)
     * @param  string $name name (optional)
     * @param  string $family family (optional)
     * @param  string $application_type applicationType (optional)
     * @param  string $image_integrity_status imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param  string $version software Image Version (optional)
     * @param  string $image_series image Series (optional)
     * @param  string $image_name image Name (optional)
     * @param  bool $is_tagged_golden is Tagged Golden (optional)
     * @param  bool $is_cco_recommended is recommended from cisco.com (optional)
     * @param  bool $is_cco_latest is latest from cisco.com (optional)
     * @param  int $created_time time in milliseconds (epoch format) (optional)
     * @param  int $image_size_greater_than size in bytes (optional)
     * @param  int $image_size_lesser_than size in bytes (optional)
     * @param  string $sort_by sort results by this field (optional)
     * @param  string $sort_order sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param  int $limit limit (optional)
     * @param  int $offset offset (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ImageInfoListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageImportationWithHttpInfo($image_uuid = null, $name = null, $family = null, $application_type = null, $image_integrity_status = null, $version = null, $image_series = null, $image_name = null, $is_tagged_golden = null, $is_cco_recommended = null, $is_cco_latest = null, $created_time = null, $image_size_greater_than = null, $image_size_lesser_than = null, $sort_by = null, $sort_order = null, $limit = null, $offset = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ImageInfoListResponse';
        $request = $this->getImageImportationRequest($image_uuid, $name, $family, $application_type, $image_integrity_status, $version, $image_series, $image_name, $is_tagged_golden, $is_cco_recommended, $is_cco_latest, $created_time, $image_size_greater_than, $image_size_lesser_than, $sort_by, $sort_order, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ImageInfoListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImageImportationAsync
     *
     * Get image details with filter
     *
     * @param  string $image_uuid imageUuid (optional)
     * @param  string $name name (optional)
     * @param  string $family family (optional)
     * @param  string $application_type applicationType (optional)
     * @param  string $image_integrity_status imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param  string $version software Image Version (optional)
     * @param  string $image_series image Series (optional)
     * @param  string $image_name image Name (optional)
     * @param  bool $is_tagged_golden is Tagged Golden (optional)
     * @param  bool $is_cco_recommended is recommended from cisco.com (optional)
     * @param  bool $is_cco_latest is latest from cisco.com (optional)
     * @param  int $created_time time in milliseconds (epoch format) (optional)
     * @param  int $image_size_greater_than size in bytes (optional)
     * @param  int $image_size_lesser_than size in bytes (optional)
     * @param  string $sort_by sort results by this field (optional)
     * @param  string $sort_order sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param  int $limit limit (optional)
     * @param  int $offset offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageImportationAsync($image_uuid = null, $name = null, $family = null, $application_type = null, $image_integrity_status = null, $version = null, $image_series = null, $image_name = null, $is_tagged_golden = null, $is_cco_recommended = null, $is_cco_latest = null, $created_time = null, $image_size_greater_than = null, $image_size_lesser_than = null, $sort_by = null, $sort_order = null, $limit = null, $offset = null)
    {
        return $this->getImageImportationAsyncWithHttpInfo($image_uuid, $name, $family, $application_type, $image_integrity_status, $version, $image_series, $image_name, $is_tagged_golden, $is_cco_recommended, $is_cco_latest, $created_time, $image_size_greater_than, $image_size_lesser_than, $sort_by, $sort_order, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImageImportationAsyncWithHttpInfo
     *
     * Get image details with filter
     *
     * @param  string $image_uuid imageUuid (optional)
     * @param  string $name name (optional)
     * @param  string $family family (optional)
     * @param  string $application_type applicationType (optional)
     * @param  string $image_integrity_status imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param  string $version software Image Version (optional)
     * @param  string $image_series image Series (optional)
     * @param  string $image_name image Name (optional)
     * @param  bool $is_tagged_golden is Tagged Golden (optional)
     * @param  bool $is_cco_recommended is recommended from cisco.com (optional)
     * @param  bool $is_cco_latest is latest from cisco.com (optional)
     * @param  int $created_time time in milliseconds (epoch format) (optional)
     * @param  int $image_size_greater_than size in bytes (optional)
     * @param  int $image_size_lesser_than size in bytes (optional)
     * @param  string $sort_by sort results by this field (optional)
     * @param  string $sort_order sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param  int $limit limit (optional)
     * @param  int $offset offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageImportationAsyncWithHttpInfo($image_uuid = null, $name = null, $family = null, $application_type = null, $image_integrity_status = null, $version = null, $image_series = null, $image_name = null, $is_tagged_golden = null, $is_cco_recommended = null, $is_cco_latest = null, $created_time = null, $image_size_greater_than = null, $image_size_lesser_than = null, $sort_by = null, $sort_order = null, $limit = null, $offset = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ImageInfoListResponse';
        $request = $this->getImageImportationRequest($image_uuid, $name, $family, $application_type, $image_integrity_status, $version, $image_series, $image_name, $is_tagged_golden, $is_cco_recommended, $is_cco_latest, $created_time, $image_size_greater_than, $image_size_lesser_than, $sort_by, $sort_order, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImageImportation'
     *
     * @param  string $image_uuid imageUuid (optional)
     * @param  string $name name (optional)
     * @param  string $family family (optional)
     * @param  string $application_type applicationType (optional)
     * @param  string $image_integrity_status imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param  string $version software Image Version (optional)
     * @param  string $image_series image Series (optional)
     * @param  string $image_name image Name (optional)
     * @param  bool $is_tagged_golden is Tagged Golden (optional)
     * @param  bool $is_cco_recommended is recommended from cisco.com (optional)
     * @param  bool $is_cco_latest is latest from cisco.com (optional)
     * @param  int $created_time time in milliseconds (epoch format) (optional)
     * @param  int $image_size_greater_than size in bytes (optional)
     * @param  int $image_size_lesser_than size in bytes (optional)
     * @param  string $sort_by sort results by this field (optional)
     * @param  string $sort_order sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param  int $limit limit (optional)
     * @param  int $offset offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getImageImportationRequest($image_uuid = null, $name = null, $family = null, $application_type = null, $image_integrity_status = null, $version = null, $image_series = null, $image_name = null, $is_tagged_golden = null, $is_cco_recommended = null, $is_cco_latest = null, $created_time = null, $image_size_greater_than = null, $image_size_lesser_than = null, $sort_by = null, $sort_order = null, $limit = null, $offset = null)
    {

        $resourcePath = '/api/v1/image/importation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($image_uuid !== null) {
            $queryParams['imageUuid'] = ObjectSerializer::toQueryValue($image_uuid);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($family !== null) {
            $queryParams['family'] = ObjectSerializer::toQueryValue($family);
        }
        // query params
        if ($application_type !== null) {
            $queryParams['applicationType'] = ObjectSerializer::toQueryValue($application_type);
        }
        // query params
        if ($image_integrity_status !== null) {
            $queryParams['imageIntegrityStatus'] = ObjectSerializer::toQueryValue($image_integrity_status);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($image_series !== null) {
            $queryParams['imageSeries'] = ObjectSerializer::toQueryValue($image_series);
        }
        // query params
        if ($image_name !== null) {
            $queryParams['imageName'] = ObjectSerializer::toQueryValue($image_name);
        }
        // query params
        if ($is_tagged_golden !== null) {
            $queryParams['isTaggedGolden'] = ObjectSerializer::toQueryValue($is_tagged_golden);
        }
        // query params
        if ($is_cco_recommended !== null) {
            $queryParams['isCCORecommended'] = ObjectSerializer::toQueryValue($is_cco_recommended);
        }
        // query params
        if ($is_cco_latest !== null) {
            $queryParams['isCCOLatest'] = ObjectSerializer::toQueryValue($is_cco_latest);
        }
        // query params
        if ($created_time !== null) {
            $queryParams['createdTime'] = ObjectSerializer::toQueryValue($created_time);
        }
        // query params
        if ($image_size_greater_than !== null) {
            $queryParams['imageSizeGreaterThan'] = ObjectSerializer::toQueryValue($image_size_greater_than);
        }
        // query params
        if ($image_size_lesser_than !== null) {
            $queryParams['imageSizeLesserThan'] = ObjectSerializer::toQueryValue($image_size_lesser_than);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postImageActivationDevice
     *
     * Trigger activation on a device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ActivateDTO $request request (required)
     * @param  string $client_type Client-type (Optional) (optional)
     * @param  string $client_url Client-url (Optional) (optional)
     * @param  bool $schedule_validate scheduleValidate, validates data before schedule (Optional) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postImageActivationDevice($request, $client_type = null, $client_url = null, $schedule_validate = null)
    {
        list($response) = $this->postImageActivationDeviceWithHttpInfo($request, $client_type, $client_url, $schedule_validate);
        return $response;
    }

    /**
     * Operation postImageActivationDeviceWithHttpInfo
     *
     * Trigger activation on a device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ActivateDTO $request request (required)
     * @param  string $client_type Client-type (Optional) (optional)
     * @param  string $client_url Client-url (Optional) (optional)
     * @param  bool $schedule_validate scheduleValidate, validates data before schedule (Optional) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postImageActivationDeviceWithHttpInfo($request, $client_type = null, $client_url = null, $schedule_validate = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageActivationDeviceRequest($request, $client_type, $client_url, $schedule_validate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postImageActivationDeviceAsync
     *
     * Trigger activation on a device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ActivateDTO $request request (required)
     * @param  string $client_type Client-type (Optional) (optional)
     * @param  string $client_url Client-url (Optional) (optional)
     * @param  bool $schedule_validate scheduleValidate, validates data before schedule (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageActivationDeviceAsync($request, $client_type = null, $client_url = null, $schedule_validate = null)
    {
        return $this->postImageActivationDeviceAsyncWithHttpInfo($request, $client_type, $client_url, $schedule_validate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postImageActivationDeviceAsyncWithHttpInfo
     *
     * Trigger activation on a device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ActivateDTO $request request (required)
     * @param  string $client_type Client-type (Optional) (optional)
     * @param  string $client_url Client-url (Optional) (optional)
     * @param  bool $schedule_validate scheduleValidate, validates data before schedule (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageActivationDeviceAsyncWithHttpInfo($request, $client_type = null, $client_url = null, $schedule_validate = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageActivationDeviceRequest($request, $client_type, $client_url, $schedule_validate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postImageActivationDevice'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ActivateDTO $request request (required)
     * @param  string $client_type Client-type (Optional) (optional)
     * @param  string $client_url Client-url (Optional) (optional)
     * @param  bool $schedule_validate scheduleValidate, validates data before schedule (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postImageActivationDeviceRequest($request, $client_type = null, $client_url = null, $schedule_validate = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postImageActivationDevice'
            );
        }

        $resourcePath = '/api/v1/image/activation/device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($schedule_validate !== null) {
            $queryParams['scheduleValidate'] = ObjectSerializer::toQueryValue($schedule_validate);
        }
        // header params
        if ($client_type !== null) {
            $headerParams['Client-Type'] = ObjectSerializer::toHeaderValue($client_type);
        }
        // header params
        if ($client_url !== null) {
            $headerParams['Client-Url'] = ObjectSerializer::toHeaderValue($client_url);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postImageDistribution
     *
     * Trigger distribution of an image
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DistributeDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postImageDistribution($request)
    {
        list($response) = $this->postImageDistributionWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postImageDistributionWithHttpInfo
     *
     * Trigger distribution of an image
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DistributeDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postImageDistributionWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageDistributionRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postImageDistributionAsync
     *
     * Trigger distribution of an image
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DistributeDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageDistributionAsync($request)
    {
        return $this->postImageDistributionAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postImageDistributionAsyncWithHttpInfo
     *
     * Trigger distribution of an image
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DistributeDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageDistributionAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageDistributionRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postImageDistribution'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\DistributeDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postImageDistributionRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postImageDistribution'
            );
        }

        $resourcePath = '/api/v1/image/distribution';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postImageImportationSourceFile
     *
     * Import an image from local file system
     *
     * @param  bool $is_third_party Third party Image check (optional)
     * @param  string $third_party_vendor Third Party Vendor (optional)
     * @param  string $third_party_image_family Third Party image family (optional)
     * @param  string $third_party_application_type Third Party Application Type (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postImageImportationSourceFile($is_third_party = null, $third_party_vendor = null, $third_party_image_family = null, $third_party_application_type = null)
    {
        list($response) = $this->postImageImportationSourceFileWithHttpInfo($is_third_party, $third_party_vendor, $third_party_image_family, $third_party_application_type);
        return $response;
    }

    /**
     * Operation postImageImportationSourceFileWithHttpInfo
     *
     * Import an image from local file system
     *
     * @param  bool $is_third_party Third party Image check (optional)
     * @param  string $third_party_vendor Third Party Vendor (optional)
     * @param  string $third_party_image_family Third Party image family (optional)
     * @param  string $third_party_application_type Third Party Application Type (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postImageImportationSourceFileWithHttpInfo($is_third_party = null, $third_party_vendor = null, $third_party_image_family = null, $third_party_application_type = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageImportationSourceFileRequest($is_third_party, $third_party_vendor, $third_party_image_family, $third_party_application_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postImageImportationSourceFileAsync
     *
     * Import an image from local file system
     *
     * @param  bool $is_third_party Third party Image check (optional)
     * @param  string $third_party_vendor Third Party Vendor (optional)
     * @param  string $third_party_image_family Third Party image family (optional)
     * @param  string $third_party_application_type Third Party Application Type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageImportationSourceFileAsync($is_third_party = null, $third_party_vendor = null, $third_party_image_family = null, $third_party_application_type = null)
    {
        return $this->postImageImportationSourceFileAsyncWithHttpInfo($is_third_party, $third_party_vendor, $third_party_image_family, $third_party_application_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postImageImportationSourceFileAsyncWithHttpInfo
     *
     * Import an image from local file system
     *
     * @param  bool $is_third_party Third party Image check (optional)
     * @param  string $third_party_vendor Third Party Vendor (optional)
     * @param  string $third_party_image_family Third Party image family (optional)
     * @param  string $third_party_application_type Third Party Application Type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageImportationSourceFileAsyncWithHttpInfo($is_third_party = null, $third_party_vendor = null, $third_party_image_family = null, $third_party_application_type = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageImportationSourceFileRequest($is_third_party, $third_party_vendor, $third_party_image_family, $third_party_application_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postImageImportationSourceFile'
     *
     * @param  bool $is_third_party Third party Image check (optional)
     * @param  string $third_party_vendor Third Party Vendor (optional)
     * @param  string $third_party_image_family Third Party image family (optional)
     * @param  string $third_party_application_type Third Party Application Type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postImageImportationSourceFileRequest($is_third_party = null, $third_party_vendor = null, $third_party_image_family = null, $third_party_application_type = null)
    {

        $resourcePath = '/api/v1/image/importation/source/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_third_party !== null) {
            $queryParams['isThirdParty'] = ObjectSerializer::toQueryValue($is_third_party);
        }
        // query params
        if ($third_party_vendor !== null) {
            $queryParams['thirdPartyVendor'] = ObjectSerializer::toQueryValue($third_party_vendor);
        }
        // query params
        if ($third_party_image_family !== null) {
            $queryParams['thirdPartyImageFamily'] = ObjectSerializer::toQueryValue($third_party_image_family);
        }
        // query params
        if ($third_party_application_type !== null) {
            $queryParams['thirdPartyApplicationType'] = ObjectSerializer::toQueryValue($third_party_application_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postImageImportationSourceUrl
     *
     * Trigger now or schedule import of an image from a URL
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ImageImportFromUrlDTO $request request (required)
     * @param  string $schedule_at Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) (optional)
     * @param  string $schedule_desc Custom Description (Optional) (optional)
     * @param  string $schedule_origin Originator of this call (Optional) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postImageImportationSourceUrl($request, $schedule_at = null, $schedule_desc = null, $schedule_origin = null)
    {
        list($response) = $this->postImageImportationSourceUrlWithHttpInfo($request, $schedule_at, $schedule_desc, $schedule_origin);
        return $response;
    }

    /**
     * Operation postImageImportationSourceUrlWithHttpInfo
     *
     * Trigger now or schedule import of an image from a URL
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ImageImportFromUrlDTO $request request (required)
     * @param  string $schedule_at Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) (optional)
     * @param  string $schedule_desc Custom Description (Optional) (optional)
     * @param  string $schedule_origin Originator of this call (Optional) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postImageImportationSourceUrlWithHttpInfo($request, $schedule_at = null, $schedule_desc = null, $schedule_origin = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageImportationSourceUrlRequest($request, $schedule_at, $schedule_desc, $schedule_origin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postImageImportationSourceUrlAsync
     *
     * Trigger now or schedule import of an image from a URL
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ImageImportFromUrlDTO $request request (required)
     * @param  string $schedule_at Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) (optional)
     * @param  string $schedule_desc Custom Description (Optional) (optional)
     * @param  string $schedule_origin Originator of this call (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageImportationSourceUrlAsync($request, $schedule_at = null, $schedule_desc = null, $schedule_origin = null)
    {
        return $this->postImageImportationSourceUrlAsyncWithHttpInfo($request, $schedule_at, $schedule_desc, $schedule_origin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postImageImportationSourceUrlAsyncWithHttpInfo
     *
     * Trigger now or schedule import of an image from a URL
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ImageImportFromUrlDTO $request request (required)
     * @param  string $schedule_at Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) (optional)
     * @param  string $schedule_desc Custom Description (Optional) (optional)
     * @param  string $schedule_origin Originator of this call (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postImageImportationSourceUrlAsyncWithHttpInfo($request, $schedule_at = null, $schedule_desc = null, $schedule_origin = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postImageImportationSourceUrlRequest($request, $schedule_at, $schedule_desc, $schedule_origin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postImageImportationSourceUrl'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ImageImportFromUrlDTO $request request (required)
     * @param  string $schedule_at Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) (optional)
     * @param  string $schedule_desc Custom Description (Optional) (optional)
     * @param  string $schedule_origin Originator of this call (Optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postImageImportationSourceUrlRequest($request, $schedule_at = null, $schedule_desc = null, $schedule_origin = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postImageImportationSourceUrl'
            );
        }

        $resourcePath = '/api/v1/image/importation/source/url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($schedule_at !== null) {
            $queryParams['scheduleAt'] = ObjectSerializer::toQueryValue($schedule_at);
        }
        // query params
        if ($schedule_desc !== null) {
            $queryParams['scheduleDesc'] = ObjectSerializer::toQueryValue($schedule_desc);
        }
        // query params
        if ($schedule_origin !== null) {
            $queryParams['scheduleOrigin'] = ObjectSerializer::toQueryValue($schedule_origin);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
