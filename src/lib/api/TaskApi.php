<?php
/**
 * TaskApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * TaskApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTask
     *
     * Get filtered tasks
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     * @param  string $sort_by Sort results by this field (optional)
     * @param  string $order Sort order - asc or dsc (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse
     */
    public function getTask($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null, $offset = null, $limit = null, $sort_by = null, $order = null)
    {
        list($response) = $this->getTaskWithHttpInfo($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id, $offset, $limit, $sort_by, $order);
        return $response;
    }

    /**
     * Operation getTaskWithHttpInfo
     *
     * Get filtered tasks
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     * @param  string $sort_by Sort results by this field (optional)
     * @param  string $order Sort order - asc or dsc (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskWithHttpInfo($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null, $offset = null, $limit = null, $sort_by = null, $order = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskRequest($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id, $offset, $limit, $sort_by, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskAsync
     *
     * Get filtered tasks
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     * @param  string $sort_by Sort results by this field (optional)
     * @param  string $order Sort order - asc or dsc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskAsync($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null, $offset = null, $limit = null, $sort_by = null, $order = null)
    {
        return $this->getTaskAsyncWithHttpInfo($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id, $offset, $limit, $sort_by, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskAsyncWithHttpInfo
     *
     * Get filtered tasks
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     * @param  string $sort_by Sort results by this field (optional)
     * @param  string $order Sort order - asc or dsc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskAsyncWithHttpInfo($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null, $offset = null, $limit = null, $sort_by = null, $order = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskRequest($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id, $offset, $limit, $sort_by, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTask'
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     * @param  string $sort_by Sort results by this field (optional)
     * @param  string $order Sort order - asc or dsc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskRequest($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null, $offset = null, $limit = null, $sort_by = null, $order = null)
    {

        $resourcePath = '/api/v1/task';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // query params
        if ($data !== null) {
            $queryParams['data'] = ObjectSerializer::toQueryValue($data);
        }
        // query params
        if ($error_code !== null) {
            $queryParams['errorCode'] = ObjectSerializer::toQueryValue($error_code);
        }
        // query params
        if ($service_type !== null) {
            $queryParams['serviceType'] = ObjectSerializer::toQueryValue($service_type);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = ObjectSerializer::toQueryValue($username);
        }
        // query params
        if ($progress !== null) {
            $queryParams['progress'] = ObjectSerializer::toQueryValue($progress);
        }
        // query params
        if ($is_error !== null) {
            $queryParams['isError'] = ObjectSerializer::toQueryValue($is_error);
        }
        // query params
        if ($failure_reason !== null) {
            $queryParams['failureReason'] = ObjectSerializer::toQueryValue($failure_reason);
        }
        // query params
        if ($parent_id !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskByTaskId
     *
     * getTruststoreFileCount
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskDTOResponse
     */
    public function getTaskByTaskId($task_id)
    {
        list($response) = $this->getTaskByTaskIdWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation getTaskByTaskIdWithHttpInfo
     *
     * getTruststoreFileCount
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskDTOResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskByTaskIdWithHttpInfo($task_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOResponse';
        $request = $this->getTaskByTaskIdRequest($task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskDTOResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskByTaskIdAsync
     *
     * getTruststoreFileCount
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskByTaskIdAsync($task_id)
    {
        return $this->getTaskByTaskIdAsyncWithHttpInfo($task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskByTaskIdAsyncWithHttpInfo
     *
     * getTruststoreFileCount
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskByTaskIdAsyncWithHttpInfo($task_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOResponse';
        $request = $this->getTaskByTaskIdRequest($task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskByTaskId'
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskByTaskIdRequest($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getTaskByTaskId'
            );
        }

        $resourcePath = '/api/v1/task/${taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskCount
     *
     * Get task count
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getTaskCount($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null)
    {
        list($response) = $this->getTaskCountWithHttpInfo($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id);
        return $response;
    }

    /**
     * Operation getTaskCountWithHttpInfo
     *
     * Get task count
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskCountWithHttpInfo($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getTaskCountRequest($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskCountAsync
     *
     * Get task count
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskCountAsync($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null)
    {
        return $this->getTaskCountAsyncWithHttpInfo($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskCountAsyncWithHttpInfo
     *
     * Get task count
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskCountAsyncWithHttpInfo($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getTaskCountRequest($start_time, $end_time, $data, $error_code, $service_type, $username, $progress, $is_error, $failure_reason, $parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskCount'
     *
     * @param  string $start_time This is the epoch start time from which tasks need to be fetched (optional)
     * @param  string $end_time This is the epoch end time upto which audit records need to be fetched (optional)
     * @param  string $data Fetch tasks that contains this data (optional)
     * @param  string $error_code Fetch tasks that have this error code (optional)
     * @param  string $service_type Fetch tasks with this service type (optional)
     * @param  string $username Fetch tasks with this username (optional)
     * @param  string $progress Fetch tasks that contains this progress (optional)
     * @param  string $is_error Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param  string $failure_reason Fetch tasks that contains this failure reason (optional)
     * @param  string $parent_id Fetch tasks that have this parent Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskCountRequest($start_time = null, $end_time = null, $data = null, $error_code = null, $service_type = null, $username = null, $progress = null, $is_error = null, $failure_reason = null, $parent_id = null)
    {

        $resourcePath = '/api/v1/task/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // query params
        if ($data !== null) {
            $queryParams['data'] = ObjectSerializer::toQueryValue($data);
        }
        // query params
        if ($error_code !== null) {
            $queryParams['errorCode'] = ObjectSerializer::toQueryValue($error_code);
        }
        // query params
        if ($service_type !== null) {
            $queryParams['serviceType'] = ObjectSerializer::toQueryValue($service_type);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = ObjectSerializer::toQueryValue($username);
        }
        // query params
        if ($progress !== null) {
            $queryParams['progress'] = ObjectSerializer::toQueryValue($progress);
        }
        // query params
        if ($is_error !== null) {
            $queryParams['isError'] = ObjectSerializer::toQueryValue($is_error);
        }
        // query params
        if ($failure_reason !== null) {
            $queryParams['failureReason'] = ObjectSerializer::toQueryValue($failure_reason);
        }
        // query params
        if ($parent_id !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskOperationByOperationIdRange
     *
     * getTaskByOperationId
     *
     * @param  string $operation_id operationId (required)
     * @param  int $offset Index, minimum value is 0 (required)
     * @param  int $limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse
     */
    public function getTaskOperationByOperationIdRange($operation_id, $offset, $limit)
    {
        list($response) = $this->getTaskOperationByOperationIdRangeWithHttpInfo($operation_id, $offset, $limit);
        return $response;
    }

    /**
     * Operation getTaskOperationByOperationIdRangeWithHttpInfo
     *
     * getTaskByOperationId
     *
     * @param  string $operation_id operationId (required)
     * @param  int $offset Index, minimum value is 0 (required)
     * @param  int $limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskOperationByOperationIdRangeWithHttpInfo($operation_id, $offset, $limit)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskOperationByOperationIdRangeRequest($operation_id, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskOperationByOperationIdRangeAsync
     *
     * getTaskByOperationId
     *
     * @param  string $operation_id operationId (required)
     * @param  int $offset Index, minimum value is 0 (required)
     * @param  int $limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskOperationByOperationIdRangeAsync($operation_id, $offset, $limit)
    {
        return $this->getTaskOperationByOperationIdRangeAsyncWithHttpInfo($operation_id, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskOperationByOperationIdRangeAsyncWithHttpInfo
     *
     * getTaskByOperationId
     *
     * @param  string $operation_id operationId (required)
     * @param  int $offset Index, minimum value is 0 (required)
     * @param  int $limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskOperationByOperationIdRangeAsyncWithHttpInfo($operation_id, $offset, $limit)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskOperationByOperationIdRangeRequest($operation_id, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskOperationByOperationIdRange'
     *
     * @param  string $operation_id operationId (required)
     * @param  int $offset Index, minimum value is 0 (required)
     * @param  int $limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskOperationByOperationIdRangeRequest($operation_id, $offset, $limit)
    {
        // verify the required parameter 'operation_id' is set
        if ($operation_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation_id when calling getTaskOperationByOperationIdRange'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling getTaskOperationByOperationIdRange'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling getTaskOperationByOperationIdRange'
            );
        }

        $resourcePath = '/api/v1/task/operation/${operationId}/${offset}/${limit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer::toPathValue($operation_id),
                $resourcePath
            );
        }
        // path params
        if ($offset !== null) {
            $resourcePath = str_replace(
                '{' . 'offset' . '}',
                ObjectSerializer::toPathValue($offset),
                $resourcePath
            );
        }
        // path params
        if ($limit !== null) {
            $resourcePath = str_replace(
                '{' . 'limit' . '}',
                ObjectSerializer::toPathValue($limit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskTreeByTaskId
     *
     * Get Task Tree
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse
     */
    public function getTaskTreeByTaskId($task_id)
    {
        list($response) = $this->getTaskTreeByTaskIdWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation getTaskTreeByTaskIdWithHttpInfo
     *
     * Get Task Tree
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskDTOListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskTreeByTaskIdWithHttpInfo($task_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskTreeByTaskIdRequest($task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskTreeByTaskIdAsync
     *
     * Get Task Tree
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskTreeByTaskIdAsync($task_id)
    {
        return $this->getTaskTreeByTaskIdAsyncWithHttpInfo($task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskTreeByTaskIdAsyncWithHttpInfo
     *
     * Get Task Tree
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskTreeByTaskIdAsyncWithHttpInfo($task_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskDTOListResponse';
        $request = $this->getTaskTreeByTaskIdRequest($task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskTreeByTaskId'
     *
     * @param  string $task_id UUID of the Task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskTreeByTaskIdRequest($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getTaskTreeByTaskId'
            );
        }

        $resourcePath = '/api/v1/task/${taskId}/tree';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
