<?php
/**
 * DnaIntentApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DnaIntentApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DnaIntentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteDnaIntentDeleteApplication
     *
     * Delete Application
     *
     * @param  string $application_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDnaIntentDeleteApplication($application_id, $__runsync = 'false', $__timeout = '10')
    {
        $this->deleteDnaIntentDeleteApplicationWithHttpInfo($application_id, $__runsync, $__timeout);
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationWithHttpInfo
     *
     * Delete Application
     *
     * @param  string $application_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDnaIntentDeleteApplicationWithHttpInfo($application_id, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->deleteDnaIntentDeleteApplicationRequest($application_id, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationAsync
     *
     * Delete Application
     *
     * @param  string $application_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteApplicationAsync($application_id, $__runsync = 'false', $__timeout = '10')
    {
        return $this->deleteDnaIntentDeleteApplicationAsyncWithHttpInfo($application_id, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationAsyncWithHttpInfo
     *
     * Delete Application
     *
     * @param  string $application_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteApplicationAsyncWithHttpInfo($application_id, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->deleteDnaIntentDeleteApplicationRequest($application_id, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDnaIntentDeleteApplication'
     *
     * @param  string $application_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDnaIntentDeleteApplicationRequest($application_id, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling deleteDnaIntentDeleteApplication'
            );
        }

        $resourcePath = '/dna/intent/api/v1/delete-application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['applicationId'] = ObjectSerializer::toHeaderValue($application_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationSet
     *
     * Delete Application Set
     *
     * @param  string $application_set_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDnaIntentDeleteApplicationSet($application_set_id, $__runsync = 'false', $__timeout = '10')
    {
        $this->deleteDnaIntentDeleteApplicationSetWithHttpInfo($application_set_id, $__runsync, $__timeout);
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationSetWithHttpInfo
     *
     * Delete Application Set
     *
     * @param  string $application_set_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDnaIntentDeleteApplicationSetWithHttpInfo($application_set_id, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->deleteDnaIntentDeleteApplicationSetRequest($application_set_id, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationSetAsync
     *
     * Delete Application Set
     *
     * @param  string $application_set_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteApplicationSetAsync($application_set_id, $__runsync = 'false', $__timeout = '10')
    {
        return $this->deleteDnaIntentDeleteApplicationSetAsyncWithHttpInfo($application_set_id, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDnaIntentDeleteApplicationSetAsyncWithHttpInfo
     *
     * Delete Application Set
     *
     * @param  string $application_set_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteApplicationSetAsyncWithHttpInfo($application_set_id, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->deleteDnaIntentDeleteApplicationSetRequest($application_set_id, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDnaIntentDeleteApplicationSet'
     *
     * @param  string $application_set_id  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDnaIntentDeleteApplicationSetRequest($application_set_id, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'application_set_id' is set
        if ($application_set_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_set_id when calling deleteDnaIntentDeleteApplicationSet'
            );
        }

        $resourcePath = '/dna/intent/api/v1/delete-application-set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }
        // header params
        if ($application_set_id !== null) {
            $headerParams['applicationSetId'] = ObjectSerializer::toHeaderValue($application_set_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDnaIntentDeleteSsid
     *
     * Delete SSID
     *
     * @param  string $device_name  (required)
     * @param  string $wireless_network_profile_name  (required)
     * @param  string $ssid_name  (required)
     * @param  string $interface_name  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DeleteSSIDResponse
     */
    public function deleteDnaIntentDeleteSsid($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync = 'false', $__timeout = '10')
    {
        list($response) = $this->deleteDnaIntentDeleteSsidWithHttpInfo($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync, $__timeout);
        return $response;
    }

    /**
     * Operation deleteDnaIntentDeleteSsidWithHttpInfo
     *
     * Delete SSID
     *
     * @param  string $device_name  (required)
     * @param  string $wireless_network_profile_name  (required)
     * @param  string $ssid_name  (required)
     * @param  string $interface_name  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DeleteSSIDResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDnaIntentDeleteSsidWithHttpInfo($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteSSIDResponse';
        $request = $this->deleteDnaIntentDeleteSsidRequest($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DeleteSSIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDnaIntentDeleteSsidAsync
     *
     * Delete SSID
     *
     * @param  string $device_name  (required)
     * @param  string $wireless_network_profile_name  (required)
     * @param  string $ssid_name  (required)
     * @param  string $interface_name  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteSsidAsync($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync = 'false', $__timeout = '10')
    {
        return $this->deleteDnaIntentDeleteSsidAsyncWithHttpInfo($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDnaIntentDeleteSsidAsyncWithHttpInfo
     *
     * Delete SSID
     *
     * @param  string $device_name  (required)
     * @param  string $wireless_network_profile_name  (required)
     * @param  string $ssid_name  (required)
     * @param  string $interface_name  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnaIntentDeleteSsidAsyncWithHttpInfo($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteSSIDResponse';
        $request = $this->deleteDnaIntentDeleteSsidRequest($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDnaIntentDeleteSsid'
     *
     * @param  string $device_name  (required)
     * @param  string $wireless_network_profile_name  (required)
     * @param  string $ssid_name  (required)
     * @param  string $interface_name  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDnaIntentDeleteSsidRequest($device_name, $wireless_network_profile_name, $ssid_name, $interface_name, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'device_name' is set
        if ($device_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_name when calling deleteDnaIntentDeleteSsid'
            );
        }
        // verify the required parameter 'wireless_network_profile_name' is set
        if ($wireless_network_profile_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wireless_network_profile_name when calling deleteDnaIntentDeleteSsid'
            );
        }
        // verify the required parameter 'ssid_name' is set
        if ($ssid_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ssid_name when calling deleteDnaIntentDeleteSsid'
            );
        }
        // verify the required parameter 'interface_name' is set
        if ($interface_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_name when calling deleteDnaIntentDeleteSsid'
            );
        }

        $resourcePath = '/dna/intent/api/v1/delete-ssid/${deviceName}/${wirelessNetworkProfileName}/${ssidName}/${interfaceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }

        // path params
        if ($device_name !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceName' . '}',
                ObjectSerializer::toPathValue($device_name),
                $resourcePath
            );
        }
        // path params
        if ($wireless_network_profile_name !== null) {
            $resourcePath = str_replace(
                '{' . 'wirelessNetworkProfileName' . '}',
                ObjectSerializer::toPathValue($wireless_network_profile_name),
                $resourcePath
            );
        }
        // path params
        if ($ssid_name !== null) {
            $resourcePath = str_replace(
                '{' . 'ssidName' . '}',
                ObjectSerializer::toPathValue($ssid_name),
                $resourcePath
            );
        }
        // path params
        if ($interface_name !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceName' . '}',
                ObjectSerializer::toPathValue($interface_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentApplicationCount
     *
     * Get Applications Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentApplicationCount($count, $__runsync = 'false', $__timeout = '10')
    {
        $this->getDnaIntentApplicationCountWithHttpInfo($count, $__runsync, $__timeout);
    }

    /**
     * Operation getDnaIntentApplicationCountWithHttpInfo
     *
     * Get Applications Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentApplicationCountWithHttpInfo($count, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationCountRequest($count, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentApplicationCountAsync
     *
     * Get Applications Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationCountAsync($count, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentApplicationCountAsyncWithHttpInfo($count, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentApplicationCountAsyncWithHttpInfo
     *
     * Get Applications Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationCountAsyncWithHttpInfo($count, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationCountRequest($count, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentApplicationCount'
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentApplicationCountRequest($count, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling getDnaIntentApplicationCount'
            );
        }

        $resourcePath = '/dna/intent/api/v1/application/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }

        // path params
        if ($count !== null) {
            $resourcePath = str_replace(
                '{' . 'count' . '}',
                ObjectSerializer::toPathValue($count),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentApplicationPolicy
     *
     * Get Application Policies
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_policy_namespace  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentApplicationPolicy($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_policy_namespace = '')
    {
        $this->getDnaIntentApplicationPolicyWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_policy_namespace);
    }

    /**
     * Operation getDnaIntentApplicationPolicyWithHttpInfo
     *
     * Get Application Policies
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_policy_namespace  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentApplicationPolicyWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_policy_namespace = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationPolicyRequest($__runsync, $__timeout, $offset, $limit, $application_policy_namespace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentApplicationPolicyAsync
     *
     * Get Application Policies
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_policy_namespace  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationPolicyAsync($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_policy_namespace = '')
    {
        return $this->getDnaIntentApplicationPolicyAsyncWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_policy_namespace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentApplicationPolicyAsyncWithHttpInfo
     *
     * Get Application Policies
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_policy_namespace  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationPolicyAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_policy_namespace = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationPolicyRequest($__runsync, $__timeout, $offset, $limit, $application_policy_namespace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentApplicationPolicy'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_policy_namespace  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentApplicationPolicyRequest($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_policy_namespace = '')
    {

        $resourcePath = '/dna/intent/api/v1/application-policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }
        // header params
        if ($offset !== null) {
            $headerParams['offset'] = ObjectSerializer::toHeaderValue($offset);
        }
        // header params
        if ($limit !== null) {
            $headerParams['limit'] = ObjectSerializer::toHeaderValue($limit);
        }
        // header params
        if ($application_policy_namespace !== null) {
            $headerParams['applicationPolicyNamespace'] = ObjectSerializer::toHeaderValue($application_policy_namespace);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentApplicationSetCount
     *
     * Get Application Sets Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentApplicationSetCount($count, $__runsync = 'false', $__timeout = '10')
    {
        $this->getDnaIntentApplicationSetCountWithHttpInfo($count, $__runsync, $__timeout);
    }

    /**
     * Operation getDnaIntentApplicationSetCountWithHttpInfo
     *
     * Get Application Sets Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentApplicationSetCountWithHttpInfo($count, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationSetCountRequest($count, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentApplicationSetCountAsync
     *
     * Get Application Sets Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationSetCountAsync($count, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentApplicationSetCountAsyncWithHttpInfo($count, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentApplicationSetCountAsyncWithHttpInfo
     *
     * Get Application Sets Count
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationSetCountAsyncWithHttpInfo($count, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationSetCountRequest($count, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentApplicationSetCount'
     *
     * @param  string $count  (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentApplicationSetCountRequest($count, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling getDnaIntentApplicationSetCount'
            );
        }

        $resourcePath = '/dna/intent/api/v1/application-set/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }

        // path params
        if ($count !== null) {
            $resourcePath = str_replace(
                '{' . 'count' . '}',
                ObjectSerializer::toPathValue($count),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentApplicationSets
     *
     * Get Application Sets
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_set_name  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentApplicationSets($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_set_name = '')
    {
        $this->getDnaIntentApplicationSetsWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_set_name);
    }

    /**
     * Operation getDnaIntentApplicationSetsWithHttpInfo
     *
     * Get Application Sets
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_set_name  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentApplicationSetsWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_set_name = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationSetsRequest($__runsync, $__timeout, $offset, $limit, $application_set_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentApplicationSetsAsync
     *
     * Get Application Sets
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_set_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationSetsAsync($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_set_name = '')
    {
        return $this->getDnaIntentApplicationSetsAsyncWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_set_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentApplicationSetsAsyncWithHttpInfo
     *
     * Get Application Sets
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_set_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationSetsAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_set_name = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationSetsRequest($__runsync, $__timeout, $offset, $limit, $application_set_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentApplicationSets'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_set_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentApplicationSetsRequest($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_set_name = '')
    {

        $resourcePath = '/dna/intent/api/v1/application-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }
        // header params
        if ($offset !== null) {
            $headerParams['offset'] = ObjectSerializer::toHeaderValue($offset);
        }
        // header params
        if ($limit !== null) {
            $headerParams['limit'] = ObjectSerializer::toHeaderValue($limit);
        }
        // header params
        if ($application_set_name !== null) {
            $headerParams['applicationSetName'] = ObjectSerializer::toHeaderValue($application_set_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentApplications
     *
     * Get Applications
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_name  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentApplications($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_name = '')
    {
        $this->getDnaIntentApplicationsWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_name);
    }

    /**
     * Operation getDnaIntentApplicationsWithHttpInfo
     *
     * Get Applications
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_name  (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentApplicationsWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_name = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationsRequest($__runsync, $__timeout, $offset, $limit, $application_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentApplicationsAsync
     *
     * Get Applications
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationsAsync($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_name = '')
    {
        return $this->getDnaIntentApplicationsAsyncWithHttpInfo($__runsync, $__timeout, $offset, $limit, $application_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentApplicationsAsyncWithHttpInfo
     *
     * Get Applications
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentApplicationsAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_name = '')
    {
        $returnType = '';
        $request = $this->getDnaIntentApplicationsRequest($__runsync, $__timeout, $offset, $limit, $application_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentApplications'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  float $offset  (optional, default to 1)
     * @param  float $limit  (optional, default to 500)
     * @param  string $application_name  (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentApplicationsRequest($__runsync = 'false', $__timeout = '10', $offset = '1', $limit = '500', $application_name = '')
    {

        $resourcePath = '/dna/intent/api/v1/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }
        // header params
        if ($offset !== null) {
            $headerParams['offset'] = ObjectSerializer::toHeaderValue($offset);
        }
        // header params
        if ($limit !== null) {
            $headerParams['limit'] = ObjectSerializer::toHeaderValue($limit);
        }
        // header params
        if ($application_name !== null) {
            $headerParams['applicationName'] = ObjectSerializer::toHeaderValue($application_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentClieDetail
     *
     * Client Detail
     *
     * @param  string $timestamp timestamp (required)
     * @param  string $mac_address MAC Address of the client (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ClientDetailResponse
     */
    public function getDnaIntentClieDetail($timestamp, $mac_address, $__runsync = 'false', $__timeout = '10')
    {
        list($response) = $this->getDnaIntentClieDetailWithHttpInfo($timestamp, $mac_address, $__runsync, $__timeout);
        return $response;
    }

    /**
     * Operation getDnaIntentClieDetailWithHttpInfo
     *
     * Client Detail
     *
     * @param  string $timestamp timestamp (required)
     * @param  string $mac_address MAC Address of the client (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ClientDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentClieDetailWithHttpInfo($timestamp, $mac_address, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClientDetailResponse';
        $request = $this->getDnaIntentClieDetailRequest($timestamp, $mac_address, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ClientDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentClieDetailAsync
     *
     * Client Detail
     *
     * @param  string $timestamp timestamp (required)
     * @param  string $mac_address MAC Address of the client (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentClieDetailAsync($timestamp, $mac_address, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentClieDetailAsyncWithHttpInfo($timestamp, $mac_address, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentClieDetailAsyncWithHttpInfo
     *
     * Client Detail
     *
     * @param  string $timestamp timestamp (required)
     * @param  string $mac_address MAC Address of the client (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentClieDetailAsyncWithHttpInfo($timestamp, $mac_address, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClientDetailResponse';
        $request = $this->getDnaIntentClieDetailRequest($timestamp, $mac_address, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentClieDetail'
     *
     * @param  string $timestamp timestamp (required)
     * @param  string $mac_address MAC Address of the client (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentClieDetailRequest($timestamp, $mac_address, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling getDnaIntentClieDetail'
            );
        }
        // verify the required parameter 'mac_address' is set
        if ($mac_address === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mac_address when calling getDnaIntentClieDetail'
            );
        }

        $resourcePath = '/dna/intent/api/v1/client-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($timestamp !== null) {
            $queryParams['timestamp'] = ObjectSerializer::toQueryValue($timestamp);
        }
        // query params
        if ($mac_address !== null) {
            $queryParams['macAddress'] = ObjectSerializer::toQueryValue($mac_address);
        }
        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentClientHealth
     *
     * Client Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ClientHealthResponse
     */
    public function getDnaIntentClientHealth($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        list($response) = $this->getDnaIntentClientHealthWithHttpInfo($start_time, $end_time, $__runsync, $__timeout);
        return $response;
    }

    /**
     * Operation getDnaIntentClientHealthWithHttpInfo
     *
     * Client Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ClientHealthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentClientHealthWithHttpInfo($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClientHealthResponse';
        $request = $this->getDnaIntentClientHealthRequest($start_time, $end_time, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ClientHealthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentClientHealthAsync
     *
     * Client Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentClientHealthAsync($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentClientHealthAsyncWithHttpInfo($start_time, $end_time, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentClientHealthAsyncWithHttpInfo
     *
     * Client Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentClientHealthAsyncWithHttpInfo($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClientHealthResponse';
        $request = $this->getDnaIntentClientHealthRequest($start_time, $end_time, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentClientHealth'
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentClientHealthRequest($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling getDnaIntentClientHealth'
            );
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling getDnaIntentClientHealth'
            );
        }

        $resourcePath = '/dna/intent/api/v1/client-health';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentNetworkDeviceDetail
     *
     * Network Device Detail
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  string $timestamp timestamp (optional, default to )
     * @param  string $search_by MAC Address or UUID or Name of the Device (optional, default to )
     * @param  string $identifier macAddress or uuid or nwDeviceName (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceDetailResponse
     */
    public function getDnaIntentNetworkDeviceDetail($__runsync = 'false', $__timeout = '10', $timestamp = '', $search_by = '', $identifier = '')
    {
        list($response) = $this->getDnaIntentNetworkDeviceDetailWithHttpInfo($__runsync, $__timeout, $timestamp, $search_by, $identifier);
        return $response;
    }

    /**
     * Operation getDnaIntentNetworkDeviceDetailWithHttpInfo
     *
     * Network Device Detail
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  string $timestamp timestamp (optional, default to )
     * @param  string $search_by MAC Address or UUID or Name of the Device (optional, default to )
     * @param  string $identifier macAddress or uuid or nwDeviceName (optional, default to )
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentNetworkDeviceDetailWithHttpInfo($__runsync = 'false', $__timeout = '10', $timestamp = '', $search_by = '', $identifier = '')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceDetailResponse';
        $request = $this->getDnaIntentNetworkDeviceDetailRequest($__runsync, $__timeout, $timestamp, $search_by, $identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentNetworkDeviceDetailAsync
     *
     * Network Device Detail
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  string $timestamp timestamp (optional, default to )
     * @param  string $search_by MAC Address or UUID or Name of the Device (optional, default to )
     * @param  string $identifier macAddress or uuid or nwDeviceName (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentNetworkDeviceDetailAsync($__runsync = 'false', $__timeout = '10', $timestamp = '', $search_by = '', $identifier = '')
    {
        return $this->getDnaIntentNetworkDeviceDetailAsyncWithHttpInfo($__runsync, $__timeout, $timestamp, $search_by, $identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentNetworkDeviceDetailAsyncWithHttpInfo
     *
     * Network Device Detail
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  string $timestamp timestamp (optional, default to )
     * @param  string $search_by MAC Address or UUID or Name of the Device (optional, default to )
     * @param  string $identifier macAddress or uuid or nwDeviceName (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentNetworkDeviceDetailAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10', $timestamp = '', $search_by = '', $identifier = '')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceDetailResponse';
        $request = $this->getDnaIntentNetworkDeviceDetailRequest($__runsync, $__timeout, $timestamp, $search_by, $identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentNetworkDeviceDetail'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param  string $timestamp timestamp (optional, default to )
     * @param  string $search_by MAC Address or UUID or Name of the Device (optional, default to )
     * @param  string $identifier macAddress or uuid or nwDeviceName (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentNetworkDeviceDetailRequest($__runsync = 'false', $__timeout = '10', $timestamp = '', $search_by = '', $identifier = '')
    {

        $resourcePath = '/dna/intent/api/v1/network-device-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($timestamp !== null) {
            $queryParams['timestamp'] = ObjectSerializer::toQueryValue($timestamp);
        }
        // query params
        if ($search_by !== null) {
            $queryParams['searchBy'] = ObjectSerializer::toQueryValue($search_by);
        }
        // query params
        if ($identifier !== null) {
            $queryParams['identifier'] = ObjectSerializer::toQueryValue($identifier);
        }
        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentNetworkHealth
     *
     * Network Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDnaIntentNetworkHealth($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        $this->getDnaIntentNetworkHealthWithHttpInfo($start_time, $end_time, $__runsync, $__timeout);
    }

    /**
     * Operation getDnaIntentNetworkHealthWithHttpInfo
     *
     * Network Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentNetworkHealthWithHttpInfo($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentNetworkHealthRequest($start_time, $end_time, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentNetworkHealthAsync
     *
     * Network Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentNetworkHealthAsync($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentNetworkHealthAsyncWithHttpInfo($start_time, $end_time, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentNetworkHealthAsyncWithHttpInfo
     *
     * Network Health
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentNetworkHealthAsyncWithHttpInfo($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->getDnaIntentNetworkHealthRequest($start_time, $end_time, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentNetworkHealth'
     *
     * @param  string $start_time Start Time (required)
     * @param  string $end_time End Time (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentNetworkHealthRequest($start_time, $end_time, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling getDnaIntentNetworkHealth'
            );
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling getDnaIntentNetworkHealth'
            );
        }

        $resourcePath = '/dna/intent/api/v1/network-health';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($end_time);
        }
        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnaIntentSiteHierarchy
     *
     * Site Hierarchy
     *
     * @param  string $timestamp Timestamp (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SiteHierarchyResponse
     */
    public function getDnaIntentSiteHierarchy($timestamp, $__runsync = 'false', $__timeout = '10')
    {
        list($response) = $this->getDnaIntentSiteHierarchyWithHttpInfo($timestamp, $__runsync, $__timeout);
        return $response;
    }

    /**
     * Operation getDnaIntentSiteHierarchyWithHttpInfo
     *
     * Site Hierarchy
     *
     * @param  string $timestamp Timestamp (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SiteHierarchyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnaIntentSiteHierarchyWithHttpInfo($timestamp, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SiteHierarchyResponse';
        $request = $this->getDnaIntentSiteHierarchyRequest($timestamp, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SiteHierarchyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnaIntentSiteHierarchyAsync
     *
     * Site Hierarchy
     *
     * @param  string $timestamp Timestamp (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentSiteHierarchyAsync($timestamp, $__runsync = 'false', $__timeout = '10')
    {
        return $this->getDnaIntentSiteHierarchyAsyncWithHttpInfo($timestamp, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnaIntentSiteHierarchyAsyncWithHttpInfo
     *
     * Site Hierarchy
     *
     * @param  string $timestamp Timestamp (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnaIntentSiteHierarchyAsyncWithHttpInfo($timestamp, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SiteHierarchyResponse';
        $request = $this->getDnaIntentSiteHierarchyRequest($timestamp, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnaIntentSiteHierarchy'
     *
     * @param  string $timestamp Timestamp (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDnaIntentSiteHierarchyRequest($timestamp, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling getDnaIntentSiteHierarchy'
            );
        }

        $resourcePath = '/dna/intent/api/v1/site-hierarchy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($timestamp !== null) {
            $queryParams['timestamp'] = ObjectSerializer::toQueryValue($timestamp);
        }
        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDnaIntentCreateApplication
     *
     * Post Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postDnaIntentCreateApplication($__runsync = 'false', $__timeout = '10')
    {
        $this->postDnaIntentCreateApplicationWithHttpInfo($__runsync, $__timeout);
    }

    /**
     * Operation postDnaIntentCreateApplicationWithHttpInfo
     *
     * Post Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDnaIntentCreateApplicationWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationRequest($__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postDnaIntentCreateApplicationAsync
     *
     * Post Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationAsync($__runsync = 'false', $__timeout = '10')
    {
        return $this->postDnaIntentCreateApplicationAsyncWithHttpInfo($__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDnaIntentCreateApplicationAsyncWithHttpInfo
     *
     * Post Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationRequest($__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDnaIntentCreateApplication'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDnaIntentCreateApplicationRequest($__runsync = 'false', $__timeout = '10')
    {

        $resourcePath = '/dna/intent/api/v1/create-application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDnaIntentCreateApplicationPolicy
     *
     * Post Application Policy Intent
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postDnaIntentCreateApplicationPolicy($__runsync = 'false', $__timeout = '10')
    {
        $this->postDnaIntentCreateApplicationPolicyWithHttpInfo($__runsync, $__timeout);
    }

    /**
     * Operation postDnaIntentCreateApplicationPolicyWithHttpInfo
     *
     * Post Application Policy Intent
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDnaIntentCreateApplicationPolicyWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationPolicyRequest($__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postDnaIntentCreateApplicationPolicyAsync
     *
     * Post Application Policy Intent
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationPolicyAsync($__runsync = 'false', $__timeout = '10')
    {
        return $this->postDnaIntentCreateApplicationPolicyAsyncWithHttpInfo($__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDnaIntentCreateApplicationPolicyAsyncWithHttpInfo
     *
     * Post Application Policy Intent
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationPolicyAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationPolicyRequest($__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDnaIntentCreateApplicationPolicy'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDnaIntentCreateApplicationPolicyRequest($__runsync = 'false', $__timeout = '10')
    {

        $resourcePath = '/dna/intent/api/v1/create-application-policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDnaIntentCreateApplicationSet
     *
     * Post Application Set
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postDnaIntentCreateApplicationSet($__runsync = 'false', $__timeout = '10')
    {
        $this->postDnaIntentCreateApplicationSetWithHttpInfo($__runsync, $__timeout);
    }

    /**
     * Operation postDnaIntentCreateApplicationSetWithHttpInfo
     *
     * Post Application Set
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDnaIntentCreateApplicationSetWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationSetRequest($__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postDnaIntentCreateApplicationSetAsync
     *
     * Post Application Set
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationSetAsync($__runsync = 'false', $__timeout = '10')
    {
        return $this->postDnaIntentCreateApplicationSetAsyncWithHttpInfo($__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDnaIntentCreateApplicationSetAsyncWithHttpInfo
     *
     * Post Application Set
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateApplicationSetAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->postDnaIntentCreateApplicationSetRequest($__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDnaIntentCreateApplicationSet'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDnaIntentCreateApplicationSetRequest($__runsync = 'false', $__timeout = '10')
    {

        $resourcePath = '/dna/intent/api/v1/create-application-set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDnaIntentCreateSsid
     *
     * Create SSID
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CreateSSIDRequest $request request (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CreateSSIDResponse
     */
    public function postDnaIntentCreateSsid($request, $__runsync = 'false', $__timeout = '10')
    {
        list($response) = $this->postDnaIntentCreateSsidWithHttpInfo($request, $__runsync, $__timeout);
        return $response;
    }

    /**
     * Operation postDnaIntentCreateSsidWithHttpInfo
     *
     * Create SSID
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CreateSSIDRequest $request request (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CreateSSIDResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDnaIntentCreateSsidWithHttpInfo($request, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateSSIDResponse';
        $request = $this->postDnaIntentCreateSsidRequest($request, $__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CreateSSIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDnaIntentCreateSsidAsync
     *
     * Create SSID
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CreateSSIDRequest $request request (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateSsidAsync($request, $__runsync = 'false', $__timeout = '10')
    {
        return $this->postDnaIntentCreateSsidAsyncWithHttpInfo($request, $__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDnaIntentCreateSsidAsyncWithHttpInfo
     *
     * Create SSID
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CreateSSIDRequest $request request (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDnaIntentCreateSsidAsyncWithHttpInfo($request, $__runsync = 'false', $__timeout = '10')
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateSSIDResponse';
        $request = $this->postDnaIntentCreateSsidRequest($request, $__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDnaIntentCreateSsid'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CreateSSIDRequest $request request (required)
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDnaIntentCreateSsidRequest($request, $__runsync = 'false', $__timeout = '10')
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postDnaIntentCreateSsid'
            );
        }

        $resourcePath = '/dna/intent/api/v1/create-ssid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDnaIntentUpdateApplication
     *
     * Edit Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putDnaIntentUpdateApplication($__runsync = 'false', $__timeout = '10')
    {
        $this->putDnaIntentUpdateApplicationWithHttpInfo($__runsync, $__timeout);
    }

    /**
     * Operation putDnaIntentUpdateApplicationWithHttpInfo
     *
     * Edit Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDnaIntentUpdateApplicationWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->putDnaIntentUpdateApplicationRequest($__runsync, $__timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putDnaIntentUpdateApplicationAsync
     *
     * Edit Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDnaIntentUpdateApplicationAsync($__runsync = 'false', $__timeout = '10')
    {
        return $this->putDnaIntentUpdateApplicationAsyncWithHttpInfo($__runsync, $__timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDnaIntentUpdateApplicationAsyncWithHttpInfo
     *
     * Edit Application
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDnaIntentUpdateApplicationAsyncWithHttpInfo($__runsync = 'false', $__timeout = '10')
    {
        $returnType = '';
        $request = $this->putDnaIntentUpdateApplicationRequest($__runsync, $__timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDnaIntentUpdateApplication'
     *
     * @param  bool $__runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param  float $__timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putDnaIntentUpdateApplicationRequest($__runsync = 'false', $__timeout = '10')
    {

        $resourcePath = '/dna/intent/api/v1/update-application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($__runsync !== null) {
            $headerParams['__runsync'] = ObjectSerializer::toHeaderValue($__runsync);
        }
        // header params
        if ($__timeout !== null) {
            $headerParams['__timeout'] = ObjectSerializer::toHeaderValue($__timeout);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
