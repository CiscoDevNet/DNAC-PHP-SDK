<?php
/**
 * FlowAnalysisApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * FlowAnalysisApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlowAnalysisApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFlowAnalysisByFlowAnalysisId
     *
     * Deletes a flow analysis request
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function deleteFlowAnalysisByFlowAnalysisId($flow_analysis_id)
    {
        list($response) = $this->deleteFlowAnalysisByFlowAnalysisIdWithHttpInfo($flow_analysis_id);
        return $response;
    }

    /**
     * Operation deleteFlowAnalysisByFlowAnalysisIdWithHttpInfo
     *
     * Deletes a flow analysis request
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFlowAnalysisByFlowAnalysisIdWithHttpInfo($flow_analysis_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFlowAnalysisByFlowAnalysisIdAsync
     *
     * Deletes a flow analysis request
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFlowAnalysisByFlowAnalysisIdAsync($flow_analysis_id)
    {
        return $this->deleteFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo($flow_analysis_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo
     *
     * Deletes a flow analysis request
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo($flow_analysis_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFlowAnalysisByFlowAnalysisId'
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id)
    {
        // verify the required parameter 'flow_analysis_id' is set
        if ($flow_analysis_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_analysis_id when calling deleteFlowAnalysisByFlowAnalysisId'
            );
        }

        $resourcePath = '/api/v1/flow-analysis/${flowAnalysisId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flow_analysis_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowAnalysisId' . '}',
                ObjectSerializer::toPathValue($flow_analysis_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFlowAnalysis
     *
     * Retrieves a summary of all flow analyses stored
     *
     * @param  bool $periodic_refresh Is analysis periodically refreshed? (optional)
     * @param  string $source_ip Source IP address (optional)
     * @param  string $dest_ip Destination IP adress (optional)
     * @param  string $source_port Source port (optional)
     * @param  string $dest_port Destination port (optional)
     * @param  string $gt_create_time Analyses requested after this time (optional)
     * @param  string $lt_create_time Analyses requested before this time (optional)
     * @param  string $protocol Protocol (optional)
     * @param  string $status Status (optional)
     * @param  string $task_id Task ID (optional)
     * @param  string $last_update_time Last update time (optional)
     * @param  string $limit Number of resources returned (optional)
     * @param  string $offset Start index of resources returned (1-based) (optional)
     * @param  string $order Order by this field (optional)
     * @param  string $sort_by Sort by this field (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutput
     */
    public function getFlowAnalysis($periodic_refresh = null, $source_ip = null, $dest_ip = null, $source_port = null, $dest_port = null, $gt_create_time = null, $lt_create_time = null, $protocol = null, $status = null, $task_id = null, $last_update_time = null, $limit = null, $offset = null, $order = null, $sort_by = null)
    {
        list($response) = $this->getFlowAnalysisWithHttpInfo($periodic_refresh, $source_ip, $dest_ip, $source_port, $dest_port, $gt_create_time, $lt_create_time, $protocol, $status, $task_id, $last_update_time, $limit, $offset, $order, $sort_by);
        return $response;
    }

    /**
     * Operation getFlowAnalysisWithHttpInfo
     *
     * Retrieves a summary of all flow analyses stored
     *
     * @param  bool $periodic_refresh Is analysis periodically refreshed? (optional)
     * @param  string $source_ip Source IP address (optional)
     * @param  string $dest_ip Destination IP adress (optional)
     * @param  string $source_port Source port (optional)
     * @param  string $dest_port Destination port (optional)
     * @param  string $gt_create_time Analyses requested after this time (optional)
     * @param  string $lt_create_time Analyses requested before this time (optional)
     * @param  string $protocol Protocol (optional)
     * @param  string $status Status (optional)
     * @param  string $task_id Task ID (optional)
     * @param  string $last_update_time Last update time (optional)
     * @param  string $limit Number of resources returned (optional)
     * @param  string $offset Start index of resources returned (1-based) (optional)
     * @param  string $order Order by this field (optional)
     * @param  string $sort_by Sort by this field (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFlowAnalysisWithHttpInfo($periodic_refresh = null, $source_ip = null, $dest_ip = null, $source_port = null, $dest_port = null, $gt_create_time = null, $lt_create_time = null, $protocol = null, $status = null, $task_id = null, $last_update_time = null, $limit = null, $offset = null, $order = null, $sort_by = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutput';
        $request = $this->getFlowAnalysisRequest($periodic_refresh, $source_ip, $dest_ip, $source_port, $dest_port, $gt_create_time, $lt_create_time, $protocol, $status, $task_id, $last_update_time, $limit, $offset, $order, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFlowAnalysisAsync
     *
     * Retrieves a summary of all flow analyses stored
     *
     * @param  bool $periodic_refresh Is analysis periodically refreshed? (optional)
     * @param  string $source_ip Source IP address (optional)
     * @param  string $dest_ip Destination IP adress (optional)
     * @param  string $source_port Source port (optional)
     * @param  string $dest_port Destination port (optional)
     * @param  string $gt_create_time Analyses requested after this time (optional)
     * @param  string $lt_create_time Analyses requested before this time (optional)
     * @param  string $protocol Protocol (optional)
     * @param  string $status Status (optional)
     * @param  string $task_id Task ID (optional)
     * @param  string $last_update_time Last update time (optional)
     * @param  string $limit Number of resources returned (optional)
     * @param  string $offset Start index of resources returned (1-based) (optional)
     * @param  string $order Order by this field (optional)
     * @param  string $sort_by Sort by this field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFlowAnalysisAsync($periodic_refresh = null, $source_ip = null, $dest_ip = null, $source_port = null, $dest_port = null, $gt_create_time = null, $lt_create_time = null, $protocol = null, $status = null, $task_id = null, $last_update_time = null, $limit = null, $offset = null, $order = null, $sort_by = null)
    {
        return $this->getFlowAnalysisAsyncWithHttpInfo($periodic_refresh, $source_ip, $dest_ip, $source_port, $dest_port, $gt_create_time, $lt_create_time, $protocol, $status, $task_id, $last_update_time, $limit, $offset, $order, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFlowAnalysisAsyncWithHttpInfo
     *
     * Retrieves a summary of all flow analyses stored
     *
     * @param  bool $periodic_refresh Is analysis periodically refreshed? (optional)
     * @param  string $source_ip Source IP address (optional)
     * @param  string $dest_ip Destination IP adress (optional)
     * @param  string $source_port Source port (optional)
     * @param  string $dest_port Destination port (optional)
     * @param  string $gt_create_time Analyses requested after this time (optional)
     * @param  string $lt_create_time Analyses requested before this time (optional)
     * @param  string $protocol Protocol (optional)
     * @param  string $status Status (optional)
     * @param  string $task_id Task ID (optional)
     * @param  string $last_update_time Last update time (optional)
     * @param  string $limit Number of resources returned (optional)
     * @param  string $offset Start index of resources returned (1-based) (optional)
     * @param  string $order Order by this field (optional)
     * @param  string $sort_by Sort by this field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFlowAnalysisAsyncWithHttpInfo($periodic_refresh = null, $source_ip = null, $dest_ip = null, $source_port = null, $dest_port = null, $gt_create_time = null, $lt_create_time = null, $protocol = null, $status = null, $task_id = null, $last_update_time = null, $limit = null, $offset = null, $order = null, $sort_by = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutput';
        $request = $this->getFlowAnalysisRequest($periodic_refresh, $source_ip, $dest_ip, $source_port, $dest_port, $gt_create_time, $lt_create_time, $protocol, $status, $task_id, $last_update_time, $limit, $offset, $order, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFlowAnalysis'
     *
     * @param  bool $periodic_refresh Is analysis periodically refreshed? (optional)
     * @param  string $source_ip Source IP address (optional)
     * @param  string $dest_ip Destination IP adress (optional)
     * @param  string $source_port Source port (optional)
     * @param  string $dest_port Destination port (optional)
     * @param  string $gt_create_time Analyses requested after this time (optional)
     * @param  string $lt_create_time Analyses requested before this time (optional)
     * @param  string $protocol Protocol (optional)
     * @param  string $status Status (optional)
     * @param  string $task_id Task ID (optional)
     * @param  string $last_update_time Last update time (optional)
     * @param  string $limit Number of resources returned (optional)
     * @param  string $offset Start index of resources returned (1-based) (optional)
     * @param  string $order Order by this field (optional)
     * @param  string $sort_by Sort by this field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFlowAnalysisRequest($periodic_refresh = null, $source_ip = null, $dest_ip = null, $source_port = null, $dest_port = null, $gt_create_time = null, $lt_create_time = null, $protocol = null, $status = null, $task_id = null, $last_update_time = null, $limit = null, $offset = null, $order = null, $sort_by = null)
    {

        $resourcePath = '/api/v1/flow-analysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($periodic_refresh !== null) {
            $queryParams['periodicRefresh'] = ObjectSerializer::toQueryValue($periodic_refresh);
        }
        // query params
        if ($source_ip !== null) {
            $queryParams['sourceIP'] = ObjectSerializer::toQueryValue($source_ip);
        }
        // query params
        if ($dest_ip !== null) {
            $queryParams['destIP'] = ObjectSerializer::toQueryValue($dest_ip);
        }
        // query params
        if ($source_port !== null) {
            $queryParams['sourcePort'] = ObjectSerializer::toQueryValue($source_port);
        }
        // query params
        if ($dest_port !== null) {
            $queryParams['destPort'] = ObjectSerializer::toQueryValue($dest_port);
        }
        // query params
        if ($gt_create_time !== null) {
            $queryParams['gtCreateTime'] = ObjectSerializer::toQueryValue($gt_create_time);
        }
        // query params
        if ($lt_create_time !== null) {
            $queryParams['ltCreateTime'] = ObjectSerializer::toQueryValue($lt_create_time);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($last_update_time !== null) {
            $queryParams['lastUpdateTime'] = ObjectSerializer::toQueryValue($last_update_time);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFlowAnalysisByFlowAnalysisId
     *
     * Retrieves result of a previously requested flow analysis
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResult
     */
    public function getFlowAnalysisByFlowAnalysisId($flow_analysis_id)
    {
        list($response) = $this->getFlowAnalysisByFlowAnalysisIdWithHttpInfo($flow_analysis_id);
        return $response;
    }

    /**
     * Operation getFlowAnalysisByFlowAnalysisIdWithHttpInfo
     *
     * Retrieves result of a previously requested flow analysis
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\PathResponseResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFlowAnalysisByFlowAnalysisIdWithHttpInfo($flow_analysis_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\PathResponseResult';
        $request = $this->getFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\PathResponseResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFlowAnalysisByFlowAnalysisIdAsync
     *
     * Retrieves result of a previously requested flow analysis
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFlowAnalysisByFlowAnalysisIdAsync($flow_analysis_id)
    {
        return $this->getFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo($flow_analysis_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo
     *
     * Retrieves result of a previously requested flow analysis
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFlowAnalysisByFlowAnalysisIdAsyncWithHttpInfo($flow_analysis_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\PathResponseResult';
        $request = $this->getFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFlowAnalysisByFlowAnalysisId'
     *
     * @param  string $flow_analysis_id Flow analysis request id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFlowAnalysisByFlowAnalysisIdRequest($flow_analysis_id)
    {
        // verify the required parameter 'flow_analysis_id' is set
        if ($flow_analysis_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_analysis_id when calling getFlowAnalysisByFlowAnalysisId'
            );
        }

        $resourcePath = '/api/v1/flow-analysis/${flowAnalysisId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flow_analysis_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowAnalysisId' . '}',
                ObjectSerializer::toPathValue($flow_analysis_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
