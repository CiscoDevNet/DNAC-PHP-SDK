<?php
/**
 * NetworkDeviceApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * NetworkDeviceApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkDeviceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteNetworkDeviceById
     *
     * Delete network device by ID
     *
     * @param  string $id Device ID (required)
     * @param  bool $is_force_delete isForceDelete (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function deleteNetworkDeviceById($id, $is_force_delete = null)
    {
        list($response) = $this->deleteNetworkDeviceByIdWithHttpInfo($id, $is_force_delete);
        return $response;
    }

    /**
     * Operation deleteNetworkDeviceByIdWithHttpInfo
     *
     * Delete network device by ID
     *
     * @param  string $id Device ID (required)
     * @param  bool $is_force_delete isForceDelete (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkDeviceByIdWithHttpInfo($id, $is_force_delete = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteNetworkDeviceByIdRequest($id, $is_force_delete);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkDeviceByIdAsync
     *
     * Delete network device by ID
     *
     * @param  string $id Device ID (required)
     * @param  bool $is_force_delete isForceDelete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkDeviceByIdAsync($id, $is_force_delete = null)
    {
        return $this->deleteNetworkDeviceByIdAsyncWithHttpInfo($id, $is_force_delete)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkDeviceByIdAsyncWithHttpInfo
     *
     * Delete network device by ID
     *
     * @param  string $id Device ID (required)
     * @param  bool $is_force_delete isForceDelete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkDeviceByIdAsyncWithHttpInfo($id, $is_force_delete = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->deleteNetworkDeviceByIdRequest($id, $is_force_delete);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkDeviceById'
     *
     * @param  string $id Device ID (required)
     * @param  bool $is_force_delete isForceDelete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNetworkDeviceByIdRequest($id, $is_force_delete = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteNetworkDeviceById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_force_delete !== null) {
            $queryParams['isForceDelete'] = ObjectSerializer::toQueryValue($is_force_delete);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDevice
     *
     * Retrieves all network devices
     *
     * @param  string[] $hostname hostname (optional)
     * @param  string[] $management_ip_address managementIpAddress (optional)
     * @param  string[] $mac_address macAddress (optional)
     * @param  string[] $location_name locationName (optional)
     * @param  string[] $serial_number serialNumber (optional)
     * @param  string[] $location location (optional)
     * @param  string[] $family family (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $series series (optional)
     * @param  string[] $collection_status collectionStatus (optional)
     * @param  string[] $collection_interval collectionInterval (optional)
     * @param  string[] $not_synced_for_minutes notSyncedForMinutes (optional)
     * @param  string[] $error_code errorCode (optional)
     * @param  string[] $error_description errorDescription (optional)
     * @param  string[] $software_version softwareVersion (optional)
     * @param  string[] $software_type softwareType (optional)
     * @param  string[] $platform_id platformId (optional)
     * @param  string[] $role role (optional)
     * @param  string[] $reachability_status reachabilityStatus (optional)
     * @param  string[] $up_time upTime (optional)
     * @param  string[] $associated_wlc_ip associatedWlcIp (optional)
     * @param  string[] $license_name licenseName (optional)
     * @param  string[] $license_type licenseType (optional)
     * @param  string[] $license_status licenseStatus (optional)
     * @param  string[] $modulename moduleName (optional)
     * @param  string[] $moduleequpimenttype moduleEqupimentType (optional)
     * @param  string[] $moduleservicestate moduleServiceState (optional)
     * @param  string[] $modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param  string[] $modulepartnumber modulePartNumber (optional)
     * @param  string[] $moduleoperationstatecode moduleOperationStateCode (optional)
     * @param  string $id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult
     */
    public function getNetworkDevice($hostname = null, $management_ip_address = null, $mac_address = null, $location_name = null, $serial_number = null, $location = null, $family = null, $type = null, $series = null, $collection_status = null, $collection_interval = null, $not_synced_for_minutes = null, $error_code = null, $error_description = null, $software_version = null, $software_type = null, $platform_id = null, $role = null, $reachability_status = null, $up_time = null, $associated_wlc_ip = null, $license_name = null, $license_type = null, $license_status = null, $modulename = null, $moduleequpimenttype = null, $moduleservicestate = null, $modulevendorequipmenttype = null, $modulepartnumber = null, $moduleoperationstatecode = null, $id = null)
    {
        list($response) = $this->getNetworkDeviceWithHttpInfo($hostname, $management_ip_address, $mac_address, $location_name, $serial_number, $location, $family, $type, $series, $collection_status, $collection_interval, $not_synced_for_minutes, $error_code, $error_description, $software_version, $software_type, $platform_id, $role, $reachability_status, $up_time, $associated_wlc_ip, $license_name, $license_type, $license_status, $modulename, $moduleequpimenttype, $moduleservicestate, $modulevendorequipmenttype, $modulepartnumber, $moduleoperationstatecode, $id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceWithHttpInfo
     *
     * Retrieves all network devices
     *
     * @param  string[] $hostname hostname (optional)
     * @param  string[] $management_ip_address managementIpAddress (optional)
     * @param  string[] $mac_address macAddress (optional)
     * @param  string[] $location_name locationName (optional)
     * @param  string[] $serial_number serialNumber (optional)
     * @param  string[] $location location (optional)
     * @param  string[] $family family (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $series series (optional)
     * @param  string[] $collection_status collectionStatus (optional)
     * @param  string[] $collection_interval collectionInterval (optional)
     * @param  string[] $not_synced_for_minutes notSyncedForMinutes (optional)
     * @param  string[] $error_code errorCode (optional)
     * @param  string[] $error_description errorDescription (optional)
     * @param  string[] $software_version softwareVersion (optional)
     * @param  string[] $software_type softwareType (optional)
     * @param  string[] $platform_id platformId (optional)
     * @param  string[] $role role (optional)
     * @param  string[] $reachability_status reachabilityStatus (optional)
     * @param  string[] $up_time upTime (optional)
     * @param  string[] $associated_wlc_ip associatedWlcIp (optional)
     * @param  string[] $license_name licenseName (optional)
     * @param  string[] $license_type licenseType (optional)
     * @param  string[] $license_status licenseStatus (optional)
     * @param  string[] $modulename moduleName (optional)
     * @param  string[] $moduleequpimenttype moduleEqupimentType (optional)
     * @param  string[] $moduleservicestate moduleServiceState (optional)
     * @param  string[] $modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param  string[] $modulepartnumber modulePartNumber (optional)
     * @param  string[] $moduleoperationstatecode moduleOperationStateCode (optional)
     * @param  string $id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceWithHttpInfo($hostname = null, $management_ip_address = null, $mac_address = null, $location_name = null, $serial_number = null, $location = null, $family = null, $type = null, $series = null, $collection_status = null, $collection_interval = null, $not_synced_for_minutes = null, $error_code = null, $error_description = null, $software_version = null, $software_type = null, $platform_id = null, $role = null, $reachability_status = null, $up_time = null, $associated_wlc_ip = null, $license_name = null, $license_type = null, $license_status = null, $modulename = null, $moduleequpimenttype = null, $moduleservicestate = null, $modulevendorequipmenttype = null, $modulepartnumber = null, $moduleoperationstatecode = null, $id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult';
        $request = $this->getNetworkDeviceRequest($hostname, $management_ip_address, $mac_address, $location_name, $serial_number, $location, $family, $type, $series, $collection_status, $collection_interval, $not_synced_for_minutes, $error_code, $error_description, $software_version, $software_type, $platform_id, $role, $reachability_status, $up_time, $associated_wlc_ip, $license_name, $license_type, $license_status, $modulename, $moduleequpimenttype, $moduleservicestate, $modulevendorequipmenttype, $modulepartnumber, $moduleoperationstatecode, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceAsync
     *
     * Retrieves all network devices
     *
     * @param  string[] $hostname hostname (optional)
     * @param  string[] $management_ip_address managementIpAddress (optional)
     * @param  string[] $mac_address macAddress (optional)
     * @param  string[] $location_name locationName (optional)
     * @param  string[] $serial_number serialNumber (optional)
     * @param  string[] $location location (optional)
     * @param  string[] $family family (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $series series (optional)
     * @param  string[] $collection_status collectionStatus (optional)
     * @param  string[] $collection_interval collectionInterval (optional)
     * @param  string[] $not_synced_for_minutes notSyncedForMinutes (optional)
     * @param  string[] $error_code errorCode (optional)
     * @param  string[] $error_description errorDescription (optional)
     * @param  string[] $software_version softwareVersion (optional)
     * @param  string[] $software_type softwareType (optional)
     * @param  string[] $platform_id platformId (optional)
     * @param  string[] $role role (optional)
     * @param  string[] $reachability_status reachabilityStatus (optional)
     * @param  string[] $up_time upTime (optional)
     * @param  string[] $associated_wlc_ip associatedWlcIp (optional)
     * @param  string[] $license_name licenseName (optional)
     * @param  string[] $license_type licenseType (optional)
     * @param  string[] $license_status licenseStatus (optional)
     * @param  string[] $modulename moduleName (optional)
     * @param  string[] $moduleequpimenttype moduleEqupimentType (optional)
     * @param  string[] $moduleservicestate moduleServiceState (optional)
     * @param  string[] $modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param  string[] $modulepartnumber modulePartNumber (optional)
     * @param  string[] $moduleoperationstatecode moduleOperationStateCode (optional)
     * @param  string $id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceAsync($hostname = null, $management_ip_address = null, $mac_address = null, $location_name = null, $serial_number = null, $location = null, $family = null, $type = null, $series = null, $collection_status = null, $collection_interval = null, $not_synced_for_minutes = null, $error_code = null, $error_description = null, $software_version = null, $software_type = null, $platform_id = null, $role = null, $reachability_status = null, $up_time = null, $associated_wlc_ip = null, $license_name = null, $license_type = null, $license_status = null, $modulename = null, $moduleequpimenttype = null, $moduleservicestate = null, $modulevendorequipmenttype = null, $modulepartnumber = null, $moduleoperationstatecode = null, $id = null)
    {
        return $this->getNetworkDeviceAsyncWithHttpInfo($hostname, $management_ip_address, $mac_address, $location_name, $serial_number, $location, $family, $type, $series, $collection_status, $collection_interval, $not_synced_for_minutes, $error_code, $error_description, $software_version, $software_type, $platform_id, $role, $reachability_status, $up_time, $associated_wlc_ip, $license_name, $license_type, $license_status, $modulename, $moduleequpimenttype, $moduleservicestate, $modulevendorequipmenttype, $modulepartnumber, $moduleoperationstatecode, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceAsyncWithHttpInfo
     *
     * Retrieves all network devices
     *
     * @param  string[] $hostname hostname (optional)
     * @param  string[] $management_ip_address managementIpAddress (optional)
     * @param  string[] $mac_address macAddress (optional)
     * @param  string[] $location_name locationName (optional)
     * @param  string[] $serial_number serialNumber (optional)
     * @param  string[] $location location (optional)
     * @param  string[] $family family (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $series series (optional)
     * @param  string[] $collection_status collectionStatus (optional)
     * @param  string[] $collection_interval collectionInterval (optional)
     * @param  string[] $not_synced_for_minutes notSyncedForMinutes (optional)
     * @param  string[] $error_code errorCode (optional)
     * @param  string[] $error_description errorDescription (optional)
     * @param  string[] $software_version softwareVersion (optional)
     * @param  string[] $software_type softwareType (optional)
     * @param  string[] $platform_id platformId (optional)
     * @param  string[] $role role (optional)
     * @param  string[] $reachability_status reachabilityStatus (optional)
     * @param  string[] $up_time upTime (optional)
     * @param  string[] $associated_wlc_ip associatedWlcIp (optional)
     * @param  string[] $license_name licenseName (optional)
     * @param  string[] $license_type licenseType (optional)
     * @param  string[] $license_status licenseStatus (optional)
     * @param  string[] $modulename moduleName (optional)
     * @param  string[] $moduleequpimenttype moduleEqupimentType (optional)
     * @param  string[] $moduleservicestate moduleServiceState (optional)
     * @param  string[] $modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param  string[] $modulepartnumber modulePartNumber (optional)
     * @param  string[] $moduleoperationstatecode moduleOperationStateCode (optional)
     * @param  string $id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceAsyncWithHttpInfo($hostname = null, $management_ip_address = null, $mac_address = null, $location_name = null, $serial_number = null, $location = null, $family = null, $type = null, $series = null, $collection_status = null, $collection_interval = null, $not_synced_for_minutes = null, $error_code = null, $error_description = null, $software_version = null, $software_type = null, $platform_id = null, $role = null, $reachability_status = null, $up_time = null, $associated_wlc_ip = null, $license_name = null, $license_type = null, $license_status = null, $modulename = null, $moduleequpimenttype = null, $moduleservicestate = null, $modulevendorequipmenttype = null, $modulepartnumber = null, $moduleoperationstatecode = null, $id = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult';
        $request = $this->getNetworkDeviceRequest($hostname, $management_ip_address, $mac_address, $location_name, $serial_number, $location, $family, $type, $series, $collection_status, $collection_interval, $not_synced_for_minutes, $error_code, $error_description, $software_version, $software_type, $platform_id, $role, $reachability_status, $up_time, $associated_wlc_ip, $license_name, $license_type, $license_status, $modulename, $moduleequpimenttype, $moduleservicestate, $modulevendorequipmenttype, $modulepartnumber, $moduleoperationstatecode, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDevice'
     *
     * @param  string[] $hostname hostname (optional)
     * @param  string[] $management_ip_address managementIpAddress (optional)
     * @param  string[] $mac_address macAddress (optional)
     * @param  string[] $location_name locationName (optional)
     * @param  string[] $serial_number serialNumber (optional)
     * @param  string[] $location location (optional)
     * @param  string[] $family family (optional)
     * @param  string[] $type type (optional)
     * @param  string[] $series series (optional)
     * @param  string[] $collection_status collectionStatus (optional)
     * @param  string[] $collection_interval collectionInterval (optional)
     * @param  string[] $not_synced_for_minutes notSyncedForMinutes (optional)
     * @param  string[] $error_code errorCode (optional)
     * @param  string[] $error_description errorDescription (optional)
     * @param  string[] $software_version softwareVersion (optional)
     * @param  string[] $software_type softwareType (optional)
     * @param  string[] $platform_id platformId (optional)
     * @param  string[] $role role (optional)
     * @param  string[] $reachability_status reachabilityStatus (optional)
     * @param  string[] $up_time upTime (optional)
     * @param  string[] $associated_wlc_ip associatedWlcIp (optional)
     * @param  string[] $license_name licenseName (optional)
     * @param  string[] $license_type licenseType (optional)
     * @param  string[] $license_status licenseStatus (optional)
     * @param  string[] $modulename moduleName (optional)
     * @param  string[] $moduleequpimenttype moduleEqupimentType (optional)
     * @param  string[] $moduleservicestate moduleServiceState (optional)
     * @param  string[] $modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param  string[] $modulepartnumber modulePartNumber (optional)
     * @param  string[] $moduleoperationstatecode moduleOperationStateCode (optional)
     * @param  string $id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceRequest($hostname = null, $management_ip_address = null, $mac_address = null, $location_name = null, $serial_number = null, $location = null, $family = null, $type = null, $series = null, $collection_status = null, $collection_interval = null, $not_synced_for_minutes = null, $error_code = null, $error_description = null, $software_version = null, $software_type = null, $platform_id = null, $role = null, $reachability_status = null, $up_time = null, $associated_wlc_ip = null, $license_name = null, $license_type = null, $license_status = null, $modulename = null, $moduleequpimenttype = null, $moduleservicestate = null, $modulevendorequipmenttype = null, $modulepartnumber = null, $moduleoperationstatecode = null, $id = null)
    {

        $resourcePath = '/api/v1/network-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($hostname)) {
            $hostname = ObjectSerializer::serializeCollection($hostname, 'csv', true);
        }
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname);
        }
        // query params
        if (is_array($management_ip_address)) {
            $management_ip_address = ObjectSerializer::serializeCollection($management_ip_address, 'csv', true);
        }
        if ($management_ip_address !== null) {
            $queryParams['managementIpAddress'] = ObjectSerializer::toQueryValue($management_ip_address);
        }
        // query params
        if (is_array($mac_address)) {
            $mac_address = ObjectSerializer::serializeCollection($mac_address, 'csv', true);
        }
        if ($mac_address !== null) {
            $queryParams['macAddress'] = ObjectSerializer::toQueryValue($mac_address);
        }
        // query params
        if (is_array($location_name)) {
            $location_name = ObjectSerializer::serializeCollection($location_name, 'csv', true);
        }
        if ($location_name !== null) {
            $queryParams['locationName'] = ObjectSerializer::toQueryValue($location_name);
        }
        // query params
        if (is_array($serial_number)) {
            $serial_number = ObjectSerializer::serializeCollection($serial_number, 'csv', true);
        }
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if (is_array($location)) {
            $location = ObjectSerializer::serializeCollection($location, 'csv', true);
        }
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if (is_array($family)) {
            $family = ObjectSerializer::serializeCollection($family, 'csv', true);
        }
        if ($family !== null) {
            $queryParams['family'] = ObjectSerializer::toQueryValue($family);
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, 'csv', true);
        }
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if (is_array($series)) {
            $series = ObjectSerializer::serializeCollection($series, 'csv', true);
        }
        if ($series !== null) {
            $queryParams['series'] = ObjectSerializer::toQueryValue($series);
        }
        // query params
        if (is_array($collection_status)) {
            $collection_status = ObjectSerializer::serializeCollection($collection_status, 'csv', true);
        }
        if ($collection_status !== null) {
            $queryParams['collectionStatus'] = ObjectSerializer::toQueryValue($collection_status);
        }
        // query params
        if (is_array($collection_interval)) {
            $collection_interval = ObjectSerializer::serializeCollection($collection_interval, 'csv', true);
        }
        if ($collection_interval !== null) {
            $queryParams['collectionInterval'] = ObjectSerializer::toQueryValue($collection_interval);
        }
        // query params
        if (is_array($not_synced_for_minutes)) {
            $not_synced_for_minutes = ObjectSerializer::serializeCollection($not_synced_for_minutes, 'csv', true);
        }
        if ($not_synced_for_minutes !== null) {
            $queryParams['notSyncedForMinutes'] = ObjectSerializer::toQueryValue($not_synced_for_minutes);
        }
        // query params
        if (is_array($error_code)) {
            $error_code = ObjectSerializer::serializeCollection($error_code, 'csv', true);
        }
        if ($error_code !== null) {
            $queryParams['errorCode'] = ObjectSerializer::toQueryValue($error_code);
        }
        // query params
        if (is_array($error_description)) {
            $error_description = ObjectSerializer::serializeCollection($error_description, 'csv', true);
        }
        if ($error_description !== null) {
            $queryParams['errorDescription'] = ObjectSerializer::toQueryValue($error_description);
        }
        // query params
        if (is_array($software_version)) {
            $software_version = ObjectSerializer::serializeCollection($software_version, 'csv', true);
        }
        if ($software_version !== null) {
            $queryParams['softwareVersion'] = ObjectSerializer::toQueryValue($software_version);
        }
        // query params
        if (is_array($software_type)) {
            $software_type = ObjectSerializer::serializeCollection($software_type, 'csv', true);
        }
        if ($software_type !== null) {
            $queryParams['softwareType'] = ObjectSerializer::toQueryValue($software_type);
        }
        // query params
        if (is_array($platform_id)) {
            $platform_id = ObjectSerializer::serializeCollection($platform_id, 'csv', true);
        }
        if ($platform_id !== null) {
            $queryParams['platformId'] = ObjectSerializer::toQueryValue($platform_id);
        }
        // query params
        if (is_array($role)) {
            $role = ObjectSerializer::serializeCollection($role, 'csv', true);
        }
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if (is_array($reachability_status)) {
            $reachability_status = ObjectSerializer::serializeCollection($reachability_status, 'csv', true);
        }
        if ($reachability_status !== null) {
            $queryParams['reachabilityStatus'] = ObjectSerializer::toQueryValue($reachability_status);
        }
        // query params
        if (is_array($up_time)) {
            $up_time = ObjectSerializer::serializeCollection($up_time, 'csv', true);
        }
        if ($up_time !== null) {
            $queryParams['upTime'] = ObjectSerializer::toQueryValue($up_time);
        }
        // query params
        if (is_array($associated_wlc_ip)) {
            $associated_wlc_ip = ObjectSerializer::serializeCollection($associated_wlc_ip, 'csv', true);
        }
        if ($associated_wlc_ip !== null) {
            $queryParams['associatedWlcIp'] = ObjectSerializer::toQueryValue($associated_wlc_ip);
        }
        // query params
        if (is_array($license_name)) {
            $license_name = ObjectSerializer::serializeCollection($license_name, 'csv', true);
        }
        if ($license_name !== null) {
            $queryParams['license.name'] = ObjectSerializer::toQueryValue($license_name);
        }
        // query params
        if (is_array($license_type)) {
            $license_type = ObjectSerializer::serializeCollection($license_type, 'csv', true);
        }
        if ($license_type !== null) {
            $queryParams['license.type'] = ObjectSerializer::toQueryValue($license_type);
        }
        // query params
        if (is_array($license_status)) {
            $license_status = ObjectSerializer::serializeCollection($license_status, 'csv', true);
        }
        if ($license_status !== null) {
            $queryParams['license.status'] = ObjectSerializer::toQueryValue($license_status);
        }
        // query params
        if (is_array($modulename)) {
            $modulename = ObjectSerializer::serializeCollection($modulename, 'csv', true);
        }
        if ($modulename !== null) {
            $queryParams['module+name'] = ObjectSerializer::toQueryValue($modulename);
        }
        // query params
        if (is_array($moduleequpimenttype)) {
            $moduleequpimenttype = ObjectSerializer::serializeCollection($moduleequpimenttype, 'csv', true);
        }
        if ($moduleequpimenttype !== null) {
            $queryParams['module+equpimenttype'] = ObjectSerializer::toQueryValue($moduleequpimenttype);
        }
        // query params
        if (is_array($moduleservicestate)) {
            $moduleservicestate = ObjectSerializer::serializeCollection($moduleservicestate, 'csv', true);
        }
        if ($moduleservicestate !== null) {
            $queryParams['module+servicestate'] = ObjectSerializer::toQueryValue($moduleservicestate);
        }
        // query params
        if (is_array($modulevendorequipmenttype)) {
            $modulevendorequipmenttype = ObjectSerializer::serializeCollection($modulevendorequipmenttype, 'csv', true);
        }
        if ($modulevendorequipmenttype !== null) {
            $queryParams['module+vendorequipmenttype'] = ObjectSerializer::toQueryValue($modulevendorequipmenttype);
        }
        // query params
        if (is_array($modulepartnumber)) {
            $modulepartnumber = ObjectSerializer::serializeCollection($modulepartnumber, 'csv', true);
        }
        if ($modulepartnumber !== null) {
            $queryParams['module+partnumber'] = ObjectSerializer::toQueryValue($modulepartnumber);
        }
        // query params
        if (is_array($moduleoperationstatecode)) {
            $moduleoperationstatecode = ObjectSerializer::serializeCollection($moduleoperationstatecode, 'csv', true);
        }
        if ($moduleoperationstatecode !== null) {
            $queryParams['module+operationstatecode'] = ObjectSerializer::toQueryValue($moduleoperationstatecode);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceAutocomplete
     *
     * Retrieves all network devices
     *
     * @param  string $vrf_name vrfName (optional)
     * @param  string $management_ip_address managementIpAddress (optional)
     * @param  string $hostname hostname (optional)
     * @param  string $mac_address macAddress (optional)
     * @param  string $family family (optional)
     * @param  string $collection_status collectionStatus (optional)
     * @param  string $collection_interval collectionInterval (optional)
     * @param  string $software_version softwareVersion (optional)
     * @param  string $software_type softwareType (optional)
     * @param  string $reachability_status reachabilityStatus (optional)
     * @param  string $reachability_failure_reason reachabilityFailureReason (optional)
     * @param  string $error_code errorCode (optional)
     * @param  string $platform_id platformId (optional)
     * @param  string $series series (optional)
     * @param  string $type type (optional)
     * @param  string $serial_number serialNumber (optional)
     * @param  string $up_time upTime (optional)
     * @param  string $role role (optional)
     * @param  string $role_source roleSource (optional)
     * @param  string $associated_wlc_ip associatedWlcIp (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\RetrievesAllNetworkDevicesResponse
     */
    public function getNetworkDeviceAutocomplete($vrf_name = null, $management_ip_address = null, $hostname = null, $mac_address = null, $family = null, $collection_status = null, $collection_interval = null, $software_version = null, $software_type = null, $reachability_status = null, $reachability_failure_reason = null, $error_code = null, $platform_id = null, $series = null, $type = null, $serial_number = null, $up_time = null, $role = null, $role_source = null, $associated_wlc_ip = null, $offset = null, $limit = null)
    {
        list($response) = $this->getNetworkDeviceAutocompleteWithHttpInfo($vrf_name, $management_ip_address, $hostname, $mac_address, $family, $collection_status, $collection_interval, $software_version, $software_type, $reachability_status, $reachability_failure_reason, $error_code, $platform_id, $series, $type, $serial_number, $up_time, $role, $role_source, $associated_wlc_ip, $offset, $limit);
        return $response;
    }

    /**
     * Operation getNetworkDeviceAutocompleteWithHttpInfo
     *
     * Retrieves all network devices
     *
     * @param  string $vrf_name vrfName (optional)
     * @param  string $management_ip_address managementIpAddress (optional)
     * @param  string $hostname hostname (optional)
     * @param  string $mac_address macAddress (optional)
     * @param  string $family family (optional)
     * @param  string $collection_status collectionStatus (optional)
     * @param  string $collection_interval collectionInterval (optional)
     * @param  string $software_version softwareVersion (optional)
     * @param  string $software_type softwareType (optional)
     * @param  string $reachability_status reachabilityStatus (optional)
     * @param  string $reachability_failure_reason reachabilityFailureReason (optional)
     * @param  string $error_code errorCode (optional)
     * @param  string $platform_id platformId (optional)
     * @param  string $series series (optional)
     * @param  string $type type (optional)
     * @param  string $serial_number serialNumber (optional)
     * @param  string $up_time upTime (optional)
     * @param  string $role role (optional)
     * @param  string $role_source roleSource (optional)
     * @param  string $associated_wlc_ip associatedWlcIp (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\RetrievesAllNetworkDevicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceAutocompleteWithHttpInfo($vrf_name = null, $management_ip_address = null, $hostname = null, $mac_address = null, $family = null, $collection_status = null, $collection_interval = null, $software_version = null, $software_type = null, $reachability_status = null, $reachability_failure_reason = null, $error_code = null, $platform_id = null, $series = null, $type = null, $serial_number = null, $up_time = null, $role = null, $role_source = null, $associated_wlc_ip = null, $offset = null, $limit = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RetrievesAllNetworkDevicesResponse';
        $request = $this->getNetworkDeviceAutocompleteRequest($vrf_name, $management_ip_address, $hostname, $mac_address, $family, $collection_status, $collection_interval, $software_version, $software_type, $reachability_status, $reachability_failure_reason, $error_code, $platform_id, $series, $type, $serial_number, $up_time, $role, $role_source, $associated_wlc_ip, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\RetrievesAllNetworkDevicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceAutocompleteAsync
     *
     * Retrieves all network devices
     *
     * @param  string $vrf_name vrfName (optional)
     * @param  string $management_ip_address managementIpAddress (optional)
     * @param  string $hostname hostname (optional)
     * @param  string $mac_address macAddress (optional)
     * @param  string $family family (optional)
     * @param  string $collection_status collectionStatus (optional)
     * @param  string $collection_interval collectionInterval (optional)
     * @param  string $software_version softwareVersion (optional)
     * @param  string $software_type softwareType (optional)
     * @param  string $reachability_status reachabilityStatus (optional)
     * @param  string $reachability_failure_reason reachabilityFailureReason (optional)
     * @param  string $error_code errorCode (optional)
     * @param  string $platform_id platformId (optional)
     * @param  string $series series (optional)
     * @param  string $type type (optional)
     * @param  string $serial_number serialNumber (optional)
     * @param  string $up_time upTime (optional)
     * @param  string $role role (optional)
     * @param  string $role_source roleSource (optional)
     * @param  string $associated_wlc_ip associatedWlcIp (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceAutocompleteAsync($vrf_name = null, $management_ip_address = null, $hostname = null, $mac_address = null, $family = null, $collection_status = null, $collection_interval = null, $software_version = null, $software_type = null, $reachability_status = null, $reachability_failure_reason = null, $error_code = null, $platform_id = null, $series = null, $type = null, $serial_number = null, $up_time = null, $role = null, $role_source = null, $associated_wlc_ip = null, $offset = null, $limit = null)
    {
        return $this->getNetworkDeviceAutocompleteAsyncWithHttpInfo($vrf_name, $management_ip_address, $hostname, $mac_address, $family, $collection_status, $collection_interval, $software_version, $software_type, $reachability_status, $reachability_failure_reason, $error_code, $platform_id, $series, $type, $serial_number, $up_time, $role, $role_source, $associated_wlc_ip, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceAutocompleteAsyncWithHttpInfo
     *
     * Retrieves all network devices
     *
     * @param  string $vrf_name vrfName (optional)
     * @param  string $management_ip_address managementIpAddress (optional)
     * @param  string $hostname hostname (optional)
     * @param  string $mac_address macAddress (optional)
     * @param  string $family family (optional)
     * @param  string $collection_status collectionStatus (optional)
     * @param  string $collection_interval collectionInterval (optional)
     * @param  string $software_version softwareVersion (optional)
     * @param  string $software_type softwareType (optional)
     * @param  string $reachability_status reachabilityStatus (optional)
     * @param  string $reachability_failure_reason reachabilityFailureReason (optional)
     * @param  string $error_code errorCode (optional)
     * @param  string $platform_id platformId (optional)
     * @param  string $series series (optional)
     * @param  string $type type (optional)
     * @param  string $serial_number serialNumber (optional)
     * @param  string $up_time upTime (optional)
     * @param  string $role role (optional)
     * @param  string $role_source roleSource (optional)
     * @param  string $associated_wlc_ip associatedWlcIp (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceAutocompleteAsyncWithHttpInfo($vrf_name = null, $management_ip_address = null, $hostname = null, $mac_address = null, $family = null, $collection_status = null, $collection_interval = null, $software_version = null, $software_type = null, $reachability_status = null, $reachability_failure_reason = null, $error_code = null, $platform_id = null, $series = null, $type = null, $serial_number = null, $up_time = null, $role = null, $role_source = null, $associated_wlc_ip = null, $offset = null, $limit = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RetrievesAllNetworkDevicesResponse';
        $request = $this->getNetworkDeviceAutocompleteRequest($vrf_name, $management_ip_address, $hostname, $mac_address, $family, $collection_status, $collection_interval, $software_version, $software_type, $reachability_status, $reachability_failure_reason, $error_code, $platform_id, $series, $type, $serial_number, $up_time, $role, $role_source, $associated_wlc_ip, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceAutocomplete'
     *
     * @param  string $vrf_name vrfName (optional)
     * @param  string $management_ip_address managementIpAddress (optional)
     * @param  string $hostname hostname (optional)
     * @param  string $mac_address macAddress (optional)
     * @param  string $family family (optional)
     * @param  string $collection_status collectionStatus (optional)
     * @param  string $collection_interval collectionInterval (optional)
     * @param  string $software_version softwareVersion (optional)
     * @param  string $software_type softwareType (optional)
     * @param  string $reachability_status reachabilityStatus (optional)
     * @param  string $reachability_failure_reason reachabilityFailureReason (optional)
     * @param  string $error_code errorCode (optional)
     * @param  string $platform_id platformId (optional)
     * @param  string $series series (optional)
     * @param  string $type type (optional)
     * @param  string $serial_number serialNumber (optional)
     * @param  string $up_time upTime (optional)
     * @param  string $role role (optional)
     * @param  string $role_source roleSource (optional)
     * @param  string $associated_wlc_ip associatedWlcIp (optional)
     * @param  string $offset offset (optional)
     * @param  string $limit limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceAutocompleteRequest($vrf_name = null, $management_ip_address = null, $hostname = null, $mac_address = null, $family = null, $collection_status = null, $collection_interval = null, $software_version = null, $software_type = null, $reachability_status = null, $reachability_failure_reason = null, $error_code = null, $platform_id = null, $series = null, $type = null, $serial_number = null, $up_time = null, $role = null, $role_source = null, $associated_wlc_ip = null, $offset = null, $limit = null)
    {

        $resourcePath = '/api/v1/network-device/autocomplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vrf_name !== null) {
            $queryParams['vrfName'] = ObjectSerializer::toQueryValue($vrf_name);
        }
        // query params
        if ($management_ip_address !== null) {
            $queryParams['managementIpAddress'] = ObjectSerializer::toQueryValue($management_ip_address);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname);
        }
        // query params
        if ($mac_address !== null) {
            $queryParams['macAddress'] = ObjectSerializer::toQueryValue($mac_address);
        }
        // query params
        if ($family !== null) {
            $queryParams['family'] = ObjectSerializer::toQueryValue($family);
        }
        // query params
        if ($collection_status !== null) {
            $queryParams['collectionStatus'] = ObjectSerializer::toQueryValue($collection_status);
        }
        // query params
        if ($collection_interval !== null) {
            $queryParams['collectionInterval'] = ObjectSerializer::toQueryValue($collection_interval);
        }
        // query params
        if ($software_version !== null) {
            $queryParams['softwareVersion'] = ObjectSerializer::toQueryValue($software_version);
        }
        // query params
        if ($software_type !== null) {
            $queryParams['softwareType'] = ObjectSerializer::toQueryValue($software_type);
        }
        // query params
        if ($reachability_status !== null) {
            $queryParams['reachabilityStatus'] = ObjectSerializer::toQueryValue($reachability_status);
        }
        // query params
        if ($reachability_failure_reason !== null) {
            $queryParams['reachabilityFailureReason'] = ObjectSerializer::toQueryValue($reachability_failure_reason);
        }
        // query params
        if ($error_code !== null) {
            $queryParams['errorCode'] = ObjectSerializer::toQueryValue($error_code);
        }
        // query params
        if ($platform_id !== null) {
            $queryParams['platformId'] = ObjectSerializer::toQueryValue($platform_id);
        }
        // query params
        if ($series !== null) {
            $queryParams['series'] = ObjectSerializer::toQueryValue($series);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if ($up_time !== null) {
            $queryParams['upTime'] = ObjectSerializer::toQueryValue($up_time);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($role_source !== null) {
            $queryParams['roleSource'] = ObjectSerializer::toQueryValue($role_source);
        }
        // query params
        if ($associated_wlc_ip !== null) {
            $queryParams['associatedWlcIp'] = ObjectSerializer::toQueryValue($associated_wlc_ip);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceBriefById
     *
     * Retrieves network device brief by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIOResult
     */
    public function getNetworkDeviceBriefById($id)
    {
        list($response) = $this->getNetworkDeviceBriefByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceBriefByIdWithHttpInfo
     *
     * Retrieves network device brief by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIOResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceBriefByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIOResult';
        $request = $this->getNetworkDeviceBriefByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIOResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceBriefByIdAsync
     *
     * Retrieves network device brief by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceBriefByIdAsync($id)
    {
        return $this->getNetworkDeviceBriefByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceBriefByIdAsyncWithHttpInfo
     *
     * Retrieves network device brief by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceBriefByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIOResult';
        $request = $this->getNetworkDeviceBriefByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceBriefById'
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceBriefByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceBriefById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}/brief';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceById
     *
     * Retrieves network device by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult
     */
    public function getNetworkDeviceById($id)
    {
        list($response) = $this->getNetworkDeviceByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceByIdWithHttpInfo
     *
     * Retrieves network device by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceByIdAsync
     *
     * Retrieves network device by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceByIdAsync($id)
    {
        return $this->getNetworkDeviceByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceByIdAsyncWithHttpInfo
     *
     * Retrieves network device by ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceById'
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleById
     *
     * Retrieves the collection interval specified by device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getNetworkDeviceCollectionScheduleById($id)
    {
        list($response) = $this->getNetworkDeviceCollectionScheduleByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleByIdWithHttpInfo
     *
     * Retrieves the collection interval specified by device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceCollectionScheduleByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCollectionScheduleByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleByIdAsync
     *
     * Retrieves the collection interval specified by device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCollectionScheduleByIdAsync($id)
    {
        return $this->getNetworkDeviceCollectionScheduleByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleByIdAsyncWithHttpInfo
     *
     * Retrieves the collection interval specified by device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCollectionScheduleByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCollectionScheduleByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceCollectionScheduleById'
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceCollectionScheduleByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceCollectionScheduleById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}/collection-schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleGlobal
     *
     * Retrieves the collection interval of all devices
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getNetworkDeviceCollectionScheduleGlobal()
    {
        list($response) = $this->getNetworkDeviceCollectionScheduleGlobalWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleGlobalWithHttpInfo
     *
     * Retrieves the collection interval of all devices
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceCollectionScheduleGlobalWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCollectionScheduleGlobalRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleGlobalAsync
     *
     * Retrieves the collection interval of all devices
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCollectionScheduleGlobalAsync()
    {
        return $this->getNetworkDeviceCollectionScheduleGlobalAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceCollectionScheduleGlobalAsyncWithHttpInfo
     *
     * Retrieves the collection interval of all devices
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCollectionScheduleGlobalAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCollectionScheduleGlobalRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceCollectionScheduleGlobal'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceCollectionScheduleGlobalRequest()
    {

        $resourcePath = '/api/v1/network-device/collection-schedule/global';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceConfig
     *
     * Retrieves device config list
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\RawCliInfoNIOListResult
     */
    public function getNetworkDeviceConfig()
    {
        list($response) = $this->getNetworkDeviceConfigWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNetworkDeviceConfigWithHttpInfo
     *
     * Retrieves device config list
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\RawCliInfoNIOListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceConfigWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RawCliInfoNIOListResult';
        $request = $this->getNetworkDeviceConfigRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\RawCliInfoNIOListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceConfigAsync
     *
     * Retrieves device config list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigAsync()
    {
        return $this->getNetworkDeviceConfigAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceConfigAsyncWithHttpInfo
     *
     * Retrieves device config list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RawCliInfoNIOListResult';
        $request = $this->getNetworkDeviceConfigRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceConfig'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceConfigRequest()
    {

        $resourcePath = '/api/v1/network-device/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceConfigByNetworkDeviceId
     *
     * Retrieves device config
     *
     * @param  string $network_device_id networkDeviceId (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SuccessResult
     */
    public function getNetworkDeviceConfigByNetworkDeviceId($network_device_id)
    {
        list($response) = $this->getNetworkDeviceConfigByNetworkDeviceIdWithHttpInfo($network_device_id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceConfigByNetworkDeviceIdWithHttpInfo
     *
     * Retrieves device config
     *
     * @param  string $network_device_id networkDeviceId (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceConfigByNetworkDeviceIdWithHttpInfo($network_device_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResult';
        $request = $this->getNetworkDeviceConfigByNetworkDeviceIdRequest($network_device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SuccessResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceConfigByNetworkDeviceIdAsync
     *
     * Retrieves device config
     *
     * @param  string $network_device_id networkDeviceId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigByNetworkDeviceIdAsync($network_device_id)
    {
        return $this->getNetworkDeviceConfigByNetworkDeviceIdAsyncWithHttpInfo($network_device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceConfigByNetworkDeviceIdAsyncWithHttpInfo
     *
     * Retrieves device config
     *
     * @param  string $network_device_id networkDeviceId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigByNetworkDeviceIdAsyncWithHttpInfo($network_device_id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResult';
        $request = $this->getNetworkDeviceConfigByNetworkDeviceIdRequest($network_device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceConfigByNetworkDeviceId'
     *
     * @param  string $network_device_id networkDeviceId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceConfigByNetworkDeviceIdRequest($network_device_id)
    {
        // verify the required parameter 'network_device_id' is set
        if ($network_device_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_device_id when calling getNetworkDeviceConfigByNetworkDeviceId'
            );
        }

        $resourcePath = '/api/v1/network-device/${networkDeviceId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkDeviceId' . '}',
                ObjectSerializer::toPathValue($network_device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceConfigCount
     *
     * Retrieves config count
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getNetworkDeviceConfigCount()
    {
        list($response) = $this->getNetworkDeviceConfigCountWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNetworkDeviceConfigCountWithHttpInfo
     *
     * Retrieves config count
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceConfigCountWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceConfigCountRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceConfigCountAsync
     *
     * Retrieves config count
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigCountAsync()
    {
        return $this->getNetworkDeviceConfigCountAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceConfigCountAsyncWithHttpInfo
     *
     * Retrieves config count
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceConfigCountAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceConfigCountRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceConfigCount'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceConfigCountRequest()
    {

        $resourcePath = '/api/v1/network-device/config/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceCount
     *
     * Retrieves network device count
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getNetworkDeviceCount()
    {
        list($response) = $this->getNetworkDeviceCountWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNetworkDeviceCountWithHttpInfo
     *
     * Retrieves network device count
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceCountWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCountRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceCountAsync
     *
     * Retrieves network device count
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCountAsync()
    {
        return $this->getNetworkDeviceCountAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceCountAsyncWithHttpInfo
     *
     * Retrieves network device count
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceCountAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceCountRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceCount'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceCountRequest()
    {

        $resourcePath = '/api/v1/network-device/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceFunctionalCapability
     *
     * Retrieves all functional-capability of devices
     *
     * @param  string $device_id Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\FunctionalCapabilityListResult
     */
    public function getNetworkDeviceFunctionalCapability($device_id = null, $function_name = null)
    {
        list($response) = $this->getNetworkDeviceFunctionalCapabilityWithHttpInfo($device_id, $function_name);
        return $response;
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityWithHttpInfo
     *
     * Retrieves all functional-capability of devices
     *
     * @param  string $device_id Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\FunctionalCapabilityListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceFunctionalCapabilityWithHttpInfo($device_id = null, $function_name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityListResult';
        $request = $this->getNetworkDeviceFunctionalCapabilityRequest($device_id, $function_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityAsync
     *
     * Retrieves all functional-capability of devices
     *
     * @param  string $device_id Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCapabilityAsync($device_id = null, $function_name = null)
    {
        return $this->getNetworkDeviceFunctionalCapabilityAsyncWithHttpInfo($device_id, $function_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityAsyncWithHttpInfo
     *
     * Retrieves all functional-capability of devices
     *
     * @param  string $device_id Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCapabilityAsyncWithHttpInfo($device_id = null, $function_name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityListResult';
        $request = $this->getNetworkDeviceFunctionalCapabilityRequest($device_id, $function_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceFunctionalCapability'
     *
     * @param  string $device_id Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceFunctionalCapabilityRequest($device_id = null, $function_name = null)
    {

        $resourcePath = '/api/v1/network-device/functional-capability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($device_id !== null) {
            $queryParams['deviceId'] = ObjectSerializer::toQueryValue($device_id);
        }
        // query params
        if (is_array($function_name)) {
            $function_name = ObjectSerializer::serializeCollection($function_name, 'csv', true);
        }
        if ($function_name !== null) {
            $queryParams['functionName'] = ObjectSerializer::toQueryValue($function_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityById
     *
     * Gets the functional capability by id
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\FunctionalCapabilityResult
     */
    public function getNetworkDeviceFunctionalCapabilityById($id)
    {
        list($response) = $this->getNetworkDeviceFunctionalCapabilityByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityByIdWithHttpInfo
     *
     * Gets the functional capability by id
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\FunctionalCapabilityResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceFunctionalCapabilityByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityResult';
        $request = $this->getNetworkDeviceFunctionalCapabilityByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityByIdAsync
     *
     * Gets the functional capability by id
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCapabilityByIdAsync($id)
    {
        return $this->getNetworkDeviceFunctionalCapabilityByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceFunctionalCapabilityByIdAsyncWithHttpInfo
     *
     * Gets the functional capability by id
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCapabilityByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\FunctionalCapabilityResult';
        $request = $this->getNetworkDeviceFunctionalCapabilityByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceFunctionalCapabilityById'
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceFunctionalCapabilityByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceFunctionalCapabilityById'
            );
        }

        $resourcePath = '/api/v1/network-device/functional-capability/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceFunctionalCcapabilityAutocomplete
     *
     * Retrieve the values of given fields
     *
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SuccessResultList
     */
    public function getNetworkDeviceFunctionalCcapabilityAutocomplete($function_name = null)
    {
        list($response) = $this->getNetworkDeviceFunctionalCcapabilityAutocompleteWithHttpInfo($function_name);
        return $response;
    }

    /**
     * Operation getNetworkDeviceFunctionalCcapabilityAutocompleteWithHttpInfo
     *
     * Retrieve the values of given fields
     *
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SuccessResultList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceFunctionalCcapabilityAutocompleteWithHttpInfo($function_name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getNetworkDeviceFunctionalCcapabilityAutocompleteRequest($function_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SuccessResultList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceFunctionalCcapabilityAutocompleteAsync
     *
     * Retrieve the values of given fields
     *
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCcapabilityAutocompleteAsync($function_name = null)
    {
        return $this->getNetworkDeviceFunctionalCcapabilityAutocompleteAsyncWithHttpInfo($function_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceFunctionalCcapabilityAutocompleteAsyncWithHttpInfo
     *
     * Retrieve the values of given fields
     *
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceFunctionalCcapabilityAutocompleteAsyncWithHttpInfo($function_name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getNetworkDeviceFunctionalCcapabilityAutocompleteRequest($function_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceFunctionalCcapabilityAutocomplete'
     *
     * @param  string[] $function_name functionName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceFunctionalCcapabilityAutocompleteRequest($function_name = null)
    {

        $resourcePath = '/api/v1/network-device/functional-capability/autocomplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($function_name)) {
            $function_name = ObjectSerializer::serializeCollection($function_name, 'csv', true);
        }
        if ($function_name !== null) {
            $queryParams['functionName'] = ObjectSerializer::toQueryValue($function_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceIpAddressByIpAddress
     *
     * Retrieves network device by IP address
     *
     * @param  string $ip_address Device IP address (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult
     */
    public function getNetworkDeviceIpAddressByIpAddress($ip_address)
    {
        list($response) = $this->getNetworkDeviceIpAddressByIpAddressWithHttpInfo($ip_address);
        return $response;
    }

    /**
     * Operation getNetworkDeviceIpAddressByIpAddressWithHttpInfo
     *
     * Retrieves network device by IP address
     *
     * @param  string $ip_address Device IP address (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceIpAddressByIpAddressWithHttpInfo($ip_address)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceIpAddressByIpAddressRequest($ip_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceIpAddressByIpAddressAsync
     *
     * Retrieves network device by IP address
     *
     * @param  string $ip_address Device IP address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceIpAddressByIpAddressAsync($ip_address)
    {
        return $this->getNetworkDeviceIpAddressByIpAddressAsyncWithHttpInfo($ip_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceIpAddressByIpAddressAsyncWithHttpInfo
     *
     * Retrieves network device by IP address
     *
     * @param  string $ip_address Device IP address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceIpAddressByIpAddressAsyncWithHttpInfo($ip_address)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceIpAddressByIpAddressRequest($ip_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceIpAddressByIpAddress'
     *
     * @param  string $ip_address Device IP address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceIpAddressByIpAddressRequest($ip_address)
    {
        // verify the required parameter 'ip_address' is set
        if ($ip_address === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_address when calling getNetworkDeviceIpAddressByIpAddress'
            );
        }

        $resourcePath = '/api/v1/network-device/ip-address/${ipAddress}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ip_address !== null) {
            $resourcePath = str_replace(
                '{' . 'ipAddress' . '}',
                ObjectSerializer::toPathValue($ip_address),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceMerakiOrganizationById
     *
     * Get the organizations chosen while adding the meraki dashboard
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SuccessResultList
     */
    public function getNetworkDeviceMerakiOrganizationById($id)
    {
        list($response) = $this->getNetworkDeviceMerakiOrganizationByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceMerakiOrganizationByIdWithHttpInfo
     *
     * Get the organizations chosen while adding the meraki dashboard
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SuccessResultList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceMerakiOrganizationByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getNetworkDeviceMerakiOrganizationByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SuccessResultList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceMerakiOrganizationByIdAsync
     *
     * Get the organizations chosen while adding the meraki dashboard
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceMerakiOrganizationByIdAsync($id)
    {
        return $this->getNetworkDeviceMerakiOrganizationByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceMerakiOrganizationByIdAsyncWithHttpInfo
     *
     * Get the organizations chosen while adding the meraki dashboard
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceMerakiOrganizationByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SuccessResultList';
        $request = $this->getNetworkDeviceMerakiOrganizationByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceMerakiOrganizationById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceMerakiOrganizationByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceMerakiOrganizationById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}/meraki-organization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceModule
     *
     * Gives all the modules associated with given device id
     *
     * @param  string $device_id deviceId (required)
     * @param  string $limit limit (optional)
     * @param  string $offset offset (optional)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ModuleListResult
     */
    public function getNetworkDeviceModule($device_id, $limit = null, $offset = null, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        list($response) = $this->getNetworkDeviceModuleWithHttpInfo($device_id, $limit, $offset, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);
        return $response;
    }

    /**
     * Operation getNetworkDeviceModuleWithHttpInfo
     *
     * Gives all the modules associated with given device id
     *
     * @param  string $device_id deviceId (required)
     * @param  string $limit limit (optional)
     * @param  string $offset offset (optional)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ModuleListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceModuleWithHttpInfo($device_id, $limit = null, $offset = null, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ModuleListResult';
        $request = $this->getNetworkDeviceModuleRequest($device_id, $limit, $offset, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ModuleListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceModuleAsync
     *
     * Gives all the modules associated with given device id
     *
     * @param  string $device_id deviceId (required)
     * @param  string $limit limit (optional)
     * @param  string $offset offset (optional)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleAsync($device_id, $limit = null, $offset = null, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        return $this->getNetworkDeviceModuleAsyncWithHttpInfo($device_id, $limit, $offset, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceModuleAsyncWithHttpInfo
     *
     * Gives all the modules associated with given device id
     *
     * @param  string $device_id deviceId (required)
     * @param  string $limit limit (optional)
     * @param  string $offset offset (optional)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleAsyncWithHttpInfo($device_id, $limit = null, $offset = null, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ModuleListResult';
        $request = $this->getNetworkDeviceModuleRequest($device_id, $limit, $offset, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceModule'
     *
     * @param  string $device_id deviceId (required)
     * @param  string $limit limit (optional)
     * @param  string $offset offset (optional)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceModuleRequest($device_id, $limit = null, $offset = null, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        // verify the required parameter 'device_id' is set
        if ($device_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling getNetworkDeviceModule'
            );
        }

        $resourcePath = '/api/v1/network-device/module';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($device_id !== null) {
            $queryParams['deviceId'] = ObjectSerializer::toQueryValue($device_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($name_list)) {
            $name_list = ObjectSerializer::serializeCollection($name_list, 'csv', true);
        }
        if ($name_list !== null) {
            $queryParams['nameList'] = ObjectSerializer::toQueryValue($name_list);
        }
        // query params
        if (is_array($vendor_equipment_type_list)) {
            $vendor_equipment_type_list = ObjectSerializer::serializeCollection($vendor_equipment_type_list, 'csv', true);
        }
        if ($vendor_equipment_type_list !== null) {
            $queryParams['vendorEquipmentTypeList'] = ObjectSerializer::toQueryValue($vendor_equipment_type_list);
        }
        // query params
        if (is_array($part_number_list)) {
            $part_number_list = ObjectSerializer::serializeCollection($part_number_list, 'csv', true);
        }
        if ($part_number_list !== null) {
            $queryParams['partNumberList'] = ObjectSerializer::toQueryValue($part_number_list);
        }
        // query params
        if (is_array($operational_state_code_list)) {
            $operational_state_code_list = ObjectSerializer::serializeCollection($operational_state_code_list, 'csv', true);
        }
        if ($operational_state_code_list !== null) {
            $queryParams['operationalStateCodeList'] = ObjectSerializer::toQueryValue($operational_state_code_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceModuleById
     *
     * Gives Module info by its id
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ModuleResult
     */
    public function getNetworkDeviceModuleById($id)
    {
        list($response) = $this->getNetworkDeviceModuleByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceModuleByIdWithHttpInfo
     *
     * Gives Module info by its id
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ModuleResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceModuleByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ModuleResult';
        $request = $this->getNetworkDeviceModuleByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ModuleResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceModuleByIdAsync
     *
     * Gives Module info by its id
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleByIdAsync($id)
    {
        return $this->getNetworkDeviceModuleByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceModuleByIdAsyncWithHttpInfo
     *
     * Gives Module info by its id
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ModuleResult';
        $request = $this->getNetworkDeviceModuleByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceModuleById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceModuleByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceModuleById'
            );
        }

        $resourcePath = '/api/v1/network-device/module/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceModuleCount
     *
     * Gives total number of Modules
     *
     * @param  string $device_id deviceId (required)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CountResult
     */
    public function getNetworkDeviceModuleCount($device_id, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        list($response) = $this->getNetworkDeviceModuleCountWithHttpInfo($device_id, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);
        return $response;
    }

    /**
     * Operation getNetworkDeviceModuleCountWithHttpInfo
     *
     * Gives total number of Modules
     *
     * @param  string $device_id deviceId (required)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CountResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceModuleCountWithHttpInfo($device_id, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceModuleCountRequest($device_id, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CountResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceModuleCountAsync
     *
     * Gives total number of Modules
     *
     * @param  string $device_id deviceId (required)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleCountAsync($device_id, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        return $this->getNetworkDeviceModuleCountAsyncWithHttpInfo($device_id, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceModuleCountAsyncWithHttpInfo
     *
     * Gives total number of Modules
     *
     * @param  string $device_id deviceId (required)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceModuleCountAsyncWithHttpInfo($device_id, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CountResult';
        $request = $this->getNetworkDeviceModuleCountRequest($device_id, $name_list, $vendor_equipment_type_list, $part_number_list, $operational_state_code_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceModuleCount'
     *
     * @param  string $device_id deviceId (required)
     * @param  string[] $name_list nameList (optional)
     * @param  string[] $vendor_equipment_type_list vendorEquipmentTypeList (optional)
     * @param  string[] $part_number_list partNumberList (optional)
     * @param  string[] $operational_state_code_list operationalStateCodeList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceModuleCountRequest($device_id, $name_list = null, $vendor_equipment_type_list = null, $part_number_list = null, $operational_state_code_list = null)
    {
        // verify the required parameter 'device_id' is set
        if ($device_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling getNetworkDeviceModuleCount'
            );
        }

        $resourcePath = '/api/v1/network-device/module/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($device_id !== null) {
            $queryParams['deviceId'] = ObjectSerializer::toQueryValue($device_id);
        }
        // query params
        if (is_array($name_list)) {
            $name_list = ObjectSerializer::serializeCollection($name_list, 'csv', true);
        }
        if ($name_list !== null) {
            $queryParams['nameList'] = ObjectSerializer::toQueryValue($name_list);
        }
        // query params
        if (is_array($vendor_equipment_type_list)) {
            $vendor_equipment_type_list = ObjectSerializer::serializeCollection($vendor_equipment_type_list, 'csv', true);
        }
        if ($vendor_equipment_type_list !== null) {
            $queryParams['vendorEquipmentTypeList'] = ObjectSerializer::toQueryValue($vendor_equipment_type_list);
        }
        // query params
        if (is_array($part_number_list)) {
            $part_number_list = ObjectSerializer::serializeCollection($part_number_list, 'csv', true);
        }
        if ($part_number_list !== null) {
            $queryParams['partNumberList'] = ObjectSerializer::toQueryValue($part_number_list);
        }
        // query params
        if (is_array($operational_state_code_list)) {
            $operational_state_code_list = ObjectSerializer::serializeCollection($operational_state_code_list, 'csv', true);
        }
        if ($operational_state_code_list !== null) {
            $queryParams['operationalStateCodeList'] = ObjectSerializer::toQueryValue($operational_state_code_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDevicePollerCliLegitReads
     *
     * Get all keywords of CLIs accepted by command runner
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\LegitCliKeyResult
     */
    public function getNetworkDevicePollerCliLegitReads()
    {
        list($response) = $this->getNetworkDevicePollerCliLegitReadsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNetworkDevicePollerCliLegitReadsWithHttpInfo
     *
     * Get all keywords of CLIs accepted by command runner
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\LegitCliKeyResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDevicePollerCliLegitReadsWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\LegitCliKeyResult';
        $request = $this->getNetworkDevicePollerCliLegitReadsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\LegitCliKeyResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDevicePollerCliLegitReadsAsync
     *
     * Get all keywords of CLIs accepted by command runner
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDevicePollerCliLegitReadsAsync()
    {
        return $this->getNetworkDevicePollerCliLegitReadsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDevicePollerCliLegitReadsAsyncWithHttpInfo
     *
     * Get all keywords of CLIs accepted by command runner
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDevicePollerCliLegitReadsAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\LegitCliKeyResult';
        $request = $this->getNetworkDevicePollerCliLegitReadsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDevicePollerCliLegitReads'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDevicePollerCliLegitReadsRequest()
    {

        $resourcePath = '/api/v1/network-device-poller/cli/legit-reads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceRange
     *
     * Retrieves network device by range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult
     */
    public function getNetworkDeviceRange($start_index, $records_to_return)
    {
        list($response) = $this->getNetworkDeviceRangeWithHttpInfo($start_index, $records_to_return);
        return $response;
    }

    /**
     * Operation getNetworkDeviceRangeWithHttpInfo
     *
     * Retrieves network device by range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceRangeWithHttpInfo($start_index, $records_to_return)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult';
        $request = $this->getNetworkDeviceRangeRequest($start_index, $records_to_return);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceRangeAsync
     *
     * Retrieves network device by range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceRangeAsync($start_index, $records_to_return)
    {
        return $this->getNetworkDeviceRangeAsyncWithHttpInfo($start_index, $records_to_return)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceRangeAsyncWithHttpInfo
     *
     * Retrieves network device by range
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceRangeAsyncWithHttpInfo($start_index, $records_to_return)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceListResult';
        $request = $this->getNetworkDeviceRangeRequest($start_index, $records_to_return);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceRange'
     *
     * @param  int $start_index Start index (required)
     * @param  int $records_to_return Number of records to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceRangeRequest($start_index, $records_to_return)
    {
        // verify the required parameter 'start_index' is set
        if ($start_index === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_index when calling getNetworkDeviceRange'
            );
        }
        // verify the required parameter 'records_to_return' is set
        if ($records_to_return === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records_to_return when calling getNetworkDeviceRange'
            );
        }

        $resourcePath = '/api/v1/network-device/${startIndex}/${recordsToReturn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($start_index !== null) {
            $resourcePath = str_replace(
                '{' . 'startIndex' . '}',
                ObjectSerializer::toPathValue($start_index),
                $resourcePath
            );
        }
        // path params
        if ($records_to_return !== null) {
            $resourcePath = str_replace(
                '{' . 'recordsToReturn' . '}',
                ObjectSerializer::toPathValue($records_to_return),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceSerialNumberBySerialNumber
     *
     * Retrieves network device by serial number
     *
     * @param  string $serial_number Device serial number (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult
     */
    public function getNetworkDeviceSerialNumberBySerialNumber($serial_number)
    {
        list($response) = $this->getNetworkDeviceSerialNumberBySerialNumberWithHttpInfo($serial_number);
        return $response;
    }

    /**
     * Operation getNetworkDeviceSerialNumberBySerialNumberWithHttpInfo
     *
     * Retrieves network device by serial number
     *
     * @param  string $serial_number Device serial number (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\NetworkDeviceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceSerialNumberBySerialNumberWithHttpInfo($serial_number)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceSerialNumberBySerialNumberRequest($serial_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceSerialNumberBySerialNumberAsync
     *
     * Retrieves network device by serial number
     *
     * @param  string $serial_number Device serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceSerialNumberBySerialNumberAsync($serial_number)
    {
        return $this->getNetworkDeviceSerialNumberBySerialNumberAsyncWithHttpInfo($serial_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceSerialNumberBySerialNumberAsyncWithHttpInfo
     *
     * Retrieves network device by serial number
     *
     * @param  string $serial_number Device serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceSerialNumberBySerialNumberAsyncWithHttpInfo($serial_number)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\NetworkDeviceResult';
        $request = $this->getNetworkDeviceSerialNumberBySerialNumberRequest($serial_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceSerialNumberBySerialNumber'
     *
     * @param  string $serial_number Device serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceSerialNumberBySerialNumberRequest($serial_number)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling getNetworkDeviceSerialNumberBySerialNumber'
            );
        }

        $resourcePath = '/api/v1/network-device/serial-number/${serialNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceTenantinfoMacaddress
     *
     * Updates certificate validation status and returns tenantId
     *
     * @param  string $serial_number Serial number of the device (optional)
     * @param  string $macaddress Mac addres of the device (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\RegisterNetworkDeviceResult
     */
    public function getNetworkDeviceTenantinfoMacaddress($serial_number = null, $macaddress = null)
    {
        list($response) = $this->getNetworkDeviceTenantinfoMacaddressWithHttpInfo($serial_number, $macaddress);
        return $response;
    }

    /**
     * Operation getNetworkDeviceTenantinfoMacaddressWithHttpInfo
     *
     * Updates certificate validation status and returns tenantId
     *
     * @param  string $serial_number Serial number of the device (optional)
     * @param  string $macaddress Mac addres of the device (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\RegisterNetworkDeviceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceTenantinfoMacaddressWithHttpInfo($serial_number = null, $macaddress = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RegisterNetworkDeviceResult';
        $request = $this->getNetworkDeviceTenantinfoMacaddressRequest($serial_number, $macaddress);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\RegisterNetworkDeviceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceTenantinfoMacaddressAsync
     *
     * Updates certificate validation status and returns tenantId
     *
     * @param  string $serial_number Serial number of the device (optional)
     * @param  string $macaddress Mac addres of the device (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceTenantinfoMacaddressAsync($serial_number = null, $macaddress = null)
    {
        return $this->getNetworkDeviceTenantinfoMacaddressAsyncWithHttpInfo($serial_number, $macaddress)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceTenantinfoMacaddressAsyncWithHttpInfo
     *
     * Updates certificate validation status and returns tenantId
     *
     * @param  string $serial_number Serial number of the device (optional)
     * @param  string $macaddress Mac addres of the device (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceTenantinfoMacaddressAsyncWithHttpInfo($serial_number = null, $macaddress = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\RegisterNetworkDeviceResult';
        $request = $this->getNetworkDeviceTenantinfoMacaddressRequest($serial_number, $macaddress);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceTenantinfoMacaddress'
     *
     * @param  string $serial_number Serial number of the device (optional)
     * @param  string $macaddress Mac addres of the device (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceTenantinfoMacaddressRequest($serial_number = null, $macaddress = null)
    {

        $resourcePath = '/api/v1/network-device/tenantinfo/macaddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if ($macaddress !== null) {
            $queryParams['macaddress'] = ObjectSerializer::toQueryValue($macaddress);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceVlanById
     *
     * Retrieves list of VLAN data that are associated with interface for a device
     *
     * @param  string $id deviceUUID (required)
     * @param  string $interface_type Vlan assocaited with sub-interface (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\VlanListResult
     */
    public function getNetworkDeviceVlanById($id, $interface_type = null)
    {
        list($response) = $this->getNetworkDeviceVlanByIdWithHttpInfo($id, $interface_type);
        return $response;
    }

    /**
     * Operation getNetworkDeviceVlanByIdWithHttpInfo
     *
     * Retrieves list of VLAN data that are associated with interface for a device
     *
     * @param  string $id deviceUUID (required)
     * @param  string $interface_type Vlan assocaited with sub-interface (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\VlanListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceVlanByIdWithHttpInfo($id, $interface_type = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\VlanListResult';
        $request = $this->getNetworkDeviceVlanByIdRequest($id, $interface_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\VlanListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceVlanByIdAsync
     *
     * Retrieves list of VLAN data that are associated with interface for a device
     *
     * @param  string $id deviceUUID (required)
     * @param  string $interface_type Vlan assocaited with sub-interface (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceVlanByIdAsync($id, $interface_type = null)
    {
        return $this->getNetworkDeviceVlanByIdAsyncWithHttpInfo($id, $interface_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceVlanByIdAsyncWithHttpInfo
     *
     * Retrieves list of VLAN data that are associated with interface for a device
     *
     * @param  string $id deviceUUID (required)
     * @param  string $interface_type Vlan assocaited with sub-interface (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceVlanByIdAsyncWithHttpInfo($id, $interface_type = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\VlanListResult';
        $request = $this->getNetworkDeviceVlanByIdRequest($id, $interface_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceVlanById'
     *
     * @param  string $id deviceUUID (required)
     * @param  string $interface_type Vlan assocaited with sub-interface (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceVlanByIdRequest($id, $interface_type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceVlanById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}/vlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($interface_type !== null) {
            $queryParams['interfaceType'] = ObjectSerializer::toQueryValue($interface_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkDeviceWirelessInfoById
     *
     * Retrieves wireless lan conrtoller info by Device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\WirelessInfoResult
     */
    public function getNetworkDeviceWirelessInfoById($id)
    {
        list($response) = $this->getNetworkDeviceWirelessInfoByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getNetworkDeviceWirelessInfoByIdWithHttpInfo
     *
     * Retrieves wireless lan conrtoller info by Device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\WirelessInfoResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkDeviceWirelessInfoByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\WirelessInfoResult';
        $request = $this->getNetworkDeviceWirelessInfoByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\WirelessInfoResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkDeviceWirelessInfoByIdAsync
     *
     * Retrieves wireless lan conrtoller info by Device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceWirelessInfoByIdAsync($id)
    {
        return $this->getNetworkDeviceWirelessInfoByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkDeviceWirelessInfoByIdAsyncWithHttpInfo
     *
     * Retrieves wireless lan conrtoller info by Device ID
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkDeviceWirelessInfoByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\WirelessInfoResult';
        $request = $this->getNetworkDeviceWirelessInfoByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkDeviceWirelessInfoById'
     *
     * @param  string $id Device ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkDeviceWirelessInfoByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkDeviceWirelessInfoById'
            );
        }

        $resourcePath = '/api/v1/network-device/${id}/wireless-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNetworkDevice
     *
     * Network device POST api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postNetworkDevice($request)
    {
        list($response) = $this->postNetworkDeviceWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postNetworkDeviceWithHttpInfo
     *
     * Network device POST api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNetworkDeviceWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDeviceRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postNetworkDeviceAsync
     *
     * Network device POST api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDeviceAsync($request)
    {
        return $this->postNetworkDeviceAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNetworkDeviceAsyncWithHttpInfo
     *
     * Network device POST api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDeviceAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDeviceRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNetworkDevice'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postNetworkDeviceRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postNetworkDevice'
            );
        }

        $resourcePath = '/api/v1/network-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNetworkDeviceFile
     *
     * Export network-device to file
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ExportDeviceDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postNetworkDeviceFile($request)
    {
        list($response) = $this->postNetworkDeviceFileWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postNetworkDeviceFileWithHttpInfo
     *
     * Export network-device to file
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ExportDeviceDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNetworkDeviceFileWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDeviceFileRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postNetworkDeviceFileAsync
     *
     * Export network-device to file
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ExportDeviceDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDeviceFileAsync($request)
    {
        return $this->postNetworkDeviceFileAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNetworkDeviceFileAsyncWithHttpInfo
     *
     * Export network-device to file
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ExportDeviceDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDeviceFileAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDeviceFileRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNetworkDeviceFile'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ExportDeviceDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postNetworkDeviceFileRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postNetworkDeviceFile'
            );
        }

        $resourcePath = '/api/v1/network-device/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNetworkDevicePollerCliReadRequest
     *
     * Run read-only commands on devices to get their real-time configuration
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CommandRunnerDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function postNetworkDevicePollerCliReadRequest($request)
    {
        list($response) = $this->postNetworkDevicePollerCliReadRequestWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postNetworkDevicePollerCliReadRequestWithHttpInfo
     *
     * Run read-only commands on devices to get their real-time configuration
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CommandRunnerDTO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNetworkDevicePollerCliReadRequestWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDevicePollerCliReadRequestRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postNetworkDevicePollerCliReadRequestAsync
     *
     * Run read-only commands on devices to get their real-time configuration
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CommandRunnerDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDevicePollerCliReadRequestAsync($request)
    {
        return $this->postNetworkDevicePollerCliReadRequestAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNetworkDevicePollerCliReadRequestAsyncWithHttpInfo
     *
     * Run read-only commands on devices to get their real-time configuration
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CommandRunnerDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNetworkDevicePollerCliReadRequestAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->postNetworkDevicePollerCliReadRequestRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNetworkDevicePollerCliReadRequest'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\CommandRunnerDTO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postNetworkDevicePollerCliReadRequestRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postNetworkDevicePollerCliReadRequest'
            );
        }

        $resourcePath = '/api/v1/network-device-poller/cli/read-request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putNetworkDevice
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function putNetworkDevice($request)
    {
        list($response) = $this->putNetworkDeviceWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation putNetworkDeviceWithHttpInfo
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function putNetworkDeviceWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putNetworkDeviceAsync
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceAsync($request)
    {
        return $this->putNetworkDeviceAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putNetworkDeviceAsyncWithHttpInfo
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putNetworkDevice'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfo $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putNetworkDeviceRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putNetworkDevice'
            );
        }

        $resourcePath = '/api/v1/network-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putNetworkDeviceBrief
     *
     * Updates network device role
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function putNetworkDeviceBrief($request)
    {
        list($response) = $this->putNetworkDeviceBriefWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation putNetworkDeviceBriefWithHttpInfo
     *
     * Updates network device role
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIO $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function putNetworkDeviceBriefWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceBriefRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putNetworkDeviceBriefAsync
     *
     * Updates network device role
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceBriefAsync($request)
    {
        return $this->putNetworkDeviceBriefAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putNetworkDeviceBriefAsyncWithHttpInfo
     *
     * Updates network device role
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceBriefAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceBriefRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putNetworkDeviceBrief'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceBriefNIO $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putNetworkDeviceBriefRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putNetworkDeviceBrief'
            );
        }

        $resourcePath = '/api/v1/network-device/brief';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putNetworkDeviceSync
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceSyncApiRequest $request request (required)
     * @param  bool $force_sync forceSync (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\TaskIdResult
     */
    public function putNetworkDeviceSync($request, $force_sync = null)
    {
        list($response) = $this->putNetworkDeviceSyncWithHttpInfo($request, $force_sync);
        return $response;
    }

    /**
     * Operation putNetworkDeviceSyncWithHttpInfo
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceSyncApiRequest $request request (required)
     * @param  bool $force_sync forceSync (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\TaskIdResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function putNetworkDeviceSyncWithHttpInfo($request, $force_sync = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceSyncRequest($request, $force_sync);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\TaskIdResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putNetworkDeviceSyncAsync
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceSyncApiRequest $request request (required)
     * @param  bool $force_sync forceSync (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceSyncAsync($request, $force_sync = null)
    {
        return $this->putNetworkDeviceSyncAsyncWithHttpInfo($request, $force_sync)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putNetworkDeviceSyncAsyncWithHttpInfo
     *
     * Network device sync api
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceSyncApiRequest $request request (required)
     * @param  bool $force_sync forceSync (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNetworkDeviceSyncAsyncWithHttpInfo($request, $force_sync = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\TaskIdResult';
        $request = $this->putNetworkDeviceSyncRequest($request, $force_sync);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putNetworkDeviceSync'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\NetworkDeviceSyncApiRequest $request request (required)
     * @param  bool $force_sync forceSync (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putNetworkDeviceSyncRequest($request, $force_sync = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putNetworkDeviceSync'
            );
        }

        $resourcePath = '/api/v1/network-device/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force_sync !== null) {
            $queryParams['forceSync'] = ObjectSerializer::toQueryValue($force_sync);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
