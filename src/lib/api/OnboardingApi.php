<?php
/**
 * OnboardingApi
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cisco\com\dnac\v1\api\client\ApiException;
use cisco\com\dnac\v1\api\client\Configuration;
use cisco\com\dnac\v1\api\client\HeaderSelector;
use cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * OnboardingApi Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OnboardingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOnboardingPnpDeviceById
     *
     * Delete Device
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DeleteDeviceResponse
     */
    public function deleteOnboardingPnpDeviceById($id)
    {
        list($response) = $this->deleteOnboardingPnpDeviceByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOnboardingPnpDeviceByIdWithHttpInfo
     *
     * Delete Device
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DeleteDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOnboardingPnpDeviceByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteDeviceResponse';
        $request = $this->deleteOnboardingPnpDeviceByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DeleteDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOnboardingPnpDeviceByIdAsync
     *
     * Delete Device
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpDeviceByIdAsync($id)
    {
        return $this->deleteOnboardingPnpDeviceByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOnboardingPnpDeviceByIdAsyncWithHttpInfo
     *
     * Delete Device
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpDeviceByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteDeviceResponse';
        $request = $this->deleteOnboardingPnpDeviceByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOnboardingPnpDeviceById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOnboardingPnpDeviceByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOnboardingPnpDeviceById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOnboardingPnpSettingsVacct
     *
     * Deregister Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DeregisterVirtualAccountResponse
     */
    public function deleteOnboardingPnpSettingsVacct($domain, $name)
    {
        list($response) = $this->deleteOnboardingPnpSettingsVacctWithHttpInfo($domain, $name);
        return $response;
    }

    /**
     * Operation deleteOnboardingPnpSettingsVacctWithHttpInfo
     *
     * Deregister Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DeregisterVirtualAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOnboardingPnpSettingsVacctWithHttpInfo($domain, $name)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeregisterVirtualAccountResponse';
        $request = $this->deleteOnboardingPnpSettingsVacctRequest($domain, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DeregisterVirtualAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOnboardingPnpSettingsVacctAsync
     *
     * Deregister Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpSettingsVacctAsync($domain, $name)
    {
        return $this->deleteOnboardingPnpSettingsVacctAsyncWithHttpInfo($domain, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOnboardingPnpSettingsVacctAsyncWithHttpInfo
     *
     * Deregister Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpSettingsVacctAsyncWithHttpInfo($domain, $name)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeregisterVirtualAccountResponse';
        $request = $this->deleteOnboardingPnpSettingsVacctRequest($domain, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOnboardingPnpSettingsVacct'
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOnboardingPnpSettingsVacctRequest($domain, $name)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteOnboardingPnpSettingsVacct'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteOnboardingPnpSettingsVacct'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-settings/vacct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($domain !== null) {
            $queryParams['domain'] = ObjectSerializer::toQueryValue($domain);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOnboardingPnpWorkflowById
     *
     * Delete Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\DeleteWorkflowResponse
     */
    public function deleteOnboardingPnpWorkflowById($id)
    {
        list($response) = $this->deleteOnboardingPnpWorkflowByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOnboardingPnpWorkflowByIdWithHttpInfo
     *
     * Delete Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\DeleteWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOnboardingPnpWorkflowByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteWorkflowResponse';
        $request = $this->deleteOnboardingPnpWorkflowByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\DeleteWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOnboardingPnpWorkflowByIdAsync
     *
     * Delete Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpWorkflowByIdAsync($id)
    {
        return $this->deleteOnboardingPnpWorkflowByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOnboardingPnpWorkflowByIdAsyncWithHttpInfo
     *
     * Delete Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOnboardingPnpWorkflowByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\DeleteWorkflowResponse';
        $request = $this->deleteOnboardingPnpWorkflowByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOnboardingPnpWorkflowById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOnboardingPnpWorkflowByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOnboardingPnpWorkflowById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-workflow/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDevice
     *
     * List devices
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ListDevicesResponse
     */
    public function getOnboardingPnpDevice($limit = null, $offset = null, $sort = null, $sort_order = null, $serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        list($response) = $this->getOnboardingPnpDeviceWithHttpInfo($limit, $offset, $sort, $sort_order, $serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceWithHttpInfo
     *
     * List devices
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ListDevicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceWithHttpInfo($limit = null, $offset = null, $sort = null, $sort_order = null, $serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ListDevicesResponse';
        $request = $this->getOnboardingPnpDeviceRequest($limit, $offset, $sort, $sort_order, $serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ListDevicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceAsync
     *
     * List devices
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceAsync($limit = null, $offset = null, $sort = null, $sort_order = null, $serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        return $this->getOnboardingPnpDeviceAsyncWithHttpInfo($limit, $offset, $sort, $sort_order, $serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceAsyncWithHttpInfo
     *
     * List devices
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceAsyncWithHttpInfo($limit = null, $offset = null, $sort = null, $sort_order = null, $serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ListDevicesResponse';
        $request = $this->getOnboardingPnpDeviceRequest($limit, $offset, $sort, $sort_order, $serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDevice'
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceRequest($limit = null, $offset = null, $sort = null, $sort_order = null, $serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {

        $resourcePath = '/api/v1/onboarding/pnp-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if (is_array($serial_number)) {
            $serial_number = ObjectSerializer::serializeCollection($serial_number, 'csv', true);
        }
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'csv', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if (is_array($onb_state)) {
            $onb_state = ObjectSerializer::serializeCollection($onb_state, 'csv', true);
        }
        if ($onb_state !== null) {
            $queryParams['onbState'] = ObjectSerializer::toQueryValue($onb_state);
        }
        // query params
        if (is_array($cm_state)) {
            $cm_state = ObjectSerializer::serializeCollection($cm_state, 'csv', true);
        }
        if ($cm_state !== null) {
            $queryParams['cmState'] = ObjectSerializer::toQueryValue($cm_state);
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'csv', true);
        }
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($pid)) {
            $pid = ObjectSerializer::serializeCollection($pid, 'csv', true);
        }
        if ($pid !== null) {
            $queryParams['pid'] = ObjectSerializer::toQueryValue($pid);
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, 'csv', true);
        }
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if (is_array($project_id)) {
            $project_id = ObjectSerializer::serializeCollection($project_id, 'csv', true);
        }
        if ($project_id !== null) {
            $queryParams['projectId'] = ObjectSerializer::toQueryValue($project_id);
        }
        // query params
        if (is_array($workflow_id)) {
            $workflow_id = ObjectSerializer::serializeCollection($workflow_id, 'csv', true);
        }
        if ($workflow_id !== null) {
            $queryParams['workflowId'] = ObjectSerializer::toQueryValue($workflow_id);
        }
        // query params
        if (is_array($project_name)) {
            $project_name = ObjectSerializer::serializeCollection($project_name, 'csv', true);
        }
        if ($project_name !== null) {
            $queryParams['projectName'] = ObjectSerializer::toQueryValue($project_name);
        }
        // query params
        if (is_array($workflow_name)) {
            $workflow_name = ObjectSerializer::serializeCollection($workflow_name, 'csv', true);
        }
        if ($workflow_name !== null) {
            $queryParams['workflowName'] = ObjectSerializer::toQueryValue($workflow_name);
        }
        // query params
        if (is_array($smart_account_id)) {
            $smart_account_id = ObjectSerializer::serializeCollection($smart_account_id, 'csv', true);
        }
        if ($smart_account_id !== null) {
            $queryParams['smartAccountId'] = ObjectSerializer::toQueryValue($smart_account_id);
        }
        // query params
        if (is_array($virtual_account_id)) {
            $virtual_account_id = ObjectSerializer::serializeCollection($virtual_account_id, 'csv', true);
        }
        if ($virtual_account_id !== null) {
            $queryParams['virtualAccountId'] = ObjectSerializer::toQueryValue($virtual_account_id);
        }
        // query params
        if ($last_contact !== null) {
            $queryParams['lastContact'] = ObjectSerializer::toQueryValue($last_contact);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDeviceById
     *
     * Get Device by ID
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetDeviceByIDResponse
     */
    public function getOnboardingPnpDeviceById($id)
    {
        list($response) = $this->getOnboardingPnpDeviceByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceByIdWithHttpInfo
     *
     * Get Device by ID
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetDeviceByIDResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceByIDResponse';
        $request = $this->getOnboardingPnpDeviceByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetDeviceByIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceByIdAsync
     *
     * Get Device by ID
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceByIdAsync($id)
    {
        return $this->getOnboardingPnpDeviceByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceByIdAsyncWithHttpInfo
     *
     * Get Device by ID
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceByIDResponse';
        $request = $this->getOnboardingPnpDeviceByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDeviceById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOnboardingPnpDeviceById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDeviceCcount
     *
     * Get Device Count
     *
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetDeviceCountResponse
     */
    public function getOnboardingPnpDeviceCcount($serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        list($response) = $this->getOnboardingPnpDeviceCcountWithHttpInfo($serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceCcountWithHttpInfo
     *
     * Get Device Count
     *
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetDeviceCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceCcountWithHttpInfo($serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceCountResponse';
        $request = $this->getOnboardingPnpDeviceCcountRequest($serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetDeviceCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceCcountAsync
     *
     * Get Device Count
     *
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceCcountAsync($serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        return $this->getOnboardingPnpDeviceCcountAsyncWithHttpInfo($serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceCcountAsyncWithHttpInfo
     *
     * Get Device Count
     *
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceCcountAsyncWithHttpInfo($serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceCountResponse';
        $request = $this->getOnboardingPnpDeviceCcountRequest($serial_number, $state, $onb_state, $cm_state, $name, $pid, $source, $project_id, $workflow_id, $project_name, $workflow_name, $smart_account_id, $virtual_account_id, $last_contact);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDeviceCcount'
     *
     * @param  string[] $serial_number Device Serial Number (optional)
     * @param  string[] $state Device State (optional)
     * @param  string[] $onb_state Device Onboarding State (optional)
     * @param  string[] $cm_state Device Connection Manager State (optional)
     * @param  string[] $name Device Name (optional)
     * @param  string[] $pid Device ProductId (optional)
     * @param  string[] $source Device Source (optional)
     * @param  string[] $project_id Device Project Id (optional)
     * @param  string[] $workflow_id Device Workflow Id (optional)
     * @param  string[] $project_name Device Project Name (optional)
     * @param  string[] $workflow_name Device Workflow Name (optional)
     * @param  string[] $smart_account_id Device Smart Account (optional)
     * @param  string[] $virtual_account_id Device Virtual Account (optional)
     * @param  bool $last_contact Device Has Contacted lastContact &gt; 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceCcountRequest($serial_number = null, $state = null, $onb_state = null, $cm_state = null, $name = null, $pid = null, $source = null, $project_id = null, $workflow_id = null, $project_name = null, $workflow_name = null, $smart_account_id = null, $virtual_account_id = null, $last_contact = null)
    {

        $resourcePath = '/api/v1/onboarding/pnp-device/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($serial_number)) {
            $serial_number = ObjectSerializer::serializeCollection($serial_number, 'csv', true);
        }
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'csv', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if (is_array($onb_state)) {
            $onb_state = ObjectSerializer::serializeCollection($onb_state, 'csv', true);
        }
        if ($onb_state !== null) {
            $queryParams['onbState'] = ObjectSerializer::toQueryValue($onb_state);
        }
        // query params
        if (is_array($cm_state)) {
            $cm_state = ObjectSerializer::serializeCollection($cm_state, 'csv', true);
        }
        if ($cm_state !== null) {
            $queryParams['cmState'] = ObjectSerializer::toQueryValue($cm_state);
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'csv', true);
        }
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($pid)) {
            $pid = ObjectSerializer::serializeCollection($pid, 'csv', true);
        }
        if ($pid !== null) {
            $queryParams['pid'] = ObjectSerializer::toQueryValue($pid);
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, 'csv', true);
        }
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if (is_array($project_id)) {
            $project_id = ObjectSerializer::serializeCollection($project_id, 'csv', true);
        }
        if ($project_id !== null) {
            $queryParams['projectId'] = ObjectSerializer::toQueryValue($project_id);
        }
        // query params
        if (is_array($workflow_id)) {
            $workflow_id = ObjectSerializer::serializeCollection($workflow_id, 'csv', true);
        }
        if ($workflow_id !== null) {
            $queryParams['workflowId'] = ObjectSerializer::toQueryValue($workflow_id);
        }
        // query params
        if (is_array($project_name)) {
            $project_name = ObjectSerializer::serializeCollection($project_name, 'csv', true);
        }
        if ($project_name !== null) {
            $queryParams['projectName'] = ObjectSerializer::toQueryValue($project_name);
        }
        // query params
        if (is_array($workflow_name)) {
            $workflow_name = ObjectSerializer::serializeCollection($workflow_name, 'csv', true);
        }
        if ($workflow_name !== null) {
            $queryParams['workflowName'] = ObjectSerializer::toQueryValue($workflow_name);
        }
        // query params
        if (is_array($smart_account_id)) {
            $smart_account_id = ObjectSerializer::serializeCollection($smart_account_id, 'csv', true);
        }
        if ($smart_account_id !== null) {
            $queryParams['smartAccountId'] = ObjectSerializer::toQueryValue($smart_account_id);
        }
        // query params
        if (is_array($virtual_account_id)) {
            $virtual_account_id = ObjectSerializer::serializeCollection($virtual_account_id, 'csv', true);
        }
        if ($virtual_account_id !== null) {
            $queryParams['virtualAccountId'] = ObjectSerializer::toQueryValue($virtual_account_id);
        }
        // query params
        if ($last_contact !== null) {
            $queryParams['lastContact'] = ObjectSerializer::toQueryValue($last_contact);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDeviceDashboardCount
     *
     * Get Categorized Device Count
     *
     * @param  string $category Valid Values: state, errorState, onbState or source (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetCategorizedDeviceCountResponse
     */
    public function getOnboardingPnpDeviceDashboardCount($category)
    {
        list($response) = $this->getOnboardingPnpDeviceDashboardCountWithHttpInfo($category);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceDashboardCountWithHttpInfo
     *
     * Get Categorized Device Count
     *
     * @param  string $category Valid Values: state, errorState, onbState or source (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetCategorizedDeviceCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceDashboardCountWithHttpInfo($category)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetCategorizedDeviceCountResponse';
        $request = $this->getOnboardingPnpDeviceDashboardCountRequest($category);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetCategorizedDeviceCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceDashboardCountAsync
     *
     * Get Categorized Device Count
     *
     * @param  string $category Valid Values: state, errorState, onbState or source (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceDashboardCountAsync($category)
    {
        return $this->getOnboardingPnpDeviceDashboardCountAsyncWithHttpInfo($category)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceDashboardCountAsyncWithHttpInfo
     *
     * Get Categorized Device Count
     *
     * @param  string $category Valid Values: state, errorState, onbState or source (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceDashboardCountAsyncWithHttpInfo($category)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetCategorizedDeviceCountResponse';
        $request = $this->getOnboardingPnpDeviceDashboardCountRequest($category);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDeviceDashboardCount'
     *
     * @param  string $category Valid Values: state, errorState, onbState or source (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceDashboardCountRequest($category)
    {
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category when calling getOnboardingPnpDeviceDashboardCount'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/dashboard/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDeviceHistory
     *
     * Get Device History
     *
     * @param  string $serial_number Device Serial Number (required)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetDeviceHistoryResponse
     */
    public function getOnboardingPnpDeviceHistory($serial_number, $sort = null, $sort_order = null)
    {
        list($response) = $this->getOnboardingPnpDeviceHistoryWithHttpInfo($serial_number, $sort, $sort_order);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceHistoryWithHttpInfo
     *
     * Get Device History
     *
     * @param  string $serial_number Device Serial Number (required)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetDeviceHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceHistoryWithHttpInfo($serial_number, $sort = null, $sort_order = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceHistoryResponse';
        $request = $this->getOnboardingPnpDeviceHistoryRequest($serial_number, $sort, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetDeviceHistoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceHistoryAsync
     *
     * Get Device History
     *
     * @param  string $serial_number Device Serial Number (required)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceHistoryAsync($serial_number, $sort = null, $sort_order = null)
    {
        return $this->getOnboardingPnpDeviceHistoryAsyncWithHttpInfo($serial_number, $sort, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceHistoryAsyncWithHttpInfo
     *
     * Get Device History
     *
     * @param  string $serial_number Device Serial Number (required)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceHistoryAsyncWithHttpInfo($serial_number, $sort = null, $sort_order = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetDeviceHistoryResponse';
        $request = $this->getOnboardingPnpDeviceHistoryRequest($serial_number, $sort, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDeviceHistory'
     *
     * @param  string $serial_number Device Serial Number (required)
     * @param  string[] $sort Comma seperated list of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceHistoryRequest($serial_number, $sort = null, $sort_order = null)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling getOnboardingPnpDeviceHistory'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serial_number !== null) {
            $queryParams['serialNumber'] = ObjectSerializer::toQueryValue($serial_number);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName
     *
     * Get Sync Result for Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetSyncResultForVirtualAccountResponse
     */
    public function getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName($domain, $name)
    {
        list($response) = $this->getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameWithHttpInfo($domain, $name);
        return $response;
    }

    /**
     * Operation getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameWithHttpInfo
     *
     * Get Sync Result for Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetSyncResultForVirtualAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameWithHttpInfo($domain, $name)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetSyncResultForVirtualAccountResponse';
        $request = $this->getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameRequest($domain, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetSyncResultForVirtualAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsync
     *
     * Get Sync Result for Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsync($domain, $name)
    {
        return $this->getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsyncWithHttpInfo($domain, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsyncWithHttpInfo
     *
     * Get Sync Result for Virtual Account
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsyncWithHttpInfo($domain, $name)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetSyncResultForVirtualAccountResponse';
        $request = $this->getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameRequest($domain, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName'
     *
     * @param  string $domain Smart Account Domain (required)
     * @param  string $name Virtual Account Name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameRequest($domain, $name)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/sacct/${domain}/vacct/${name}/sync-result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpSettings
     *
     * View Settings
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ViewSettingsResponse
     */
    public function getOnboardingPnpSettings()
    {
        list($response) = $this->getOnboardingPnpSettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOnboardingPnpSettingsWithHttpInfo
     *
     * View Settings
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ViewSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpSettingsWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ViewSettingsResponse';
        $request = $this->getOnboardingPnpSettingsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ViewSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpSettingsAsync
     *
     * View Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsAsync()
    {
        return $this->getOnboardingPnpSettingsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpSettingsAsyncWithHttpInfo
     *
     * View Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ViewSettingsResponse';
        $request = $this->getOnboardingPnpSettingsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpSettings'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpSettingsRequest()
    {

        $resourcePath = '/api/v1/onboarding/pnp-settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpSettingsSacct
     *
     * Get Smart Account List
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetSmartAccountListResponse
     */
    public function getOnboardingPnpSettingsSacct()
    {
        list($response) = $this->getOnboardingPnpSettingsSacctWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOnboardingPnpSettingsSacctWithHttpInfo
     *
     * Get Smart Account List
     *
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetSmartAccountListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpSettingsSacctWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetSmartAccountListResponse';
        $request = $this->getOnboardingPnpSettingsSacctRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetSmartAccountListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpSettingsSacctAsync
     *
     * Get Smart Account List
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsSacctAsync()
    {
        return $this->getOnboardingPnpSettingsSacctAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpSettingsSacctAsyncWithHttpInfo
     *
     * Get Smart Account List
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsSacctAsyncWithHttpInfo()
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetSmartAccountListResponse';
        $request = $this->getOnboardingPnpSettingsSacctRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpSettingsSacct'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpSettingsSacctRequest()
    {

        $resourcePath = '/api/v1/onboarding/pnp-settings/sacct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpSettingsSacctVacctByDomain
     *
     * Get Virtual Account List
     *
     * @param  string $domain Smart Account Domain (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetVirtualAccountListResponse
     */
    public function getOnboardingPnpSettingsSacctVacctByDomain($domain)
    {
        list($response) = $this->getOnboardingPnpSettingsSacctVacctByDomainWithHttpInfo($domain);
        return $response;
    }

    /**
     * Operation getOnboardingPnpSettingsSacctVacctByDomainWithHttpInfo
     *
     * Get Virtual Account List
     *
     * @param  string $domain Smart Account Domain (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetVirtualAccountListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpSettingsSacctVacctByDomainWithHttpInfo($domain)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetVirtualAccountListResponse';
        $request = $this->getOnboardingPnpSettingsSacctVacctByDomainRequest($domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetVirtualAccountListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpSettingsSacctVacctByDomainAsync
     *
     * Get Virtual Account List
     *
     * @param  string $domain Smart Account Domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsSacctVacctByDomainAsync($domain)
    {
        return $this->getOnboardingPnpSettingsSacctVacctByDomainAsyncWithHttpInfo($domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpSettingsSacctVacctByDomainAsyncWithHttpInfo
     *
     * Get Virtual Account List
     *
     * @param  string $domain Smart Account Domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpSettingsSacctVacctByDomainAsyncWithHttpInfo($domain)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetVirtualAccountListResponse';
        $request = $this->getOnboardingPnpSettingsSacctVacctByDomainRequest($domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpSettingsSacctVacctByDomain'
     *
     * @param  string $domain Smart Account Domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpSettingsSacctVacctByDomainRequest($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getOnboardingPnpSettingsSacctVacctByDomain'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-settings/sacct/${domain}/vacct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpWorkflow
     *
     * List Workflows
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated lost of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $type Workflow Type (optional)
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ListWorkflowsResponse
     */
    public function getOnboardingPnpWorkflow($limit = null, $offset = null, $sort = null, $sort_order = null, $type = null, $name = null)
    {
        list($response) = $this->getOnboardingPnpWorkflowWithHttpInfo($limit, $offset, $sort, $sort_order, $type, $name);
        return $response;
    }

    /**
     * Operation getOnboardingPnpWorkflowWithHttpInfo
     *
     * List Workflows
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated lost of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $type Workflow Type (optional)
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ListWorkflowsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpWorkflowWithHttpInfo($limit = null, $offset = null, $sort = null, $sort_order = null, $type = null, $name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ListWorkflowsResponse';
        $request = $this->getOnboardingPnpWorkflowRequest($limit, $offset, $sort, $sort_order, $type, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ListWorkflowsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpWorkflowAsync
     *
     * List Workflows
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated lost of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $type Workflow Type (optional)
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowAsync($limit = null, $offset = null, $sort = null, $sort_order = null, $type = null, $name = null)
    {
        return $this->getOnboardingPnpWorkflowAsyncWithHttpInfo($limit, $offset, $sort, $sort_order, $type, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpWorkflowAsyncWithHttpInfo
     *
     * List Workflows
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated lost of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $type Workflow Type (optional)
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowAsyncWithHttpInfo($limit = null, $offset = null, $sort = null, $sort_order = null, $type = null, $name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ListWorkflowsResponse';
        $request = $this->getOnboardingPnpWorkflowRequest($limit, $offset, $sort, $sort_order, $type, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpWorkflow'
     *
     * @param  int $limit Limits number of results (optional)
     * @param  int $offset Index of first result (optional)
     * @param  string[] $sort Comma seperated lost of fields to sort on (optional)
     * @param  string $sort_order Sort Order Ascending (asc) or Descending (des) (optional)
     * @param  string[] $type Workflow Type (optional)
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpWorkflowRequest($limit = null, $offset = null, $sort = null, $sort_order = null, $type = null, $name = null)
    {

        $resourcePath = '/api/v1/onboarding/pnp-workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, 'csv', true);
        }
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'csv', true);
        }
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpWorkflowById
     *
     * Get Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetWorkflowResponse
     */
    public function getOnboardingPnpWorkflowById($id)
    {
        list($response) = $this->getOnboardingPnpWorkflowByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOnboardingPnpWorkflowByIdWithHttpInfo
     *
     * Get Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpWorkflowByIdWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetWorkflowResponse';
        $request = $this->getOnboardingPnpWorkflowByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpWorkflowByIdAsync
     *
     * Get Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowByIdAsync($id)
    {
        return $this->getOnboardingPnpWorkflowByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpWorkflowByIdAsyncWithHttpInfo
     *
     * Get Workflow
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetWorkflowResponse';
        $request = $this->getOnboardingPnpWorkflowByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpWorkflowById'
     *
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpWorkflowByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOnboardingPnpWorkflowById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-workflow/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnboardingPnpWorkflowCount
     *
     * Get Workflow Count
     *
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\GetWorkflowCountResponse
     */
    public function getOnboardingPnpWorkflowCount($name = null)
    {
        list($response) = $this->getOnboardingPnpWorkflowCountWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getOnboardingPnpWorkflowCountWithHttpInfo
     *
     * Get Workflow Count
     *
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\GetWorkflowCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnboardingPnpWorkflowCountWithHttpInfo($name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetWorkflowCountResponse';
        $request = $this->getOnboardingPnpWorkflowCountRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\GetWorkflowCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOnboardingPnpWorkflowCountAsync
     *
     * Get Workflow Count
     *
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowCountAsync($name = null)
    {
        return $this->getOnboardingPnpWorkflowCountAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnboardingPnpWorkflowCountAsyncWithHttpInfo
     *
     * Get Workflow Count
     *
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOnboardingPnpWorkflowCountAsyncWithHttpInfo($name = null)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\GetWorkflowCountResponse';
        $request = $this->getOnboardingPnpWorkflowCountRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnboardingPnpWorkflowCount'
     *
     * @param  string[] $name Workflow Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOnboardingPnpWorkflowCountRequest($name = null)
    {

        $resourcePath = '/api/v1/onboarding/pnp-workflow/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'csv', true);
        }
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDevice
     *
     * Create Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CreateDeviceResponse
     */
    public function postOnboardingPnpDevice($request)
    {
        list($response) = $this->postOnboardingPnpDeviceWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceWithHttpInfo
     *
     * Create Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CreateDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateDeviceResponse';
        $request = $this->postOnboardingPnpDeviceRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CreateDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceAsync
     *
     * Create Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceAsync($request)
    {
        return $this->postOnboardingPnpDeviceAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceAsyncWithHttpInfo
     *
     * Create Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateDeviceResponse';
        $request = $this->postOnboardingPnpDeviceRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDevice'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDevice'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceClaim
     *
     * Claim Device(s)
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ClaimDeviceRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ClaimDevicesResponse
     */
    public function postOnboardingPnpDeviceClaim($request)
    {
        list($response) = $this->postOnboardingPnpDeviceClaimWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceClaimWithHttpInfo
     *
     * Claim Device(s)
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ClaimDeviceRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ClaimDevicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceClaimWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClaimDevicesResponse';
        $request = $this->postOnboardingPnpDeviceClaimRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ClaimDevicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceClaimAsync
     *
     * Claim Device(s)
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ClaimDeviceRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceClaimAsync($request)
    {
        return $this->postOnboardingPnpDeviceClaimAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceClaimAsyncWithHttpInfo
     *
     * Claim Device(s)
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ClaimDeviceRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceClaimAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ClaimDevicesResponse';
        $request = $this->postOnboardingPnpDeviceClaimRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceClaim'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ClaimDeviceRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceClaimRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceClaim'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/claim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceImport
     *
     * Import Many Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ImportManyDevicesResponse
     */
    public function postOnboardingPnpDeviceImport($request)
    {
        list($response) = $this->postOnboardingPnpDeviceImportWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceImportWithHttpInfo
     *
     * Import Many Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ImportManyDevicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceImportWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ImportManyDevicesResponse';
        $request = $this->postOnboardingPnpDeviceImportRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ImportManyDevicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceImportAsync
     *
     * Import Many Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceImportAsync($request)
    {
        return $this->postOnboardingPnpDeviceImportAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceImportAsyncWithHttpInfo
     *
     * Import Many Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceImportAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ImportManyDevicesResponse';
        $request = $this->postOnboardingPnpDeviceImportRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceImport'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceImportRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceImport'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceProvision
     *
     * Provision Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\PushProvisionRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ProvisionDeviceResponse
     */
    public function postOnboardingPnpDeviceProvision($request)
    {
        list($response) = $this->postOnboardingPnpDeviceProvisionWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceProvisionWithHttpInfo
     *
     * Provision Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\PushProvisionRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ProvisionDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceProvisionWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ProvisionDeviceResponse';
        $request = $this->postOnboardingPnpDeviceProvisionRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ProvisionDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceProvisionAsync
     *
     * Provision Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\PushProvisionRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceProvisionAsync($request)
    {
        return $this->postOnboardingPnpDeviceProvisionAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceProvisionAsyncWithHttpInfo
     *
     * Provision Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\PushProvisionRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceProvisionAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ProvisionDeviceResponse';
        $request = $this->postOnboardingPnpDeviceProvisionRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceProvision'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\PushProvisionRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceProvisionRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceProvision'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/provision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceReset
     *
     * Reset Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ResetRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\ResetDeviceResponse
     */
    public function postOnboardingPnpDeviceReset($request)
    {
        list($response) = $this->postOnboardingPnpDeviceResetWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceResetWithHttpInfo
     *
     * Reset Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ResetRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\ResetDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceResetWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ResetDeviceResponse';
        $request = $this->postOnboardingPnpDeviceResetRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\ResetDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceResetAsync
     *
     * Reset Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ResetRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceResetAsync($request)
    {
        return $this->postOnboardingPnpDeviceResetAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceResetAsyncWithHttpInfo
     *
     * Reset Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ResetRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceResetAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\ResetDeviceResponse';
        $request = $this->postOnboardingPnpDeviceResetRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceReset'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\ResetRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceResetRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceReset'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceUnclaim
     *
     * Un-Claim Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\UnclaimRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\UnClaimDeviceResponse
     */
    public function postOnboardingPnpDeviceUnclaim($request)
    {
        list($response) = $this->postOnboardingPnpDeviceUnclaimWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceUnclaimWithHttpInfo
     *
     * Un-Claim Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\UnclaimRequest $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\UnClaimDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceUnclaimWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UnClaimDeviceResponse';
        $request = $this->postOnboardingPnpDeviceUnclaimRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\UnClaimDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceUnclaimAsync
     *
     * Un-Claim Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\UnclaimRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceUnclaimAsync($request)
    {
        return $this->postOnboardingPnpDeviceUnclaimAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceUnclaimAsyncWithHttpInfo
     *
     * Un-Claim Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\UnclaimRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceUnclaimAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UnClaimDeviceResponse';
        $request = $this->postOnboardingPnpDeviceUnclaimRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceUnclaim'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\UnclaimRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceUnclaimRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceUnclaim'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/unclaim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpDeviceVacctSync
     *
     * Sync Virtual Account Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\SyncVirtualAccountDevicesResponse
     */
    public function postOnboardingPnpDeviceVacctSync($request)
    {
        list($response) = $this->postOnboardingPnpDeviceVacctSyncWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpDeviceVacctSyncWithHttpInfo
     *
     * Sync Virtual Account Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\SyncVirtualAccountDevicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpDeviceVacctSyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SyncVirtualAccountDevicesResponse';
        $request = $this->postOnboardingPnpDeviceVacctSyncRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\SyncVirtualAccountDevicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpDeviceVacctSyncAsync
     *
     * Sync Virtual Account Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceVacctSyncAsync($request)
    {
        return $this->postOnboardingPnpDeviceVacctSyncAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpDeviceVacctSyncAsyncWithHttpInfo
     *
     * Sync Virtual Account Devices
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpDeviceVacctSyncAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\SyncVirtualAccountDevicesResponse';
        $request = $this->postOnboardingPnpDeviceVacctSyncRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpDeviceVacctSync'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpDeviceVacctSyncRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpDeviceVacctSync'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/vacct-sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpSettingsSavacct
     *
     * Add Virtual Account
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\AddVirtualAccountResponse
     */
    public function postOnboardingPnpSettingsSavacct($request)
    {
        list($response) = $this->postOnboardingPnpSettingsSavacctWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpSettingsSavacctWithHttpInfo
     *
     * Add Virtual Account
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\AddVirtualAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpSettingsSavacctWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\AddVirtualAccountResponse';
        $request = $this->postOnboardingPnpSettingsSavacctRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\AddVirtualAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpSettingsSavacctAsync
     *
     * Add Virtual Account
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpSettingsSavacctAsync($request)
    {
        return $this->postOnboardingPnpSettingsSavacctAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpSettingsSavacctAsyncWithHttpInfo
     *
     * Add Virtual Account
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpSettingsSavacctAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\AddVirtualAccountResponse';
        $request = $this->postOnboardingPnpSettingsSavacctRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpSettingsSavacct'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpSettingsSavacctRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpSettingsSavacct'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-settings/savacct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOnboardingPnpWorkflow
     *
     * Create Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\CreateWorkflowResponse
     */
    public function postOnboardingPnpWorkflow($request)
    {
        list($response) = $this->postOnboardingPnpWorkflowWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation postOnboardingPnpWorkflowWithHttpInfo
     *
     * Create Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\CreateWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOnboardingPnpWorkflowWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateWorkflowResponse';
        $request = $this->postOnboardingPnpWorkflowRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\CreateWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOnboardingPnpWorkflowAsync
     *
     * Create Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpWorkflowAsync($request)
    {
        return $this->postOnboardingPnpWorkflowAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOnboardingPnpWorkflowAsyncWithHttpInfo
     *
     * Create Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOnboardingPnpWorkflowAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\CreateWorkflowResponse';
        $request = $this->postOnboardingPnpWorkflowRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOnboardingPnpWorkflow'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOnboardingPnpWorkflowRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling postOnboardingPnpWorkflow'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOnboardingPnpDeviceById
     *
     * Update Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\UpdateDeviceResponse
     */
    public function putOnboardingPnpDeviceById($request, $id)
    {
        list($response) = $this->putOnboardingPnpDeviceByIdWithHttpInfo($request, $id);
        return $response;
    }

    /**
     * Operation putOnboardingPnpDeviceByIdWithHttpInfo
     *
     * Update Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\UpdateDeviceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOnboardingPnpDeviceByIdWithHttpInfo($request, $id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateDeviceResponse';
        $request = $this->putOnboardingPnpDeviceByIdRequest($request, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\UpdateDeviceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOnboardingPnpDeviceByIdAsync
     *
     * Update Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpDeviceByIdAsync($request, $id)
    {
        return $this->putOnboardingPnpDeviceByIdAsyncWithHttpInfo($request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOnboardingPnpDeviceByIdAsyncWithHttpInfo
     *
     * Update Device
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpDeviceByIdAsyncWithHttpInfo($request, $id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateDeviceResponse';
        $request = $this->putOnboardingPnpDeviceByIdRequest($request, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOnboardingPnpDeviceById'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Device $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOnboardingPnpDeviceByIdRequest($request, $id)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putOnboardingPnpDeviceById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOnboardingPnpDeviceById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-device/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOnboardingPnpSettings
     *
     * Update Settings
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Settings $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\UpdateSettingsResponse
     */
    public function putOnboardingPnpSettings($request)
    {
        list($response) = $this->putOnboardingPnpSettingsWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation putOnboardingPnpSettingsWithHttpInfo
     *
     * Update Settings
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Settings $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\UpdateSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOnboardingPnpSettingsWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateSettingsResponse';
        $request = $this->putOnboardingPnpSettingsRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\UpdateSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOnboardingPnpSettingsAsync
     *
     * Update Settings
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Settings $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpSettingsAsync($request)
    {
        return $this->putOnboardingPnpSettingsAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOnboardingPnpSettingsAsyncWithHttpInfo
     *
     * Update Settings
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Settings $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpSettingsAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateSettingsResponse';
        $request = $this->putOnboardingPnpSettingsRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOnboardingPnpSettings'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Settings $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOnboardingPnpSettingsRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putOnboardingPnpSettings'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOnboardingPnpSettingsSavacct
     *
     * Edit PnP Server Profile
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\EditPnPServerProfileResponse
     */
    public function putOnboardingPnpSettingsSavacct($request)
    {
        list($response) = $this->putOnboardingPnpSettingsSavacctWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation putOnboardingPnpSettingsSavacctWithHttpInfo
     *
     * Edit PnP Server Profile
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\EditPnPServerProfileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOnboardingPnpSettingsSavacctWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\EditPnPServerProfileResponse';
        $request = $this->putOnboardingPnpSettingsSavacctRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\EditPnPServerProfileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOnboardingPnpSettingsSavacctAsync
     *
     * Edit PnP Server Profile
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpSettingsSavacctAsync($request)
    {
        return $this->putOnboardingPnpSettingsSavacctAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOnboardingPnpSettingsSavacctAsyncWithHttpInfo
     *
     * Edit PnP Server Profile
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpSettingsSavacctAsyncWithHttpInfo($request)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\EditPnPServerProfileResponse';
        $request = $this->putOnboardingPnpSettingsSavacctRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOnboardingPnpSettingsSavacct'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\SAVAMapping $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOnboardingPnpSettingsSavacctRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putOnboardingPnpSettingsSavacct'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-settings/savacct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOnboardingPnpWorkflowById
     *
     * Update Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cisco\com\dnac\v1\api\client\model\UpdateWorkflowResponse
     */
    public function putOnboardingPnpWorkflowById($request, $id)
    {
        list($response) = $this->putOnboardingPnpWorkflowByIdWithHttpInfo($request, $id);
        return $response;
    }

    /**
     * Operation putOnboardingPnpWorkflowByIdWithHttpInfo
     *
     * Update Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     * @param  string $id id (required)
     *
     * @throws \cisco\com\dnac\v1\api\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cisco\com\dnac\v1\api\client\model\UpdateWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOnboardingPnpWorkflowByIdWithHttpInfo($request, $id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateWorkflowResponse';
        $request = $this->putOnboardingPnpWorkflowByIdRequest($request, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cisco\com\dnac\v1\api\client\model\UpdateWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOnboardingPnpWorkflowByIdAsync
     *
     * Update Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpWorkflowByIdAsync($request, $id)
    {
        return $this->putOnboardingPnpWorkflowByIdAsyncWithHttpInfo($request, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOnboardingPnpWorkflowByIdAsyncWithHttpInfo
     *
     * Update Workflow
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOnboardingPnpWorkflowByIdAsyncWithHttpInfo($request, $id)
    {
        $returnType = '\cisco\com\dnac\v1\api\client\model\UpdateWorkflowResponse';
        $request = $this->putOnboardingPnpWorkflowByIdRequest($request, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOnboardingPnpWorkflowById'
     *
     * @param  \cisco\com\dnac\v1\api\client\model\Workflow $request request (required)
     * @param  string $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOnboardingPnpWorkflowByIdRequest($request, $id)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling putOnboardingPnpWorkflowById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOnboardingPnpWorkflowById'
            );
        }

        $resourcePath = '/api/v1/onboarding/pnp-workflow/${id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
