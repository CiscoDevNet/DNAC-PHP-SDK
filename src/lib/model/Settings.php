<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'aaa_credentials' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials',
        'accept_eula' => 'bool',
        'default_profile' => '\cisco\com\dnac\v1\api\client\model\SettingsDefaultProfile',
        'sava_mapping_list' => '\cisco\com\dnac\v1\api\client\model\SettingsSavaMappingList[]',
        'task_time_outs' => '\cisco\com\dnac\v1\api\client\model\SettingsTaskTimeOuts',
        'tenant_id' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'aaa_credentials' => null,
        'accept_eula' => null,
        'default_profile' => null,
        'sava_mapping_list' => null,
        'task_time_outs' => null,
        'tenant_id' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'aaa_credentials' => 'aaaCredentials',
        'accept_eula' => 'acceptEula',
        'default_profile' => 'defaultProfile',
        'sava_mapping_list' => 'savaMappingList',
        'task_time_outs' => 'taskTimeOuts',
        'tenant_id' => 'tenantId',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'aaa_credentials' => 'setAaaCredentials',
        'accept_eula' => 'setAcceptEula',
        'default_profile' => 'setDefaultProfile',
        'sava_mapping_list' => 'setSavaMappingList',
        'task_time_outs' => 'setTaskTimeOuts',
        'tenant_id' => 'setTenantId',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'aaa_credentials' => 'getAaaCredentials',
        'accept_eula' => 'getAcceptEula',
        'default_profile' => 'getDefaultProfile',
        'sava_mapping_list' => 'getSavaMappingList',
        'task_time_outs' => 'getTaskTimeOuts',
        'tenant_id' => 'getTenantId',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['aaa_credentials'] = isset($data['aaa_credentials']) ? $data['aaa_credentials'] : null;
        $this->container['accept_eula'] = isset($data['accept_eula']) ? $data['accept_eula'] : null;
        $this->container['default_profile'] = isset($data['default_profile']) ? $data['default_profile'] : null;
        $this->container['sava_mapping_list'] = isset($data['sava_mapping_list']) ? $data['sava_mapping_list'] : null;
        $this->container['task_time_outs'] = isset($data['task_time_outs']) ? $data['task_time_outs'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets aaa_credentials
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials
     */
    public function getAaaCredentials()
    {
        return $this->container['aaa_credentials'];
    }

    /**
     * Sets aaa_credentials
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials $aaa_credentials aaa_credentials
     *
     * @return $this
     */
    public function setAaaCredentials($aaa_credentials)
    {
        $this->container['aaa_credentials'] = $aaa_credentials;

        return $this;
    }

    /**
     * Gets accept_eula
     *
     * @return bool
     */
    public function getAcceptEula()
    {
        return $this->container['accept_eula'];
    }

    /**
     * Sets accept_eula
     *
     * @param bool $accept_eula accept_eula
     *
     * @return $this
     */
    public function setAcceptEula($accept_eula)
    {
        $this->container['accept_eula'] = $accept_eula;

        return $this;
    }

    /**
     * Gets default_profile
     *
     * @return \cisco\com\dnac\v1\api\client\model\SettingsDefaultProfile
     */
    public function getDefaultProfile()
    {
        return $this->container['default_profile'];
    }

    /**
     * Sets default_profile
     *
     * @param \cisco\com\dnac\v1\api\client\model\SettingsDefaultProfile $default_profile default_profile
     *
     * @return $this
     */
    public function setDefaultProfile($default_profile)
    {
        $this->container['default_profile'] = $default_profile;

        return $this;
    }

    /**
     * Gets sava_mapping_list
     *
     * @return \cisco\com\dnac\v1\api\client\model\SettingsSavaMappingList[]
     */
    public function getSavaMappingList()
    {
        return $this->container['sava_mapping_list'];
    }

    /**
     * Sets sava_mapping_list
     *
     * @param \cisco\com\dnac\v1\api\client\model\SettingsSavaMappingList[] $sava_mapping_list sava_mapping_list
     *
     * @return $this
     */
    public function setSavaMappingList($sava_mapping_list)
    {
        $this->container['sava_mapping_list'] = $sava_mapping_list;

        return $this;
    }

    /**
     * Gets task_time_outs
     *
     * @return \cisco\com\dnac\v1\api\client\model\SettingsTaskTimeOuts
     */
    public function getTaskTimeOuts()
    {
        return $this->container['task_time_outs'];
    }

    /**
     * Sets task_time_outs
     *
     * @param \cisco\com\dnac\v1\api\client\model\SettingsTaskTimeOuts $task_time_outs task_time_outs
     *
     * @return $this
     */
    public function setTaskTimeOuts($task_time_outs)
    {
        $this->container['task_time_outs'] = $task_time_outs;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


