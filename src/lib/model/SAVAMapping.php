<?php
/**
 * SAVAMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * SAVAMapping Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SAVAMapping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SAVAMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_sync_period' => 'int',
        'cco_user' => 'string',
        'expiry' => 'int',
        'last_sync' => 'int',
        'profile' => '\cisco\com\dnac\v1\api\client\model\SAVAMappingProfile',
        'smart_account_id' => 'string',
        'sync_result' => '\cisco\com\dnac\v1\api\client\model\SAVAMappingSyncResult',
        'sync_result_str' => 'string',
        'sync_start_time' => 'int',
        'sync_status' => 'string',
        'tenant_id' => 'string',
        'token' => 'string',
        'virtual_account_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_sync_period' => null,
        'cco_user' => null,
        'expiry' => null,
        'last_sync' => null,
        'profile' => null,
        'smart_account_id' => null,
        'sync_result' => null,
        'sync_result_str' => null,
        'sync_start_time' => null,
        'sync_status' => null,
        'tenant_id' => null,
        'token' => null,
        'virtual_account_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_sync_period' => 'autoSyncPeriod',
        'cco_user' => 'ccoUser',
        'expiry' => 'expiry',
        'last_sync' => 'lastSync',
        'profile' => 'profile',
        'smart_account_id' => 'smartAccountId',
        'sync_result' => 'syncResult',
        'sync_result_str' => 'syncResultStr',
        'sync_start_time' => 'syncStartTime',
        'sync_status' => 'syncStatus',
        'tenant_id' => 'tenantId',
        'token' => 'token',
        'virtual_account_id' => 'virtualAccountId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_sync_period' => 'setAutoSyncPeriod',
        'cco_user' => 'setCcoUser',
        'expiry' => 'setExpiry',
        'last_sync' => 'setLastSync',
        'profile' => 'setProfile',
        'smart_account_id' => 'setSmartAccountId',
        'sync_result' => 'setSyncResult',
        'sync_result_str' => 'setSyncResultStr',
        'sync_start_time' => 'setSyncStartTime',
        'sync_status' => 'setSyncStatus',
        'tenant_id' => 'setTenantId',
        'token' => 'setToken',
        'virtual_account_id' => 'setVirtualAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_sync_period' => 'getAutoSyncPeriod',
        'cco_user' => 'getCcoUser',
        'expiry' => 'getExpiry',
        'last_sync' => 'getLastSync',
        'profile' => 'getProfile',
        'smart_account_id' => 'getSmartAccountId',
        'sync_result' => 'getSyncResult',
        'sync_result_str' => 'getSyncResultStr',
        'sync_start_time' => 'getSyncStartTime',
        'sync_status' => 'getSyncStatus',
        'tenant_id' => 'getTenantId',
        'token' => 'getToken',
        'virtual_account_id' => 'getVirtualAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SYNC_STATUS_NOT_SYNCED = 'NOT_SYNCED';
    const SYNC_STATUS_SYNCING = 'SYNCING';
    const SYNC_STATUS_SUCCESS = 'SUCCESS';
    const SYNC_STATUS_FAILURE = 'FAILURE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSyncStatusAllowableValues()
    {
        return [
            self::SYNC_STATUS_NOT_SYNCED,
            self::SYNC_STATUS_SYNCING,
            self::SYNC_STATUS_SUCCESS,
            self::SYNC_STATUS_FAILURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_sync_period'] = isset($data['auto_sync_period']) ? $data['auto_sync_period'] : null;
        $this->container['cco_user'] = isset($data['cco_user']) ? $data['cco_user'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['last_sync'] = isset($data['last_sync']) ? $data['last_sync'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['smart_account_id'] = isset($data['smart_account_id']) ? $data['smart_account_id'] : null;
        $this->container['sync_result'] = isset($data['sync_result']) ? $data['sync_result'] : null;
        $this->container['sync_result_str'] = isset($data['sync_result_str']) ? $data['sync_result_str'] : null;
        $this->container['sync_start_time'] = isset($data['sync_start_time']) ? $data['sync_start_time'] : null;
        $this->container['sync_status'] = isset($data['sync_status']) ? $data['sync_status'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['virtual_account_id'] = isset($data['virtual_account_id']) ? $data['virtual_account_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSyncStatusAllowableValues();
        if (!in_array($this->container['sync_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sync_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getSyncStatusAllowableValues();
        if (!in_array($this->container['sync_status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets auto_sync_period
     *
     * @return int
     */
    public function getAutoSyncPeriod()
    {
        return $this->container['auto_sync_period'];
    }

    /**
     * Sets auto_sync_period
     *
     * @param int $auto_sync_period auto_sync_period
     *
     * @return $this
     */
    public function setAutoSyncPeriod($auto_sync_period)
    {
        $this->container['auto_sync_period'] = $auto_sync_period;

        return $this;
    }

    /**
     * Gets cco_user
     *
     * @return string
     */
    public function getCcoUser()
    {
        return $this->container['cco_user'];
    }

    /**
     * Sets cco_user
     *
     * @param string $cco_user cco_user
     *
     * @return $this
     */
    public function setCcoUser($cco_user)
    {
        $this->container['cco_user'] = $cco_user;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return int
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param int $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets last_sync
     *
     * @return int
     */
    public function getLastSync()
    {
        return $this->container['last_sync'];
    }

    /**
     * Sets last_sync
     *
     * @param int $last_sync last_sync
     *
     * @return $this
     */
    public function setLastSync($last_sync)
    {
        $this->container['last_sync'] = $last_sync;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \cisco\com\dnac\v1\api\client\model\SAVAMappingProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \cisco\com\dnac\v1\api\client\model\SAVAMappingProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets smart_account_id
     *
     * @return string
     */
    public function getSmartAccountId()
    {
        return $this->container['smart_account_id'];
    }

    /**
     * Sets smart_account_id
     *
     * @param string $smart_account_id smart_account_id
     *
     * @return $this
     */
    public function setSmartAccountId($smart_account_id)
    {
        $this->container['smart_account_id'] = $smart_account_id;

        return $this;
    }

    /**
     * Gets sync_result
     *
     * @return \cisco\com\dnac\v1\api\client\model\SAVAMappingSyncResult
     */
    public function getSyncResult()
    {
        return $this->container['sync_result'];
    }

    /**
     * Sets sync_result
     *
     * @param \cisco\com\dnac\v1\api\client\model\SAVAMappingSyncResult $sync_result sync_result
     *
     * @return $this
     */
    public function setSyncResult($sync_result)
    {
        $this->container['sync_result'] = $sync_result;

        return $this;
    }

    /**
     * Gets sync_result_str
     *
     * @return string
     */
    public function getSyncResultStr()
    {
        return $this->container['sync_result_str'];
    }

    /**
     * Sets sync_result_str
     *
     * @param string $sync_result_str sync_result_str
     *
     * @return $this
     */
    public function setSyncResultStr($sync_result_str)
    {
        $this->container['sync_result_str'] = $sync_result_str;

        return $this;
    }

    /**
     * Gets sync_start_time
     *
     * @return int
     */
    public function getSyncStartTime()
    {
        return $this->container['sync_start_time'];
    }

    /**
     * Sets sync_start_time
     *
     * @param int $sync_start_time sync_start_time
     *
     * @return $this
     */
    public function setSyncStartTime($sync_start_time)
    {
        $this->container['sync_start_time'] = $sync_start_time;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string $sync_status sync_status
     *
     * @return $this
     */
    public function setSyncStatus($sync_status)
    {
        $allowedValues = $this->getSyncStatusAllowableValues();
        if (!is_null($sync_status) && !in_array($sync_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sync_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets virtual_account_id
     *
     * @return string
     */
    public function getVirtualAccountId()
    {
        return $this->container['virtual_account_id'];
    }

    /**
     * Sets virtual_account_id
     *
     * @param string $virtual_account_id virtual_account_id
     *
     * @return $this
     */
    public function setVirtualAccountId($virtual_account_id)
    {
        $this->container['virtual_account_id'] = $virtual_account_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


