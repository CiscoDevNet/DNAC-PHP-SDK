<?php
/**
 * PathResponseResultResponseEgressPhysicalInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponseEgressPhysicalInterface Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponseEgressPhysicalInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_egressPhysicalInterface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acl_analysis' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis',
        'id' => 'string',
        'interface_statistics' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics',
        'interface_stats_collection' => 'string',
        'interface_stats_collection_failure_reason' => 'string',
        'name' => 'string',
        'path_overlay_info' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo[]',
        'qos_statistics' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceQosStatistics[]',
        'qos_stats_collection' => 'string',
        'qos_stats_collection_failure_reason' => 'string',
        'used_vlan' => 'string',
        'vrf_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acl_analysis' => null,
        'id' => null,
        'interface_statistics' => null,
        'interface_stats_collection' => null,
        'interface_stats_collection_failure_reason' => null,
        'name' => null,
        'path_overlay_info' => null,
        'qos_statistics' => null,
        'qos_stats_collection' => null,
        'qos_stats_collection_failure_reason' => null,
        'used_vlan' => null,
        'vrf_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acl_analysis' => 'aclAnalysis',
        'id' => 'id',
        'interface_statistics' => 'interfaceStatistics',
        'interface_stats_collection' => 'interfaceStatsCollection',
        'interface_stats_collection_failure_reason' => 'interfaceStatsCollectionFailureReason',
        'name' => 'name',
        'path_overlay_info' => 'pathOverlayInfo',
        'qos_statistics' => 'qosStatistics',
        'qos_stats_collection' => 'qosStatsCollection',
        'qos_stats_collection_failure_reason' => 'qosStatsCollectionFailureReason',
        'used_vlan' => 'usedVlan',
        'vrf_name' => 'vrfName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acl_analysis' => 'setAclAnalysis',
        'id' => 'setId',
        'interface_statistics' => 'setInterfaceStatistics',
        'interface_stats_collection' => 'setInterfaceStatsCollection',
        'interface_stats_collection_failure_reason' => 'setInterfaceStatsCollectionFailureReason',
        'name' => 'setName',
        'path_overlay_info' => 'setPathOverlayInfo',
        'qos_statistics' => 'setQosStatistics',
        'qos_stats_collection' => 'setQosStatsCollection',
        'qos_stats_collection_failure_reason' => 'setQosStatsCollectionFailureReason',
        'used_vlan' => 'setUsedVlan',
        'vrf_name' => 'setVrfName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acl_analysis' => 'getAclAnalysis',
        'id' => 'getId',
        'interface_statistics' => 'getInterfaceStatistics',
        'interface_stats_collection' => 'getInterfaceStatsCollection',
        'interface_stats_collection_failure_reason' => 'getInterfaceStatsCollectionFailureReason',
        'name' => 'getName',
        'path_overlay_info' => 'getPathOverlayInfo',
        'qos_statistics' => 'getQosStatistics',
        'qos_stats_collection' => 'getQosStatsCollection',
        'qos_stats_collection_failure_reason' => 'getQosStatsCollectionFailureReason',
        'used_vlan' => 'getUsedVlan',
        'vrf_name' => 'getVrfName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acl_analysis'] = isset($data['acl_analysis']) ? $data['acl_analysis'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['interface_statistics'] = isset($data['interface_statistics']) ? $data['interface_statistics'] : null;
        $this->container['interface_stats_collection'] = isset($data['interface_stats_collection']) ? $data['interface_stats_collection'] : null;
        $this->container['interface_stats_collection_failure_reason'] = isset($data['interface_stats_collection_failure_reason']) ? $data['interface_stats_collection_failure_reason'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path_overlay_info'] = isset($data['path_overlay_info']) ? $data['path_overlay_info'] : null;
        $this->container['qos_statistics'] = isset($data['qos_statistics']) ? $data['qos_statistics'] : null;
        $this->container['qos_stats_collection'] = isset($data['qos_stats_collection']) ? $data['qos_stats_collection'] : null;
        $this->container['qos_stats_collection_failure_reason'] = isset($data['qos_stats_collection_failure_reason']) ? $data['qos_stats_collection_failure_reason'] : null;
        $this->container['used_vlan'] = isset($data['used_vlan']) ? $data['used_vlan'] : null;
        $this->container['vrf_name'] = isset($data['vrf_name']) ? $data['vrf_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets acl_analysis
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
     */
    public function getAclAnalysis()
    {
        return $this->container['acl_analysis'];
    }

    /**
     * Sets acl_analysis
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis $acl_analysis acl_analysis
     *
     * @return $this
     */
    public function setAclAnalysis($acl_analysis)
    {
        $this->container['acl_analysis'] = $acl_analysis;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interface_statistics
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics
     */
    public function getInterfaceStatistics()
    {
        return $this->container['interface_statistics'];
    }

    /**
     * Sets interface_statistics
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics $interface_statistics interface_statistics
     *
     * @return $this
     */
    public function setInterfaceStatistics($interface_statistics)
    {
        $this->container['interface_statistics'] = $interface_statistics;

        return $this;
    }

    /**
     * Gets interface_stats_collection
     *
     * @return string
     */
    public function getInterfaceStatsCollection()
    {
        return $this->container['interface_stats_collection'];
    }

    /**
     * Sets interface_stats_collection
     *
     * @param string $interface_stats_collection interface_stats_collection
     *
     * @return $this
     */
    public function setInterfaceStatsCollection($interface_stats_collection)
    {
        $this->container['interface_stats_collection'] = $interface_stats_collection;

        return $this;
    }

    /**
     * Gets interface_stats_collection_failure_reason
     *
     * @return string
     */
    public function getInterfaceStatsCollectionFailureReason()
    {
        return $this->container['interface_stats_collection_failure_reason'];
    }

    /**
     * Sets interface_stats_collection_failure_reason
     *
     * @param string $interface_stats_collection_failure_reason interface_stats_collection_failure_reason
     *
     * @return $this
     */
    public function setInterfaceStatsCollectionFailureReason($interface_stats_collection_failure_reason)
    {
        $this->container['interface_stats_collection_failure_reason'] = $interface_stats_collection_failure_reason;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path_overlay_info
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo[]
     */
    public function getPathOverlayInfo()
    {
        return $this->container['path_overlay_info'];
    }

    /**
     * Sets path_overlay_info
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo[] $path_overlay_info path_overlay_info
     *
     * @return $this
     */
    public function setPathOverlayInfo($path_overlay_info)
    {
        $this->container['path_overlay_info'] = $path_overlay_info;

        return $this;
    }

    /**
     * Gets qos_statistics
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceQosStatistics[]
     */
    public function getQosStatistics()
    {
        return $this->container['qos_statistics'];
    }

    /**
     * Sets qos_statistics
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceQosStatistics[] $qos_statistics qos_statistics
     *
     * @return $this
     */
    public function setQosStatistics($qos_statistics)
    {
        $this->container['qos_statistics'] = $qos_statistics;

        return $this;
    }

    /**
     * Gets qos_stats_collection
     *
     * @return string
     */
    public function getQosStatsCollection()
    {
        return $this->container['qos_stats_collection'];
    }

    /**
     * Sets qos_stats_collection
     *
     * @param string $qos_stats_collection qos_stats_collection
     *
     * @return $this
     */
    public function setQosStatsCollection($qos_stats_collection)
    {
        $this->container['qos_stats_collection'] = $qos_stats_collection;

        return $this;
    }

    /**
     * Gets qos_stats_collection_failure_reason
     *
     * @return string
     */
    public function getQosStatsCollectionFailureReason()
    {
        return $this->container['qos_stats_collection_failure_reason'];
    }

    /**
     * Sets qos_stats_collection_failure_reason
     *
     * @param string $qos_stats_collection_failure_reason qos_stats_collection_failure_reason
     *
     * @return $this
     */
    public function setQosStatsCollectionFailureReason($qos_stats_collection_failure_reason)
    {
        $this->container['qos_stats_collection_failure_reason'] = $qos_stats_collection_failure_reason;

        return $this;
    }

    /**
     * Gets used_vlan
     *
     * @return string
     */
    public function getUsedVlan()
    {
        return $this->container['used_vlan'];
    }

    /**
     * Sets used_vlan
     *
     * @param string $used_vlan used_vlan
     *
     * @return $this
     */
    public function setUsedVlan($used_vlan)
    {
        $this->container['used_vlan'] = $used_vlan;

        return $this;
    }

    /**
     * Gets vrf_name
     *
     * @return string
     */
    public function getVrfName()
    {
        return $this->container['vrf_name'];
    }

    /**
     * Sets vrf_name
     *
     * @param string $vrf_name vrf_name
     *
     * @return $this
     */
    public function setVrfName($vrf_name)
    {
        $this->container['vrf_name'] = $vrf_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


