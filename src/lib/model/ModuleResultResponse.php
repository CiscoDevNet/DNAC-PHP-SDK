<?php
/**
 * ModuleResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ModuleResultResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModuleResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModuleResult_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assembly_number' => 'string',
        'assembly_revision' => 'string',
        'attribute_info' => 'object',
        'containment_entity' => 'string',
        'description' => 'string',
        'entity_physical_index' => 'string',
        'id' => 'string',
        'is_field_replaceable' => 'string',
        'is_reporting_alarms_allowed' => 'string',
        'manufacturer' => 'string',
        'module_index' => 'int',
        'name' => 'string',
        'operational_state_code' => 'string',
        'part_number' => 'string',
        'serial_number' => 'string',
        'vendor_equipment_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assembly_number' => null,
        'assembly_revision' => null,
        'attribute_info' => null,
        'containment_entity' => null,
        'description' => null,
        'entity_physical_index' => null,
        'id' => null,
        'is_field_replaceable' => null,
        'is_reporting_alarms_allowed' => null,
        'manufacturer' => null,
        'module_index' => null,
        'name' => null,
        'operational_state_code' => null,
        'part_number' => null,
        'serial_number' => null,
        'vendor_equipment_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assembly_number' => 'assemblyNumber',
        'assembly_revision' => 'assemblyRevision',
        'attribute_info' => 'attributeInfo',
        'containment_entity' => 'containmentEntity',
        'description' => 'description',
        'entity_physical_index' => 'entityPhysicalIndex',
        'id' => 'id',
        'is_field_replaceable' => 'isFieldReplaceable',
        'is_reporting_alarms_allowed' => 'isReportingAlarmsAllowed',
        'manufacturer' => 'manufacturer',
        'module_index' => 'moduleIndex',
        'name' => 'name',
        'operational_state_code' => 'operationalStateCode',
        'part_number' => 'partNumber',
        'serial_number' => 'serialNumber',
        'vendor_equipment_type' => 'vendorEquipmentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assembly_number' => 'setAssemblyNumber',
        'assembly_revision' => 'setAssemblyRevision',
        'attribute_info' => 'setAttributeInfo',
        'containment_entity' => 'setContainmentEntity',
        'description' => 'setDescription',
        'entity_physical_index' => 'setEntityPhysicalIndex',
        'id' => 'setId',
        'is_field_replaceable' => 'setIsFieldReplaceable',
        'is_reporting_alarms_allowed' => 'setIsReportingAlarmsAllowed',
        'manufacturer' => 'setManufacturer',
        'module_index' => 'setModuleIndex',
        'name' => 'setName',
        'operational_state_code' => 'setOperationalStateCode',
        'part_number' => 'setPartNumber',
        'serial_number' => 'setSerialNumber',
        'vendor_equipment_type' => 'setVendorEquipmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assembly_number' => 'getAssemblyNumber',
        'assembly_revision' => 'getAssemblyRevision',
        'attribute_info' => 'getAttributeInfo',
        'containment_entity' => 'getContainmentEntity',
        'description' => 'getDescription',
        'entity_physical_index' => 'getEntityPhysicalIndex',
        'id' => 'getId',
        'is_field_replaceable' => 'getIsFieldReplaceable',
        'is_reporting_alarms_allowed' => 'getIsReportingAlarmsAllowed',
        'manufacturer' => 'getManufacturer',
        'module_index' => 'getModuleIndex',
        'name' => 'getName',
        'operational_state_code' => 'getOperationalStateCode',
        'part_number' => 'getPartNumber',
        'serial_number' => 'getSerialNumber',
        'vendor_equipment_type' => 'getVendorEquipmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IS_FIELD_REPLACEABLE_UNKNOWN = 'UNKNOWN';
    const IS_FIELD_REPLACEABLE_TRUE = 'TRUE';
    const IS_FIELD_REPLACEABLE_FALSE = 'FALSE';
    const IS_FIELD_REPLACEABLE_NOT_APPLICABLE = 'NOT_APPLICABLE';
    const IS_REPORTING_ALARMS_ALLOWED_UNKNOWN = 'UNKNOWN';
    const IS_REPORTING_ALARMS_ALLOWED_TRUE = 'TRUE';
    const IS_REPORTING_ALARMS_ALLOWED_FALSE = 'FALSE';
    const IS_REPORTING_ALARMS_ALLOWED_NOT_APPLICABLE = 'NOT_APPLICABLE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsFieldReplaceableAllowableValues()
    {
        return [
            self::IS_FIELD_REPLACEABLE_UNKNOWN,
            self::IS_FIELD_REPLACEABLE_TRUE,
            self::IS_FIELD_REPLACEABLE_FALSE,
            self::IS_FIELD_REPLACEABLE_NOT_APPLICABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsReportingAlarmsAllowedAllowableValues()
    {
        return [
            self::IS_REPORTING_ALARMS_ALLOWED_UNKNOWN,
            self::IS_REPORTING_ALARMS_ALLOWED_TRUE,
            self::IS_REPORTING_ALARMS_ALLOWED_FALSE,
            self::IS_REPORTING_ALARMS_ALLOWED_NOT_APPLICABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assembly_number'] = isset($data['assembly_number']) ? $data['assembly_number'] : null;
        $this->container['assembly_revision'] = isset($data['assembly_revision']) ? $data['assembly_revision'] : null;
        $this->container['attribute_info'] = isset($data['attribute_info']) ? $data['attribute_info'] : null;
        $this->container['containment_entity'] = isset($data['containment_entity']) ? $data['containment_entity'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['entity_physical_index'] = isset($data['entity_physical_index']) ? $data['entity_physical_index'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_field_replaceable'] = isset($data['is_field_replaceable']) ? $data['is_field_replaceable'] : null;
        $this->container['is_reporting_alarms_allowed'] = isset($data['is_reporting_alarms_allowed']) ? $data['is_reporting_alarms_allowed'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['module_index'] = isset($data['module_index']) ? $data['module_index'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operational_state_code'] = isset($data['operational_state_code']) ? $data['operational_state_code'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['vendor_equipment_type'] = isset($data['vendor_equipment_type']) ? $data['vendor_equipment_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsFieldReplaceableAllowableValues();
        if (!in_array($this->container['is_field_replaceable'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'is_field_replaceable', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsReportingAlarmsAllowedAllowableValues();
        if (!in_array($this->container['is_reporting_alarms_allowed'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'is_reporting_alarms_allowed', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getIsFieldReplaceableAllowableValues();
        if (!in_array($this->container['is_field_replaceable'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getIsReportingAlarmsAllowedAllowableValues();
        if (!in_array($this->container['is_reporting_alarms_allowed'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets assembly_number
     *
     * @return string
     */
    public function getAssemblyNumber()
    {
        return $this->container['assembly_number'];
    }

    /**
     * Sets assembly_number
     *
     * @param string $assembly_number assembly_number
     *
     * @return $this
     */
    public function setAssemblyNumber($assembly_number)
    {
        $this->container['assembly_number'] = $assembly_number;

        return $this;
    }

    /**
     * Gets assembly_revision
     *
     * @return string
     */
    public function getAssemblyRevision()
    {
        return $this->container['assembly_revision'];
    }

    /**
     * Sets assembly_revision
     *
     * @param string $assembly_revision assembly_revision
     *
     * @return $this
     */
    public function setAssemblyRevision($assembly_revision)
    {
        $this->container['assembly_revision'] = $assembly_revision;

        return $this;
    }

    /**
     * Gets attribute_info
     *
     * @return object
     */
    public function getAttributeInfo()
    {
        return $this->container['attribute_info'];
    }

    /**
     * Sets attribute_info
     *
     * @param object $attribute_info attribute_info
     *
     * @return $this
     */
    public function setAttributeInfo($attribute_info)
    {
        $this->container['attribute_info'] = $attribute_info;

        return $this;
    }

    /**
     * Gets containment_entity
     *
     * @return string
     */
    public function getContainmentEntity()
    {
        return $this->container['containment_entity'];
    }

    /**
     * Sets containment_entity
     *
     * @param string $containment_entity containment_entity
     *
     * @return $this
     */
    public function setContainmentEntity($containment_entity)
    {
        $this->container['containment_entity'] = $containment_entity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entity_physical_index
     *
     * @return string
     */
    public function getEntityPhysicalIndex()
    {
        return $this->container['entity_physical_index'];
    }

    /**
     * Sets entity_physical_index
     *
     * @param string $entity_physical_index entity_physical_index
     *
     * @return $this
     */
    public function setEntityPhysicalIndex($entity_physical_index)
    {
        $this->container['entity_physical_index'] = $entity_physical_index;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_field_replaceable
     *
     * @return string
     */
    public function getIsFieldReplaceable()
    {
        return $this->container['is_field_replaceable'];
    }

    /**
     * Sets is_field_replaceable
     *
     * @param string $is_field_replaceable is_field_replaceable
     *
     * @return $this
     */
    public function setIsFieldReplaceable($is_field_replaceable)
    {
        $allowedValues = $this->getIsFieldReplaceableAllowableValues();
        if (!is_null($is_field_replaceable) && !in_array($is_field_replaceable, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'is_field_replaceable', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_field_replaceable'] = $is_field_replaceable;

        return $this;
    }

    /**
     * Gets is_reporting_alarms_allowed
     *
     * @return string
     */
    public function getIsReportingAlarmsAllowed()
    {
        return $this->container['is_reporting_alarms_allowed'];
    }

    /**
     * Sets is_reporting_alarms_allowed
     *
     * @param string $is_reporting_alarms_allowed is_reporting_alarms_allowed
     *
     * @return $this
     */
    public function setIsReportingAlarmsAllowed($is_reporting_alarms_allowed)
    {
        $allowedValues = $this->getIsReportingAlarmsAllowedAllowableValues();
        if (!is_null($is_reporting_alarms_allowed) && !in_array($is_reporting_alarms_allowed, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'is_reporting_alarms_allowed', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_reporting_alarms_allowed'] = $is_reporting_alarms_allowed;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets module_index
     *
     * @return int
     */
    public function getModuleIndex()
    {
        return $this->container['module_index'];
    }

    /**
     * Sets module_index
     *
     * @param int $module_index module_index
     *
     * @return $this
     */
    public function setModuleIndex($module_index)
    {
        $this->container['module_index'] = $module_index;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operational_state_code
     *
     * @return string
     */
    public function getOperationalStateCode()
    {
        return $this->container['operational_state_code'];
    }

    /**
     * Sets operational_state_code
     *
     * @param string $operational_state_code operational_state_code
     *
     * @return $this
     */
    public function setOperationalStateCode($operational_state_code)
    {
        $this->container['operational_state_code'] = $operational_state_code;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string $part_number part_number
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets vendor_equipment_type
     *
     * @return string
     */
    public function getVendorEquipmentType()
    {
        return $this->container['vendor_equipment_type'];
    }

    /**
     * Sets vendor_equipment_type
     *
     * @param string $vendor_equipment_type vendor_equipment_type
     *
     * @return $this
     */
    public function setVendorEquipmentType($vendor_equipment_type)
    {
        $this->container['vendor_equipment_type'] = $vendor_equipment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


