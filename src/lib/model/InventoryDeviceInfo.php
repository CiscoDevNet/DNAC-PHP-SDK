<?php
/**
 * InventoryDeviceInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * InventoryDeviceInfo Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryDeviceInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryDeviceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cli_transport' => 'string',
        'compute_device' => 'bool',
        'enable_password' => 'string',
        'extended_discovery_info' => 'string',
        'http_password' => 'string',
        'http_port' => 'string',
        'http_secure' => 'bool',
        'http_user_name' => 'string',
        'ip_address' => 'string[]',
        'meraki_org_id' => 'string[]',
        'netconf_port' => 'string',
        'password' => 'string',
        'serial_number' => 'string',
        'snmp_auth_passphrase' => 'string',
        'snmp_auth_protocol' => 'string',
        'snmp_mode' => 'string',
        'snmp_priv_passphrase' => 'string',
        'snmp_priv_protocol' => 'string',
        'snmp_ro_community' => 'string',
        'snmp_rw_community' => 'string',
        'snmp_retry' => 'int',
        'snmp_timeout' => 'int',
        'snmp_user_name' => 'string',
        'snmp_version' => 'string',
        'type' => 'string',
        'update_mgmt_i_paddress_list' => '\cisco\com\dnac\v1\api\client\model\InventoryDeviceInfoUpdateMgmtIPaddressList[]',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cli_transport' => null,
        'compute_device' => null,
        'enable_password' => null,
        'extended_discovery_info' => null,
        'http_password' => null,
        'http_port' => null,
        'http_secure' => null,
        'http_user_name' => null,
        'ip_address' => null,
        'meraki_org_id' => null,
        'netconf_port' => null,
        'password' => null,
        'serial_number' => null,
        'snmp_auth_passphrase' => null,
        'snmp_auth_protocol' => null,
        'snmp_mode' => null,
        'snmp_priv_passphrase' => null,
        'snmp_priv_protocol' => null,
        'snmp_ro_community' => null,
        'snmp_rw_community' => null,
        'snmp_retry' => null,
        'snmp_timeout' => null,
        'snmp_user_name' => null,
        'snmp_version' => null,
        'type' => null,
        'update_mgmt_i_paddress_list' => null,
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cli_transport' => 'cliTransport',
        'compute_device' => 'computeDevice',
        'enable_password' => 'enablePassword',
        'extended_discovery_info' => 'extendedDiscoveryInfo',
        'http_password' => 'httpPassword',
        'http_port' => 'httpPort',
        'http_secure' => 'httpSecure',
        'http_user_name' => 'httpUserName',
        'ip_address' => 'ipAddress',
        'meraki_org_id' => 'merakiOrgId',
        'netconf_port' => 'netconfPort',
        'password' => 'password',
        'serial_number' => 'serialNumber',
        'snmp_auth_passphrase' => 'snmpAuthPassphrase',
        'snmp_auth_protocol' => 'snmpAuthProtocol',
        'snmp_mode' => 'snmpMode',
        'snmp_priv_passphrase' => 'snmpPrivPassphrase',
        'snmp_priv_protocol' => 'snmpPrivProtocol',
        'snmp_ro_community' => 'snmpROCommunity',
        'snmp_rw_community' => 'snmpRWCommunity',
        'snmp_retry' => 'snmpRetry',
        'snmp_timeout' => 'snmpTimeout',
        'snmp_user_name' => 'snmpUserName',
        'snmp_version' => 'snmpVersion',
        'type' => 'type',
        'update_mgmt_i_paddress_list' => 'updateMgmtIPaddressList',
        'user_name' => 'userName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cli_transport' => 'setCliTransport',
        'compute_device' => 'setComputeDevice',
        'enable_password' => 'setEnablePassword',
        'extended_discovery_info' => 'setExtendedDiscoveryInfo',
        'http_password' => 'setHttpPassword',
        'http_port' => 'setHttpPort',
        'http_secure' => 'setHttpSecure',
        'http_user_name' => 'setHttpUserName',
        'ip_address' => 'setIpAddress',
        'meraki_org_id' => 'setMerakiOrgId',
        'netconf_port' => 'setNetconfPort',
        'password' => 'setPassword',
        'serial_number' => 'setSerialNumber',
        'snmp_auth_passphrase' => 'setSnmpAuthPassphrase',
        'snmp_auth_protocol' => 'setSnmpAuthProtocol',
        'snmp_mode' => 'setSnmpMode',
        'snmp_priv_passphrase' => 'setSnmpPrivPassphrase',
        'snmp_priv_protocol' => 'setSnmpPrivProtocol',
        'snmp_ro_community' => 'setSnmpRoCommunity',
        'snmp_rw_community' => 'setSnmpRwCommunity',
        'snmp_retry' => 'setSnmpRetry',
        'snmp_timeout' => 'setSnmpTimeout',
        'snmp_user_name' => 'setSnmpUserName',
        'snmp_version' => 'setSnmpVersion',
        'type' => 'setType',
        'update_mgmt_i_paddress_list' => 'setUpdateMgmtIPaddressList',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cli_transport' => 'getCliTransport',
        'compute_device' => 'getComputeDevice',
        'enable_password' => 'getEnablePassword',
        'extended_discovery_info' => 'getExtendedDiscoveryInfo',
        'http_password' => 'getHttpPassword',
        'http_port' => 'getHttpPort',
        'http_secure' => 'getHttpSecure',
        'http_user_name' => 'getHttpUserName',
        'ip_address' => 'getIpAddress',
        'meraki_org_id' => 'getMerakiOrgId',
        'netconf_port' => 'getNetconfPort',
        'password' => 'getPassword',
        'serial_number' => 'getSerialNumber',
        'snmp_auth_passphrase' => 'getSnmpAuthPassphrase',
        'snmp_auth_protocol' => 'getSnmpAuthProtocol',
        'snmp_mode' => 'getSnmpMode',
        'snmp_priv_passphrase' => 'getSnmpPrivPassphrase',
        'snmp_priv_protocol' => 'getSnmpPrivProtocol',
        'snmp_ro_community' => 'getSnmpRoCommunity',
        'snmp_rw_community' => 'getSnmpRwCommunity',
        'snmp_retry' => 'getSnmpRetry',
        'snmp_timeout' => 'getSnmpTimeout',
        'snmp_user_name' => 'getSnmpUserName',
        'snmp_version' => 'getSnmpVersion',
        'type' => 'getType',
        'update_mgmt_i_paddress_list' => 'getUpdateMgmtIPaddressList',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_COMPUTE_DEVICE = 'COMPUTE_DEVICE';
    const TYPE_MERAKI_DASHBOARD = 'MERAKI_DASHBOARD';
    const TYPE_NETWORK_DEVICE = 'NETWORK_DEVICE';
    const TYPE_NODATACHANGE = 'NODATACHANGE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COMPUTE_DEVICE,
            self::TYPE_MERAKI_DASHBOARD,
            self::TYPE_NETWORK_DEVICE,
            self::TYPE_NODATACHANGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cli_transport'] = isset($data['cli_transport']) ? $data['cli_transport'] : null;
        $this->container['compute_device'] = isset($data['compute_device']) ? $data['compute_device'] : null;
        $this->container['enable_password'] = isset($data['enable_password']) ? $data['enable_password'] : null;
        $this->container['extended_discovery_info'] = isset($data['extended_discovery_info']) ? $data['extended_discovery_info'] : null;
        $this->container['http_password'] = isset($data['http_password']) ? $data['http_password'] : null;
        $this->container['http_port'] = isset($data['http_port']) ? $data['http_port'] : null;
        $this->container['http_secure'] = isset($data['http_secure']) ? $data['http_secure'] : null;
        $this->container['http_user_name'] = isset($data['http_user_name']) ? $data['http_user_name'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['meraki_org_id'] = isset($data['meraki_org_id']) ? $data['meraki_org_id'] : null;
        $this->container['netconf_port'] = isset($data['netconf_port']) ? $data['netconf_port'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['snmp_auth_passphrase'] = isset($data['snmp_auth_passphrase']) ? $data['snmp_auth_passphrase'] : null;
        $this->container['snmp_auth_protocol'] = isset($data['snmp_auth_protocol']) ? $data['snmp_auth_protocol'] : null;
        $this->container['snmp_mode'] = isset($data['snmp_mode']) ? $data['snmp_mode'] : null;
        $this->container['snmp_priv_passphrase'] = isset($data['snmp_priv_passphrase']) ? $data['snmp_priv_passphrase'] : null;
        $this->container['snmp_priv_protocol'] = isset($data['snmp_priv_protocol']) ? $data['snmp_priv_protocol'] : null;
        $this->container['snmp_ro_community'] = isset($data['snmp_ro_community']) ? $data['snmp_ro_community'] : null;
        $this->container['snmp_rw_community'] = isset($data['snmp_rw_community']) ? $data['snmp_rw_community'] : null;
        $this->container['snmp_retry'] = isset($data['snmp_retry']) ? $data['snmp_retry'] : null;
        $this->container['snmp_timeout'] = isset($data['snmp_timeout']) ? $data['snmp_timeout'] : null;
        $this->container['snmp_user_name'] = isset($data['snmp_user_name']) ? $data['snmp_user_name'] : null;
        $this->container['snmp_version'] = isset($data['snmp_version']) ? $data['snmp_version'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_mgmt_i_paddress_list'] = isset($data['update_mgmt_i_paddress_list']) ? $data['update_mgmt_i_paddress_list'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets cli_transport
     *
     * @return string
     */
    public function getCliTransport()
    {
        return $this->container['cli_transport'];
    }

    /**
     * Sets cli_transport
     *
     * @param string $cli_transport cli_transport
     *
     * @return $this
     */
    public function setCliTransport($cli_transport)
    {
        $this->container['cli_transport'] = $cli_transport;

        return $this;
    }

    /**
     * Gets compute_device
     *
     * @return bool
     */
    public function getComputeDevice()
    {
        return $this->container['compute_device'];
    }

    /**
     * Sets compute_device
     *
     * @param bool $compute_device compute_device
     *
     * @return $this
     */
    public function setComputeDevice($compute_device)
    {
        $this->container['compute_device'] = $compute_device;

        return $this;
    }

    /**
     * Gets enable_password
     *
     * @return string
     */
    public function getEnablePassword()
    {
        return $this->container['enable_password'];
    }

    /**
     * Sets enable_password
     *
     * @param string $enable_password enable_password
     *
     * @return $this
     */
    public function setEnablePassword($enable_password)
    {
        $this->container['enable_password'] = $enable_password;

        return $this;
    }

    /**
     * Gets extended_discovery_info
     *
     * @return string
     */
    public function getExtendedDiscoveryInfo()
    {
        return $this->container['extended_discovery_info'];
    }

    /**
     * Sets extended_discovery_info
     *
     * @param string $extended_discovery_info extended_discovery_info
     *
     * @return $this
     */
    public function setExtendedDiscoveryInfo($extended_discovery_info)
    {
        $this->container['extended_discovery_info'] = $extended_discovery_info;

        return $this;
    }

    /**
     * Gets http_password
     *
     * @return string
     */
    public function getHttpPassword()
    {
        return $this->container['http_password'];
    }

    /**
     * Sets http_password
     *
     * @param string $http_password http_password
     *
     * @return $this
     */
    public function setHttpPassword($http_password)
    {
        $this->container['http_password'] = $http_password;

        return $this;
    }

    /**
     * Gets http_port
     *
     * @return string
     */
    public function getHttpPort()
    {
        return $this->container['http_port'];
    }

    /**
     * Sets http_port
     *
     * @param string $http_port http_port
     *
     * @return $this
     */
    public function setHttpPort($http_port)
    {
        $this->container['http_port'] = $http_port;

        return $this;
    }

    /**
     * Gets http_secure
     *
     * @return bool
     */
    public function getHttpSecure()
    {
        return $this->container['http_secure'];
    }

    /**
     * Sets http_secure
     *
     * @param bool $http_secure http_secure
     *
     * @return $this
     */
    public function setHttpSecure($http_secure)
    {
        $this->container['http_secure'] = $http_secure;

        return $this;
    }

    /**
     * Gets http_user_name
     *
     * @return string
     */
    public function getHttpUserName()
    {
        return $this->container['http_user_name'];
    }

    /**
     * Sets http_user_name
     *
     * @param string $http_user_name http_user_name
     *
     * @return $this
     */
    public function setHttpUserName($http_user_name)
    {
        $this->container['http_user_name'] = $http_user_name;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string[]
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string[] $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets meraki_org_id
     *
     * @return string[]
     */
    public function getMerakiOrgId()
    {
        return $this->container['meraki_org_id'];
    }

    /**
     * Sets meraki_org_id
     *
     * @param string[] $meraki_org_id meraki_org_id
     *
     * @return $this
     */
    public function setMerakiOrgId($meraki_org_id)
    {
        $this->container['meraki_org_id'] = $meraki_org_id;

        return $this;
    }

    /**
     * Gets netconf_port
     *
     * @return string
     */
    public function getNetconfPort()
    {
        return $this->container['netconf_port'];
    }

    /**
     * Sets netconf_port
     *
     * @param string $netconf_port netconf_port
     *
     * @return $this
     */
    public function setNetconfPort($netconf_port)
    {
        $this->container['netconf_port'] = $netconf_port;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets snmp_auth_passphrase
     *
     * @return string
     */
    public function getSnmpAuthPassphrase()
    {
        return $this->container['snmp_auth_passphrase'];
    }

    /**
     * Sets snmp_auth_passphrase
     *
     * @param string $snmp_auth_passphrase snmp_auth_passphrase
     *
     * @return $this
     */
    public function setSnmpAuthPassphrase($snmp_auth_passphrase)
    {
        $this->container['snmp_auth_passphrase'] = $snmp_auth_passphrase;

        return $this;
    }

    /**
     * Gets snmp_auth_protocol
     *
     * @return string
     */
    public function getSnmpAuthProtocol()
    {
        return $this->container['snmp_auth_protocol'];
    }

    /**
     * Sets snmp_auth_protocol
     *
     * @param string $snmp_auth_protocol snmp_auth_protocol
     *
     * @return $this
     */
    public function setSnmpAuthProtocol($snmp_auth_protocol)
    {
        $this->container['snmp_auth_protocol'] = $snmp_auth_protocol;

        return $this;
    }

    /**
     * Gets snmp_mode
     *
     * @return string
     */
    public function getSnmpMode()
    {
        return $this->container['snmp_mode'];
    }

    /**
     * Sets snmp_mode
     *
     * @param string $snmp_mode snmp_mode
     *
     * @return $this
     */
    public function setSnmpMode($snmp_mode)
    {
        $this->container['snmp_mode'] = $snmp_mode;

        return $this;
    }

    /**
     * Gets snmp_priv_passphrase
     *
     * @return string
     */
    public function getSnmpPrivPassphrase()
    {
        return $this->container['snmp_priv_passphrase'];
    }

    /**
     * Sets snmp_priv_passphrase
     *
     * @param string $snmp_priv_passphrase snmp_priv_passphrase
     *
     * @return $this
     */
    public function setSnmpPrivPassphrase($snmp_priv_passphrase)
    {
        $this->container['snmp_priv_passphrase'] = $snmp_priv_passphrase;

        return $this;
    }

    /**
     * Gets snmp_priv_protocol
     *
     * @return string
     */
    public function getSnmpPrivProtocol()
    {
        return $this->container['snmp_priv_protocol'];
    }

    /**
     * Sets snmp_priv_protocol
     *
     * @param string $snmp_priv_protocol snmp_priv_protocol
     *
     * @return $this
     */
    public function setSnmpPrivProtocol($snmp_priv_protocol)
    {
        $this->container['snmp_priv_protocol'] = $snmp_priv_protocol;

        return $this;
    }

    /**
     * Gets snmp_ro_community
     *
     * @return string
     */
    public function getSnmpRoCommunity()
    {
        return $this->container['snmp_ro_community'];
    }

    /**
     * Sets snmp_ro_community
     *
     * @param string $snmp_ro_community snmp_ro_community
     *
     * @return $this
     */
    public function setSnmpRoCommunity($snmp_ro_community)
    {
        $this->container['snmp_ro_community'] = $snmp_ro_community;

        return $this;
    }

    /**
     * Gets snmp_rw_community
     *
     * @return string
     */
    public function getSnmpRwCommunity()
    {
        return $this->container['snmp_rw_community'];
    }

    /**
     * Sets snmp_rw_community
     *
     * @param string $snmp_rw_community snmp_rw_community
     *
     * @return $this
     */
    public function setSnmpRwCommunity($snmp_rw_community)
    {
        $this->container['snmp_rw_community'] = $snmp_rw_community;

        return $this;
    }

    /**
     * Gets snmp_retry
     *
     * @return int
     */
    public function getSnmpRetry()
    {
        return $this->container['snmp_retry'];
    }

    /**
     * Sets snmp_retry
     *
     * @param int $snmp_retry snmp_retry
     *
     * @return $this
     */
    public function setSnmpRetry($snmp_retry)
    {
        $this->container['snmp_retry'] = $snmp_retry;

        return $this;
    }

    /**
     * Gets snmp_timeout
     *
     * @return int
     */
    public function getSnmpTimeout()
    {
        return $this->container['snmp_timeout'];
    }

    /**
     * Sets snmp_timeout
     *
     * @param int $snmp_timeout snmp_timeout
     *
     * @return $this
     */
    public function setSnmpTimeout($snmp_timeout)
    {
        $this->container['snmp_timeout'] = $snmp_timeout;

        return $this;
    }

    /**
     * Gets snmp_user_name
     *
     * @return string
     */
    public function getSnmpUserName()
    {
        return $this->container['snmp_user_name'];
    }

    /**
     * Sets snmp_user_name
     *
     * @param string $snmp_user_name snmp_user_name
     *
     * @return $this
     */
    public function setSnmpUserName($snmp_user_name)
    {
        $this->container['snmp_user_name'] = $snmp_user_name;

        return $this;
    }

    /**
     * Gets snmp_version
     *
     * @return string
     */
    public function getSnmpVersion()
    {
        return $this->container['snmp_version'];
    }

    /**
     * Sets snmp_version
     *
     * @param string $snmp_version snmp_version
     *
     * @return $this
     */
    public function setSnmpVersion($snmp_version)
    {
        $this->container['snmp_version'] = $snmp_version;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_mgmt_i_paddress_list
     *
     * @return \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfoUpdateMgmtIPaddressList[]
     */
    public function getUpdateMgmtIPaddressList()
    {
        return $this->container['update_mgmt_i_paddress_list'];
    }

    /**
     * Sets update_mgmt_i_paddress_list
     *
     * @param \cisco\com\dnac\v1\api\client\model\InventoryDeviceInfoUpdateMgmtIPaddressList[] $update_mgmt_i_paddress_list update_mgmt_i_paddress_list
     *
     * @return $this
     */
    public function setUpdateMgmtIPaddressList($update_mgmt_i_paddress_list)
    {
        $this->container['update_mgmt_i_paddress_list'] = $update_mgmt_i_paddress_list;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


