<?php
/**
 * PathResponseResultResponseEgressPhysicalInterfaceQosStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponseEgressPhysicalInterfaceQosStatistics Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponseEgressPhysicalInterfaceQosStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_egressPhysicalInterface_qosStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_map_name' => 'string',
        'drop_rate' => 'int',
        'num_bytes' => 'int',
        'num_packets' => 'int',
        'offered_rate' => 'int',
        'queue_bandwidthbps' => 'string',
        'queue_depth' => 'int',
        'queue_no_buffer_drops' => 'int',
        'queue_total_drops' => 'int',
        'refreshed_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_map_name' => null,
        'drop_rate' => null,
        'num_bytes' => null,
        'num_packets' => null,
        'offered_rate' => null,
        'queue_bandwidthbps' => null,
        'queue_depth' => null,
        'queue_no_buffer_drops' => null,
        'queue_total_drops' => null,
        'refreshed_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_map_name' => 'classMapName',
        'drop_rate' => 'dropRate',
        'num_bytes' => 'numBytes',
        'num_packets' => 'numPackets',
        'offered_rate' => 'offeredRate',
        'queue_bandwidthbps' => 'queueBandwidthbps',
        'queue_depth' => 'queueDepth',
        'queue_no_buffer_drops' => 'queueNoBufferDrops',
        'queue_total_drops' => 'queueTotalDrops',
        'refreshed_at' => 'refreshedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_map_name' => 'setClassMapName',
        'drop_rate' => 'setDropRate',
        'num_bytes' => 'setNumBytes',
        'num_packets' => 'setNumPackets',
        'offered_rate' => 'setOfferedRate',
        'queue_bandwidthbps' => 'setQueueBandwidthbps',
        'queue_depth' => 'setQueueDepth',
        'queue_no_buffer_drops' => 'setQueueNoBufferDrops',
        'queue_total_drops' => 'setQueueTotalDrops',
        'refreshed_at' => 'setRefreshedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_map_name' => 'getClassMapName',
        'drop_rate' => 'getDropRate',
        'num_bytes' => 'getNumBytes',
        'num_packets' => 'getNumPackets',
        'offered_rate' => 'getOfferedRate',
        'queue_bandwidthbps' => 'getQueueBandwidthbps',
        'queue_depth' => 'getQueueDepth',
        'queue_no_buffer_drops' => 'getQueueNoBufferDrops',
        'queue_total_drops' => 'getQueueTotalDrops',
        'refreshed_at' => 'getRefreshedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_map_name'] = isset($data['class_map_name']) ? $data['class_map_name'] : null;
        $this->container['drop_rate'] = isset($data['drop_rate']) ? $data['drop_rate'] : null;
        $this->container['num_bytes'] = isset($data['num_bytes']) ? $data['num_bytes'] : null;
        $this->container['num_packets'] = isset($data['num_packets']) ? $data['num_packets'] : null;
        $this->container['offered_rate'] = isset($data['offered_rate']) ? $data['offered_rate'] : null;
        $this->container['queue_bandwidthbps'] = isset($data['queue_bandwidthbps']) ? $data['queue_bandwidthbps'] : null;
        $this->container['queue_depth'] = isset($data['queue_depth']) ? $data['queue_depth'] : null;
        $this->container['queue_no_buffer_drops'] = isset($data['queue_no_buffer_drops']) ? $data['queue_no_buffer_drops'] : null;
        $this->container['queue_total_drops'] = isset($data['queue_total_drops']) ? $data['queue_total_drops'] : null;
        $this->container['refreshed_at'] = isset($data['refreshed_at']) ? $data['refreshed_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets class_map_name
     *
     * @return string
     */
    public function getClassMapName()
    {
        return $this->container['class_map_name'];
    }

    /**
     * Sets class_map_name
     *
     * @param string $class_map_name class_map_name
     *
     * @return $this
     */
    public function setClassMapName($class_map_name)
    {
        $this->container['class_map_name'] = $class_map_name;

        return $this;
    }

    /**
     * Gets drop_rate
     *
     * @return int
     */
    public function getDropRate()
    {
        return $this->container['drop_rate'];
    }

    /**
     * Sets drop_rate
     *
     * @param int $drop_rate drop_rate
     *
     * @return $this
     */
    public function setDropRate($drop_rate)
    {
        $this->container['drop_rate'] = $drop_rate;

        return $this;
    }

    /**
     * Gets num_bytes
     *
     * @return int
     */
    public function getNumBytes()
    {
        return $this->container['num_bytes'];
    }

    /**
     * Sets num_bytes
     *
     * @param int $num_bytes num_bytes
     *
     * @return $this
     */
    public function setNumBytes($num_bytes)
    {
        $this->container['num_bytes'] = $num_bytes;

        return $this;
    }

    /**
     * Gets num_packets
     *
     * @return int
     */
    public function getNumPackets()
    {
        return $this->container['num_packets'];
    }

    /**
     * Sets num_packets
     *
     * @param int $num_packets num_packets
     *
     * @return $this
     */
    public function setNumPackets($num_packets)
    {
        $this->container['num_packets'] = $num_packets;

        return $this;
    }

    /**
     * Gets offered_rate
     *
     * @return int
     */
    public function getOfferedRate()
    {
        return $this->container['offered_rate'];
    }

    /**
     * Sets offered_rate
     *
     * @param int $offered_rate offered_rate
     *
     * @return $this
     */
    public function setOfferedRate($offered_rate)
    {
        $this->container['offered_rate'] = $offered_rate;

        return $this;
    }

    /**
     * Gets queue_bandwidthbps
     *
     * @return string
     */
    public function getQueueBandwidthbps()
    {
        return $this->container['queue_bandwidthbps'];
    }

    /**
     * Sets queue_bandwidthbps
     *
     * @param string $queue_bandwidthbps queue_bandwidthbps
     *
     * @return $this
     */
    public function setQueueBandwidthbps($queue_bandwidthbps)
    {
        $this->container['queue_bandwidthbps'] = $queue_bandwidthbps;

        return $this;
    }

    /**
     * Gets queue_depth
     *
     * @return int
     */
    public function getQueueDepth()
    {
        return $this->container['queue_depth'];
    }

    /**
     * Sets queue_depth
     *
     * @param int $queue_depth queue_depth
     *
     * @return $this
     */
    public function setQueueDepth($queue_depth)
    {
        $this->container['queue_depth'] = $queue_depth;

        return $this;
    }

    /**
     * Gets queue_no_buffer_drops
     *
     * @return int
     */
    public function getQueueNoBufferDrops()
    {
        return $this->container['queue_no_buffer_drops'];
    }

    /**
     * Sets queue_no_buffer_drops
     *
     * @param int $queue_no_buffer_drops queue_no_buffer_drops
     *
     * @return $this
     */
    public function setQueueNoBufferDrops($queue_no_buffer_drops)
    {
        $this->container['queue_no_buffer_drops'] = $queue_no_buffer_drops;

        return $this;
    }

    /**
     * Gets queue_total_drops
     *
     * @return int
     */
    public function getQueueTotalDrops()
    {
        return $this->container['queue_total_drops'];
    }

    /**
     * Sets queue_total_drops
     *
     * @param int $queue_total_drops queue_total_drops
     *
     * @return $this
     */
    public function setQueueTotalDrops($queue_total_drops)
    {
        $this->container['queue_total_drops'] = $queue_total_drops;

        return $this;
    }

    /**
     * Gets refreshed_at
     *
     * @return int
     */
    public function getRefreshedAt()
    {
        return $this->container['refreshed_at'];
    }

    /**
     * Sets refreshed_at
     *
     * @param int $refreshed_at refreshed_at
     *
     * @return $this
     */
    public function setRefreshedAt($refreshed_at)
    {
        $this->container['refreshed_at'] = $refreshed_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


