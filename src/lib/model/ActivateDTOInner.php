<?php
/**
 * ActivateDTOInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ActivateDTOInner Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivateDTOInner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivateDTO_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activate_lower_image_version' => 'bool',
        'device_upgrade_mode' => 'string',
        'device_uuid' => 'string',
        'distribute_if_needed' => 'bool',
        'image_uuid_list' => 'string[]',
        'smu_image_uuid_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activate_lower_image_version' => null,
        'device_upgrade_mode' => null,
        'device_uuid' => null,
        'distribute_if_needed' => null,
        'image_uuid_list' => null,
        'smu_image_uuid_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activate_lower_image_version' => 'activateLowerImageVersion',
        'device_upgrade_mode' => 'deviceUpgradeMode',
        'device_uuid' => 'deviceUuid',
        'distribute_if_needed' => 'distributeIfNeeded',
        'image_uuid_list' => 'imageUuidList',
        'smu_image_uuid_list' => 'smuImageUuidList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activate_lower_image_version' => 'setActivateLowerImageVersion',
        'device_upgrade_mode' => 'setDeviceUpgradeMode',
        'device_uuid' => 'setDeviceUuid',
        'distribute_if_needed' => 'setDistributeIfNeeded',
        'image_uuid_list' => 'setImageUuidList',
        'smu_image_uuid_list' => 'setSmuImageUuidList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activate_lower_image_version' => 'getActivateLowerImageVersion',
        'device_upgrade_mode' => 'getDeviceUpgradeMode',
        'device_uuid' => 'getDeviceUuid',
        'distribute_if_needed' => 'getDistributeIfNeeded',
        'image_uuid_list' => 'getImageUuidList',
        'smu_image_uuid_list' => 'getSmuImageUuidList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activate_lower_image_version'] = isset($data['activate_lower_image_version']) ? $data['activate_lower_image_version'] : null;
        $this->container['device_upgrade_mode'] = isset($data['device_upgrade_mode']) ? $data['device_upgrade_mode'] : null;
        $this->container['device_uuid'] = isset($data['device_uuid']) ? $data['device_uuid'] : null;
        $this->container['distribute_if_needed'] = isset($data['distribute_if_needed']) ? $data['distribute_if_needed'] : null;
        $this->container['image_uuid_list'] = isset($data['image_uuid_list']) ? $data['image_uuid_list'] : null;
        $this->container['smu_image_uuid_list'] = isset($data['smu_image_uuid_list']) ? $data['smu_image_uuid_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets activate_lower_image_version
     *
     * @return bool
     */
    public function getActivateLowerImageVersion()
    {
        return $this->container['activate_lower_image_version'];
    }

    /**
     * Sets activate_lower_image_version
     *
     * @param bool $activate_lower_image_version activate_lower_image_version
     *
     * @return $this
     */
    public function setActivateLowerImageVersion($activate_lower_image_version)
    {
        $this->container['activate_lower_image_version'] = $activate_lower_image_version;

        return $this;
    }

    /**
     * Gets device_upgrade_mode
     *
     * @return string
     */
    public function getDeviceUpgradeMode()
    {
        return $this->container['device_upgrade_mode'];
    }

    /**
     * Sets device_upgrade_mode
     *
     * @param string $device_upgrade_mode device_upgrade_mode
     *
     * @return $this
     */
    public function setDeviceUpgradeMode($device_upgrade_mode)
    {
        $this->container['device_upgrade_mode'] = $device_upgrade_mode;

        return $this;
    }

    /**
     * Gets device_uuid
     *
     * @return string
     */
    public function getDeviceUuid()
    {
        return $this->container['device_uuid'];
    }

    /**
     * Sets device_uuid
     *
     * @param string $device_uuid device_uuid
     *
     * @return $this
     */
    public function setDeviceUuid($device_uuid)
    {
        $this->container['device_uuid'] = $device_uuid;

        return $this;
    }

    /**
     * Gets distribute_if_needed
     *
     * @return bool
     */
    public function getDistributeIfNeeded()
    {
        return $this->container['distribute_if_needed'];
    }

    /**
     * Sets distribute_if_needed
     *
     * @param bool $distribute_if_needed distribute_if_needed
     *
     * @return $this
     */
    public function setDistributeIfNeeded($distribute_if_needed)
    {
        $this->container['distribute_if_needed'] = $distribute_if_needed;

        return $this;
    }

    /**
     * Gets image_uuid_list
     *
     * @return string[]
     */
    public function getImageUuidList()
    {
        return $this->container['image_uuid_list'];
    }

    /**
     * Sets image_uuid_list
     *
     * @param string[] $image_uuid_list image_uuid_list
     *
     * @return $this
     */
    public function setImageUuidList($image_uuid_list)
    {
        $this->container['image_uuid_list'] = $image_uuid_list;

        return $this;
    }

    /**
     * Gets smu_image_uuid_list
     *
     * @return string[]
     */
    public function getSmuImageUuidList()
    {
        return $this->container['smu_image_uuid_list'];
    }

    /**
     * Sets smu_image_uuid_list
     *
     * @param string[] $smu_image_uuid_list smu_image_uuid_list
     *
     * @return $this
     */
    public function setSmuImageUuidList($smu_image_uuid_list)
    {
        $this->container['smu_image_uuid_list'] = $smu_image_uuid_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


