<?php
/**
 * ClientDetailResponseResponseConnectionInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ClientDetailResponseResponseConnectionInfo Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientDetailResponseResponseConnectionInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientDetailResponse_response_connectionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'host_type' => 'string',
        'nw_device_name' => 'string',
        'nw_device_mac' => 'string',
        'protocol' => 'string',
        'band' => 'string',
        'spatial_stream' => 'string',
        'channel' => 'string',
        'channel_width' => 'string',
        'wmm' => 'string',
        'uapsd' => 'string',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'host_type' => null,
        'nw_device_name' => null,
        'nw_device_mac' => null,
        'protocol' => null,
        'band' => null,
        'spatial_stream' => null,
        'channel' => null,
        'channel_width' => null,
        'wmm' => null,
        'uapsd' => null,
        'timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_type' => 'hostType',
        'nw_device_name' => 'nwDeviceName',
        'nw_device_mac' => 'nwDeviceMac',
        'protocol' => 'protocol',
        'band' => 'band',
        'spatial_stream' => 'spatialStream',
        'channel' => 'channel',
        'channel_width' => 'channelWidth',
        'wmm' => 'wmm',
        'uapsd' => 'uapsd',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_type' => 'setHostType',
        'nw_device_name' => 'setNwDeviceName',
        'nw_device_mac' => 'setNwDeviceMac',
        'protocol' => 'setProtocol',
        'band' => 'setBand',
        'spatial_stream' => 'setSpatialStream',
        'channel' => 'setChannel',
        'channel_width' => 'setChannelWidth',
        'wmm' => 'setWmm',
        'uapsd' => 'setUapsd',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_type' => 'getHostType',
        'nw_device_name' => 'getNwDeviceName',
        'nw_device_mac' => 'getNwDeviceMac',
        'protocol' => 'getProtocol',
        'band' => 'getBand',
        'spatial_stream' => 'getSpatialStream',
        'channel' => 'getChannel',
        'channel_width' => 'getChannelWidth',
        'wmm' => 'getWmm',
        'uapsd' => 'getUapsd',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_type'] = isset($data['host_type']) ? $data['host_type'] : null;
        $this->container['nw_device_name'] = isset($data['nw_device_name']) ? $data['nw_device_name'] : null;
        $this->container['nw_device_mac'] = isset($data['nw_device_mac']) ? $data['nw_device_mac'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['band'] = isset($data['band']) ? $data['band'] : null;
        $this->container['spatial_stream'] = isset($data['spatial_stream']) ? $data['spatial_stream'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['channel_width'] = isset($data['channel_width']) ? $data['channel_width'] : null;
        $this->container['wmm'] = isset($data['wmm']) ? $data['wmm'] : null;
        $this->container['uapsd'] = isset($data['uapsd']) ? $data['uapsd'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets host_type
     *
     * @return string
     */
    public function getHostType()
    {
        return $this->container['host_type'];
    }

    /**
     * Sets host_type
     *
     * @param string $host_type host_type
     *
     * @return $this
     */
    public function setHostType($host_type)
    {
        $this->container['host_type'] = $host_type;

        return $this;
    }

    /**
     * Gets nw_device_name
     *
     * @return string
     */
    public function getNwDeviceName()
    {
        return $this->container['nw_device_name'];
    }

    /**
     * Sets nw_device_name
     *
     * @param string $nw_device_name nw_device_name
     *
     * @return $this
     */
    public function setNwDeviceName($nw_device_name)
    {
        $this->container['nw_device_name'] = $nw_device_name;

        return $this;
    }

    /**
     * Gets nw_device_mac
     *
     * @return string
     */
    public function getNwDeviceMac()
    {
        return $this->container['nw_device_mac'];
    }

    /**
     * Sets nw_device_mac
     *
     * @param string $nw_device_mac nw_device_mac
     *
     * @return $this
     */
    public function setNwDeviceMac($nw_device_mac)
    {
        $this->container['nw_device_mac'] = $nw_device_mac;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets band
     *
     * @return string
     */
    public function getBand()
    {
        return $this->container['band'];
    }

    /**
     * Sets band
     *
     * @param string $band band
     *
     * @return $this
     */
    public function setBand($band)
    {
        $this->container['band'] = $band;

        return $this;
    }

    /**
     * Gets spatial_stream
     *
     * @return string
     */
    public function getSpatialStream()
    {
        return $this->container['spatial_stream'];
    }

    /**
     * Sets spatial_stream
     *
     * @param string $spatial_stream spatial_stream
     *
     * @return $this
     */
    public function setSpatialStream($spatial_stream)
    {
        $this->container['spatial_stream'] = $spatial_stream;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_width
     *
     * @return string
     */
    public function getChannelWidth()
    {
        return $this->container['channel_width'];
    }

    /**
     * Sets channel_width
     *
     * @param string $channel_width channel_width
     *
     * @return $this
     */
    public function setChannelWidth($channel_width)
    {
        $this->container['channel_width'] = $channel_width;

        return $this;
    }

    /**
     * Gets wmm
     *
     * @return string
     */
    public function getWmm()
    {
        return $this->container['wmm'];
    }

    /**
     * Sets wmm
     *
     * @param string $wmm wmm
     *
     * @return $this
     */
    public function setWmm($wmm)
    {
        $this->container['wmm'] = $wmm;

        return $this;
    }

    /**
     * Gets uapsd
     *
     * @return string
     */
    public function getUapsd()
    {
        return $this->container['uapsd'];
    }

    /**
     * Sets uapsd
     *
     * @param string $uapsd uapsd
     *
     * @return $this
     */
    public function setUapsd($uapsd)
    {
        $this->container['uapsd'] = $uapsd;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


