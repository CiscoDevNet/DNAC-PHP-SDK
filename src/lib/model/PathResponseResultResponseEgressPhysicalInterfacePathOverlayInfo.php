<?php
/**
 * PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponseEgressPhysicalInterfacePathOverlayInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_egressPhysicalInterface_pathOverlayInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'control_plane' => 'string',
        'data_packet_encapsulation' => 'string',
        'dest_ip' => 'string',
        'dest_port' => 'string',
        'protocol' => 'string',
        'source_ip' => 'string',
        'source_port' => 'string',
        'vxlan_info' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceVxlanInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'control_plane' => null,
        'data_packet_encapsulation' => null,
        'dest_ip' => null,
        'dest_port' => null,
        'protocol' => null,
        'source_ip' => null,
        'source_port' => null,
        'vxlan_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'control_plane' => 'controlPlane',
        'data_packet_encapsulation' => 'dataPacketEncapsulation',
        'dest_ip' => 'destIp',
        'dest_port' => 'destPort',
        'protocol' => 'protocol',
        'source_ip' => 'sourceIp',
        'source_port' => 'sourcePort',
        'vxlan_info' => 'vxlanInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'control_plane' => 'setControlPlane',
        'data_packet_encapsulation' => 'setDataPacketEncapsulation',
        'dest_ip' => 'setDestIp',
        'dest_port' => 'setDestPort',
        'protocol' => 'setProtocol',
        'source_ip' => 'setSourceIp',
        'source_port' => 'setSourcePort',
        'vxlan_info' => 'setVxlanInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'control_plane' => 'getControlPlane',
        'data_packet_encapsulation' => 'getDataPacketEncapsulation',
        'dest_ip' => 'getDestIp',
        'dest_port' => 'getDestPort',
        'protocol' => 'getProtocol',
        'source_ip' => 'getSourceIp',
        'source_port' => 'getSourcePort',
        'vxlan_info' => 'getVxlanInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['control_plane'] = isset($data['control_plane']) ? $data['control_plane'] : null;
        $this->container['data_packet_encapsulation'] = isset($data['data_packet_encapsulation']) ? $data['data_packet_encapsulation'] : null;
        $this->container['dest_ip'] = isset($data['dest_ip']) ? $data['dest_ip'] : null;
        $this->container['dest_port'] = isset($data['dest_port']) ? $data['dest_port'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['source_ip'] = isset($data['source_ip']) ? $data['source_ip'] : null;
        $this->container['source_port'] = isset($data['source_port']) ? $data['source_port'] : null;
        $this->container['vxlan_info'] = isset($data['vxlan_info']) ? $data['vxlan_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets control_plane
     *
     * @return string
     */
    public function getControlPlane()
    {
        return $this->container['control_plane'];
    }

    /**
     * Sets control_plane
     *
     * @param string $control_plane control_plane
     *
     * @return $this
     */
    public function setControlPlane($control_plane)
    {
        $this->container['control_plane'] = $control_plane;

        return $this;
    }

    /**
     * Gets data_packet_encapsulation
     *
     * @return string
     */
    public function getDataPacketEncapsulation()
    {
        return $this->container['data_packet_encapsulation'];
    }

    /**
     * Sets data_packet_encapsulation
     *
     * @param string $data_packet_encapsulation data_packet_encapsulation
     *
     * @return $this
     */
    public function setDataPacketEncapsulation($data_packet_encapsulation)
    {
        $this->container['data_packet_encapsulation'] = $data_packet_encapsulation;

        return $this;
    }

    /**
     * Gets dest_ip
     *
     * @return string
     */
    public function getDestIp()
    {
        return $this->container['dest_ip'];
    }

    /**
     * Sets dest_ip
     *
     * @param string $dest_ip dest_ip
     *
     * @return $this
     */
    public function setDestIp($dest_ip)
    {
        $this->container['dest_ip'] = $dest_ip;

        return $this;
    }

    /**
     * Gets dest_port
     *
     * @return string
     */
    public function getDestPort()
    {
        return $this->container['dest_port'];
    }

    /**
     * Sets dest_port
     *
     * @param string $dest_port dest_port
     *
     * @return $this
     */
    public function setDestPort($dest_port)
    {
        $this->container['dest_port'] = $dest_port;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string $source_ip source_ip
     *
     * @return $this
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return string
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param string $source_port source_port
     *
     * @return $this
     */
    public function setSourcePort($source_port)
    {
        $this->container['source_port'] = $source_port;

        return $this;
    }

    /**
     * Gets vxlan_info
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceVxlanInfo
     */
    public function getVxlanInfo()
    {
        return $this->container['vxlan_info'];
    }

    /**
     * Sets vxlan_info
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceVxlanInfo $vxlan_info vxlan_info
     *
     * @return $this
     */
    public function setVxlanInfo($vxlan_info)
    {
        $this->container['vxlan_info'] = $vxlan_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


