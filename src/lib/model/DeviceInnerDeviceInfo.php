<?php
/**
 * DeviceInnerDeviceInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DeviceInnerDeviceInfo Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInnerDeviceInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device_inner_deviceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aaa_credentials' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials',
        'added_on' => 'int',
        'addn_mac_addrs' => 'string[]',
        'agent_type' => 'string',
        'auth_status' => 'string',
        'authenticated_sudi_serial_no' => 'string',
        'capabilities_supported' => 'string[]',
        'cm_state' => 'string',
        'description' => 'string',
        'device_sudi_serial_nos' => 'string[]',
        'device_type' => 'string',
        'features_supported' => 'string[]',
        'file_system_list' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoFileSystemList[]',
        'first_contact' => 'int',
        'hostname' => 'string',
        'http_headers' => '\cisco\com\dnac\v1\api\client\model\ResetRequestConfigParameters[]',
        'image_file' => 'string',
        'image_version' => 'string',
        'ip_interfaces' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoIpInterfaces[]',
        'last_contact' => 'int',
        'last_sync_time' => 'int',
        'last_update_on' => 'int',
        'location' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoLocation',
        'mac_address' => 'string',
        'mode' => 'string',
        'name' => 'string',
        'neighbor_links' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoNeighborLinks[]',
        'onb_state' => 'string',
        'pid' => 'string',
        'pnp_profile_list' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPnpProfileList[]',
        'pre_workflow_cli_ouputs' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPreWorkflowCliOuputs[]',
        'project_id' => 'string',
        'project_name' => 'string',
        'reload_requested' => 'bool',
        'serial_number' => 'string',
        'smart_account_id' => 'string',
        'source' => 'string',
        'stack' => 'bool',
        'stack_info' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfo',
        'state' => 'string',
        'sudi_required' => 'bool',
        'tags' => 'object',
        'user_sudi_serial_nos' => 'string[]',
        'virtual_account_id' => 'string',
        'workflow_id' => 'string',
        'workflow_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aaa_credentials' => null,
        'added_on' => null,
        'addn_mac_addrs' => null,
        'agent_type' => null,
        'auth_status' => null,
        'authenticated_sudi_serial_no' => null,
        'capabilities_supported' => null,
        'cm_state' => null,
        'description' => null,
        'device_sudi_serial_nos' => null,
        'device_type' => null,
        'features_supported' => null,
        'file_system_list' => null,
        'first_contact' => null,
        'hostname' => null,
        'http_headers' => null,
        'image_file' => null,
        'image_version' => null,
        'ip_interfaces' => null,
        'last_contact' => null,
        'last_sync_time' => null,
        'last_update_on' => null,
        'location' => null,
        'mac_address' => null,
        'mode' => null,
        'name' => null,
        'neighbor_links' => null,
        'onb_state' => null,
        'pid' => null,
        'pnp_profile_list' => null,
        'pre_workflow_cli_ouputs' => null,
        'project_id' => null,
        'project_name' => null,
        'reload_requested' => null,
        'serial_number' => null,
        'smart_account_id' => null,
        'source' => null,
        'stack' => null,
        'stack_info' => null,
        'state' => null,
        'sudi_required' => null,
        'tags' => null,
        'user_sudi_serial_nos' => null,
        'virtual_account_id' => null,
        'workflow_id' => null,
        'workflow_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aaa_credentials' => 'aaaCredentials',
        'added_on' => 'addedOn',
        'addn_mac_addrs' => 'addnMacAddrs',
        'agent_type' => 'agentType',
        'auth_status' => 'authStatus',
        'authenticated_sudi_serial_no' => 'authenticatedSudiSerialNo',
        'capabilities_supported' => 'capabilitiesSupported',
        'cm_state' => 'cmState',
        'description' => 'description',
        'device_sudi_serial_nos' => 'deviceSudiSerialNos',
        'device_type' => 'deviceType',
        'features_supported' => 'featuresSupported',
        'file_system_list' => 'fileSystemList',
        'first_contact' => 'firstContact',
        'hostname' => 'hostname',
        'http_headers' => 'httpHeaders',
        'image_file' => 'imageFile',
        'image_version' => 'imageVersion',
        'ip_interfaces' => 'ipInterfaces',
        'last_contact' => 'lastContact',
        'last_sync_time' => 'lastSyncTime',
        'last_update_on' => 'lastUpdateOn',
        'location' => 'location',
        'mac_address' => 'macAddress',
        'mode' => 'mode',
        'name' => 'name',
        'neighbor_links' => 'neighborLinks',
        'onb_state' => 'onbState',
        'pid' => 'pid',
        'pnp_profile_list' => 'pnpProfileList',
        'pre_workflow_cli_ouputs' => 'preWorkflowCliOuputs',
        'project_id' => 'projectId',
        'project_name' => 'projectName',
        'reload_requested' => 'reloadRequested',
        'serial_number' => 'serialNumber',
        'smart_account_id' => 'smartAccountId',
        'source' => 'source',
        'stack' => 'stack',
        'stack_info' => 'stackInfo',
        'state' => 'state',
        'sudi_required' => 'sudiRequired',
        'tags' => 'tags',
        'user_sudi_serial_nos' => 'userSudiSerialNos',
        'virtual_account_id' => 'virtualAccountId',
        'workflow_id' => 'workflowId',
        'workflow_name' => 'workflowName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aaa_credentials' => 'setAaaCredentials',
        'added_on' => 'setAddedOn',
        'addn_mac_addrs' => 'setAddnMacAddrs',
        'agent_type' => 'setAgentType',
        'auth_status' => 'setAuthStatus',
        'authenticated_sudi_serial_no' => 'setAuthenticatedSudiSerialNo',
        'capabilities_supported' => 'setCapabilitiesSupported',
        'cm_state' => 'setCmState',
        'description' => 'setDescription',
        'device_sudi_serial_nos' => 'setDeviceSudiSerialNos',
        'device_type' => 'setDeviceType',
        'features_supported' => 'setFeaturesSupported',
        'file_system_list' => 'setFileSystemList',
        'first_contact' => 'setFirstContact',
        'hostname' => 'setHostname',
        'http_headers' => 'setHttpHeaders',
        'image_file' => 'setImageFile',
        'image_version' => 'setImageVersion',
        'ip_interfaces' => 'setIpInterfaces',
        'last_contact' => 'setLastContact',
        'last_sync_time' => 'setLastSyncTime',
        'last_update_on' => 'setLastUpdateOn',
        'location' => 'setLocation',
        'mac_address' => 'setMacAddress',
        'mode' => 'setMode',
        'name' => 'setName',
        'neighbor_links' => 'setNeighborLinks',
        'onb_state' => 'setOnbState',
        'pid' => 'setPid',
        'pnp_profile_list' => 'setPnpProfileList',
        'pre_workflow_cli_ouputs' => 'setPreWorkflowCliOuputs',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'reload_requested' => 'setReloadRequested',
        'serial_number' => 'setSerialNumber',
        'smart_account_id' => 'setSmartAccountId',
        'source' => 'setSource',
        'stack' => 'setStack',
        'stack_info' => 'setStackInfo',
        'state' => 'setState',
        'sudi_required' => 'setSudiRequired',
        'tags' => 'setTags',
        'user_sudi_serial_nos' => 'setUserSudiSerialNos',
        'virtual_account_id' => 'setVirtualAccountId',
        'workflow_id' => 'setWorkflowId',
        'workflow_name' => 'setWorkflowName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aaa_credentials' => 'getAaaCredentials',
        'added_on' => 'getAddedOn',
        'addn_mac_addrs' => 'getAddnMacAddrs',
        'agent_type' => 'getAgentType',
        'auth_status' => 'getAuthStatus',
        'authenticated_sudi_serial_no' => 'getAuthenticatedSudiSerialNo',
        'capabilities_supported' => 'getCapabilitiesSupported',
        'cm_state' => 'getCmState',
        'description' => 'getDescription',
        'device_sudi_serial_nos' => 'getDeviceSudiSerialNos',
        'device_type' => 'getDeviceType',
        'features_supported' => 'getFeaturesSupported',
        'file_system_list' => 'getFileSystemList',
        'first_contact' => 'getFirstContact',
        'hostname' => 'getHostname',
        'http_headers' => 'getHttpHeaders',
        'image_file' => 'getImageFile',
        'image_version' => 'getImageVersion',
        'ip_interfaces' => 'getIpInterfaces',
        'last_contact' => 'getLastContact',
        'last_sync_time' => 'getLastSyncTime',
        'last_update_on' => 'getLastUpdateOn',
        'location' => 'getLocation',
        'mac_address' => 'getMacAddress',
        'mode' => 'getMode',
        'name' => 'getName',
        'neighbor_links' => 'getNeighborLinks',
        'onb_state' => 'getOnbState',
        'pid' => 'getPid',
        'pnp_profile_list' => 'getPnpProfileList',
        'pre_workflow_cli_ouputs' => 'getPreWorkflowCliOuputs',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'reload_requested' => 'getReloadRequested',
        'serial_number' => 'getSerialNumber',
        'smart_account_id' => 'getSmartAccountId',
        'source' => 'getSource',
        'stack' => 'getStack',
        'stack_info' => 'getStackInfo',
        'state' => 'getState',
        'sudi_required' => 'getSudiRequired',
        'tags' => 'getTags',
        'user_sudi_serial_nos' => 'getUserSudiSerialNos',
        'virtual_account_id' => 'getVirtualAccountId',
        'workflow_id' => 'getWorkflowId',
        'workflow_name' => 'getWorkflowName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGENT_TYPE_POSIX = 'POSIX';
    const AGENT_TYPE_IOS = 'IOS';
    const CM_STATE_NOT_CONTACTED = 'NotContacted';
    const CM_STATE_CONTACTED = 'Contacted';
    const CM_STATE_DISCONNECTED = 'Disconnected';
    const CM_STATE_SECURING_CONNECTION = 'SecuringConnection';
    const CM_STATE_SECURED_CONNECTION = 'SecuredConnection';
    const CM_STATE_AUTHENTICATED = 'Authenticated';
    const CM_STATE_ERROR_SECURING_CONNECTION = 'ErrorSecuringConnection';
    const CM_STATE_ERROR_AUTHENTICATING = 'ErrorAuthenticating';
    const ONB_STATE_NOT_CONTACTED = 'NotContacted';
    const ONB_STATE_CONNECTING = 'Connecting';
    const ONB_STATE_ERROR_SECURING_CONNECTION = 'ErrorSecuringConnection';
    const ONB_STATE_ERROR_AUTHENTICATING = 'ErrorAuthenticating';
    const ONB_STATE_INITIALIZING = 'Initializing';
    const ONB_STATE_INITIALIZED = 'Initialized';
    const ONB_STATE_ERROR_INITIALIZING = 'ErrorInitializing';
    const ONB_STATE_ERROR_SUDI_AUTHORIZING = 'ErrorSudiAuthorizing';
    const ONB_STATE_EXECUTING_WORKFLOW = 'ExecutingWorkflow';
    const ONB_STATE_EXECUTED_WORKFLOW = 'ExecutedWorkflow';
    const ONB_STATE_ERROR_EXECUTING_WORKFLOW = 'ErrorExecutingWorkflow';
    const ONB_STATE_EXECUTING_RESET = 'ExecutingReset';
    const ONB_STATE_ERROR_EXECUTING_RESET = 'ErrorExecutingReset';
    const ONB_STATE_PROVISIONED = 'Provisioned';
    const STATE_UNCLAIMED = 'Unclaimed';
    const STATE_PLANNED = 'Planned';
    const STATE_ONBOARDING = 'Onboarding';
    const STATE_PROVISIONED = 'Provisioned';
    const STATE_ERROR = 'Error';
    const STATE_DELETED = 'Deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgentTypeAllowableValues()
    {
        return [
            self::AGENT_TYPE_POSIX,
            self::AGENT_TYPE_IOS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCmStateAllowableValues()
    {
        return [
            self::CM_STATE_NOT_CONTACTED,
            self::CM_STATE_CONTACTED,
            self::CM_STATE_DISCONNECTED,
            self::CM_STATE_SECURING_CONNECTION,
            self::CM_STATE_SECURED_CONNECTION,
            self::CM_STATE_AUTHENTICATED,
            self::CM_STATE_ERROR_SECURING_CONNECTION,
            self::CM_STATE_ERROR_AUTHENTICATING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnbStateAllowableValues()
    {
        return [
            self::ONB_STATE_NOT_CONTACTED,
            self::ONB_STATE_CONNECTING,
            self::ONB_STATE_ERROR_SECURING_CONNECTION,
            self::ONB_STATE_ERROR_AUTHENTICATING,
            self::ONB_STATE_INITIALIZING,
            self::ONB_STATE_INITIALIZED,
            self::ONB_STATE_ERROR_INITIALIZING,
            self::ONB_STATE_ERROR_SUDI_AUTHORIZING,
            self::ONB_STATE_EXECUTING_WORKFLOW,
            self::ONB_STATE_EXECUTED_WORKFLOW,
            self::ONB_STATE_ERROR_EXECUTING_WORKFLOW,
            self::ONB_STATE_EXECUTING_RESET,
            self::ONB_STATE_ERROR_EXECUTING_RESET,
            self::ONB_STATE_PROVISIONED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNCLAIMED,
            self::STATE_PLANNED,
            self::STATE_ONBOARDING,
            self::STATE_PROVISIONED,
            self::STATE_ERROR,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aaa_credentials'] = isset($data['aaa_credentials']) ? $data['aaa_credentials'] : null;
        $this->container['added_on'] = isset($data['added_on']) ? $data['added_on'] : null;
        $this->container['addn_mac_addrs'] = isset($data['addn_mac_addrs']) ? $data['addn_mac_addrs'] : null;
        $this->container['agent_type'] = isset($data['agent_type']) ? $data['agent_type'] : null;
        $this->container['auth_status'] = isset($data['auth_status']) ? $data['auth_status'] : null;
        $this->container['authenticated_sudi_serial_no'] = isset($data['authenticated_sudi_serial_no']) ? $data['authenticated_sudi_serial_no'] : null;
        $this->container['capabilities_supported'] = isset($data['capabilities_supported']) ? $data['capabilities_supported'] : null;
        $this->container['cm_state'] = isset($data['cm_state']) ? $data['cm_state'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_sudi_serial_nos'] = isset($data['device_sudi_serial_nos']) ? $data['device_sudi_serial_nos'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
        $this->container['features_supported'] = isset($data['features_supported']) ? $data['features_supported'] : null;
        $this->container['file_system_list'] = isset($data['file_system_list']) ? $data['file_system_list'] : null;
        $this->container['first_contact'] = isset($data['first_contact']) ? $data['first_contact'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['http_headers'] = isset($data['http_headers']) ? $data['http_headers'] : null;
        $this->container['image_file'] = isset($data['image_file']) ? $data['image_file'] : null;
        $this->container['image_version'] = isset($data['image_version']) ? $data['image_version'] : null;
        $this->container['ip_interfaces'] = isset($data['ip_interfaces']) ? $data['ip_interfaces'] : null;
        $this->container['last_contact'] = isset($data['last_contact']) ? $data['last_contact'] : null;
        $this->container['last_sync_time'] = isset($data['last_sync_time']) ? $data['last_sync_time'] : null;
        $this->container['last_update_on'] = isset($data['last_update_on']) ? $data['last_update_on'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['neighbor_links'] = isset($data['neighbor_links']) ? $data['neighbor_links'] : null;
        $this->container['onb_state'] = isset($data['onb_state']) ? $data['onb_state'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['pnp_profile_list'] = isset($data['pnp_profile_list']) ? $data['pnp_profile_list'] : null;
        $this->container['pre_workflow_cli_ouputs'] = isset($data['pre_workflow_cli_ouputs']) ? $data['pre_workflow_cli_ouputs'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['reload_requested'] = isset($data['reload_requested']) ? $data['reload_requested'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['smart_account_id'] = isset($data['smart_account_id']) ? $data['smart_account_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['stack'] = isset($data['stack']) ? $data['stack'] : null;
        $this->container['stack_info'] = isset($data['stack_info']) ? $data['stack_info'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['sudi_required'] = isset($data['sudi_required']) ? $data['sudi_required'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['user_sudi_serial_nos'] = isset($data['user_sudi_serial_nos']) ? $data['user_sudi_serial_nos'] : null;
        $this->container['virtual_account_id'] = isset($data['virtual_account_id']) ? $data['virtual_account_id'] : null;
        $this->container['workflow_id'] = isset($data['workflow_id']) ? $data['workflow_id'] : null;
        $this->container['workflow_name'] = isset($data['workflow_name']) ? $data['workflow_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAgentTypeAllowableValues();
        if (!in_array($this->container['agent_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agent_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCmStateAllowableValues();
        if (!in_array($this->container['cm_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cm_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOnbStateAllowableValues();
        if (!in_array($this->container['onb_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'onb_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getAgentTypeAllowableValues();
        if (!in_array($this->container['agent_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getCmStateAllowableValues();
        if (!in_array($this->container['cm_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getOnbStateAllowableValues();
        if (!in_array($this->container['onb_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets aaa_credentials
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials
     */
    public function getAaaCredentials()
    {
        return $this->container['aaa_credentials'];
    }

    /**
     * Sets aaa_credentials
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoAaaCredentials $aaa_credentials aaa_credentials
     *
     * @return $this
     */
    public function setAaaCredentials($aaa_credentials)
    {
        $this->container['aaa_credentials'] = $aaa_credentials;

        return $this;
    }

    /**
     * Gets added_on
     *
     * @return int
     */
    public function getAddedOn()
    {
        return $this->container['added_on'];
    }

    /**
     * Sets added_on
     *
     * @param int $added_on added_on
     *
     * @return $this
     */
    public function setAddedOn($added_on)
    {
        $this->container['added_on'] = $added_on;

        return $this;
    }

    /**
     * Gets addn_mac_addrs
     *
     * @return string[]
     */
    public function getAddnMacAddrs()
    {
        return $this->container['addn_mac_addrs'];
    }

    /**
     * Sets addn_mac_addrs
     *
     * @param string[] $addn_mac_addrs addn_mac_addrs
     *
     * @return $this
     */
    public function setAddnMacAddrs($addn_mac_addrs)
    {
        $this->container['addn_mac_addrs'] = $addn_mac_addrs;

        return $this;
    }

    /**
     * Gets agent_type
     *
     * @return string
     */
    public function getAgentType()
    {
        return $this->container['agent_type'];
    }

    /**
     * Sets agent_type
     *
     * @param string $agent_type agent_type
     *
     * @return $this
     */
    public function setAgentType($agent_type)
    {
        $allowedValues = $this->getAgentTypeAllowableValues();
        if (!is_null($agent_type) && !in_array($agent_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agent_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agent_type'] = $agent_type;

        return $this;
    }

    /**
     * Gets auth_status
     *
     * @return string
     */
    public function getAuthStatus()
    {
        return $this->container['auth_status'];
    }

    /**
     * Sets auth_status
     *
     * @param string $auth_status auth_status
     *
     * @return $this
     */
    public function setAuthStatus($auth_status)
    {
        $this->container['auth_status'] = $auth_status;

        return $this;
    }

    /**
     * Gets authenticated_sudi_serial_no
     *
     * @return string
     */
    public function getAuthenticatedSudiSerialNo()
    {
        return $this->container['authenticated_sudi_serial_no'];
    }

    /**
     * Sets authenticated_sudi_serial_no
     *
     * @param string $authenticated_sudi_serial_no authenticated_sudi_serial_no
     *
     * @return $this
     */
    public function setAuthenticatedSudiSerialNo($authenticated_sudi_serial_no)
    {
        $this->container['authenticated_sudi_serial_no'] = $authenticated_sudi_serial_no;

        return $this;
    }

    /**
     * Gets capabilities_supported
     *
     * @return string[]
     */
    public function getCapabilitiesSupported()
    {
        return $this->container['capabilities_supported'];
    }

    /**
     * Sets capabilities_supported
     *
     * @param string[] $capabilities_supported capabilities_supported
     *
     * @return $this
     */
    public function setCapabilitiesSupported($capabilities_supported)
    {
        $this->container['capabilities_supported'] = $capabilities_supported;

        return $this;
    }

    /**
     * Gets cm_state
     *
     * @return string
     */
    public function getCmState()
    {
        return $this->container['cm_state'];
    }

    /**
     * Sets cm_state
     *
     * @param string $cm_state cm_state
     *
     * @return $this
     */
    public function setCmState($cm_state)
    {
        $allowedValues = $this->getCmStateAllowableValues();
        if (!is_null($cm_state) && !in_array($cm_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cm_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cm_state'] = $cm_state;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_sudi_serial_nos
     *
     * @return string[]
     */
    public function getDeviceSudiSerialNos()
    {
        return $this->container['device_sudi_serial_nos'];
    }

    /**
     * Sets device_sudi_serial_nos
     *
     * @param string[] $device_sudi_serial_nos device_sudi_serial_nos
     *
     * @return $this
     */
    public function setDeviceSudiSerialNos($device_sudi_serial_nos)
    {
        $this->container['device_sudi_serial_nos'] = $device_sudi_serial_nos;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type device_type
     *
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets features_supported
     *
     * @return string[]
     */
    public function getFeaturesSupported()
    {
        return $this->container['features_supported'];
    }

    /**
     * Sets features_supported
     *
     * @param string[] $features_supported features_supported
     *
     * @return $this
     */
    public function setFeaturesSupported($features_supported)
    {
        $this->container['features_supported'] = $features_supported;

        return $this;
    }

    /**
     * Gets file_system_list
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoFileSystemList[]
     */
    public function getFileSystemList()
    {
        return $this->container['file_system_list'];
    }

    /**
     * Sets file_system_list
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoFileSystemList[] $file_system_list file_system_list
     *
     * @return $this
     */
    public function setFileSystemList($file_system_list)
    {
        $this->container['file_system_list'] = $file_system_list;

        return $this;
    }

    /**
     * Gets first_contact
     *
     * @return int
     */
    public function getFirstContact()
    {
        return $this->container['first_contact'];
    }

    /**
     * Sets first_contact
     *
     * @param int $first_contact first_contact
     *
     * @return $this
     */
    public function setFirstContact($first_contact)
    {
        $this->container['first_contact'] = $first_contact;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets http_headers
     *
     * @return \cisco\com\dnac\v1\api\client\model\ResetRequestConfigParameters[]
     */
    public function getHttpHeaders()
    {
        return $this->container['http_headers'];
    }

    /**
     * Sets http_headers
     *
     * @param \cisco\com\dnac\v1\api\client\model\ResetRequestConfigParameters[] $http_headers http_headers
     *
     * @return $this
     */
    public function setHttpHeaders($http_headers)
    {
        $this->container['http_headers'] = $http_headers;

        return $this;
    }

    /**
     * Gets image_file
     *
     * @return string
     */
    public function getImageFile()
    {
        return $this->container['image_file'];
    }

    /**
     * Sets image_file
     *
     * @param string $image_file image_file
     *
     * @return $this
     */
    public function setImageFile($image_file)
    {
        $this->container['image_file'] = $image_file;

        return $this;
    }

    /**
     * Gets image_version
     *
     * @return string
     */
    public function getImageVersion()
    {
        return $this->container['image_version'];
    }

    /**
     * Sets image_version
     *
     * @param string $image_version image_version
     *
     * @return $this
     */
    public function setImageVersion($image_version)
    {
        $this->container['image_version'] = $image_version;

        return $this;
    }

    /**
     * Gets ip_interfaces
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoIpInterfaces[]
     */
    public function getIpInterfaces()
    {
        return $this->container['ip_interfaces'];
    }

    /**
     * Sets ip_interfaces
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoIpInterfaces[] $ip_interfaces ip_interfaces
     *
     * @return $this
     */
    public function setIpInterfaces($ip_interfaces)
    {
        $this->container['ip_interfaces'] = $ip_interfaces;

        return $this;
    }

    /**
     * Gets last_contact
     *
     * @return int
     */
    public function getLastContact()
    {
        return $this->container['last_contact'];
    }

    /**
     * Sets last_contact
     *
     * @param int $last_contact last_contact
     *
     * @return $this
     */
    public function setLastContact($last_contact)
    {
        $this->container['last_contact'] = $last_contact;

        return $this;
    }

    /**
     * Gets last_sync_time
     *
     * @return int
     */
    public function getLastSyncTime()
    {
        return $this->container['last_sync_time'];
    }

    /**
     * Sets last_sync_time
     *
     * @param int $last_sync_time last_sync_time
     *
     * @return $this
     */
    public function setLastSyncTime($last_sync_time)
    {
        $this->container['last_sync_time'] = $last_sync_time;

        return $this;
    }

    /**
     * Gets last_update_on
     *
     * @return int
     */
    public function getLastUpdateOn()
    {
        return $this->container['last_update_on'];
    }

    /**
     * Sets last_update_on
     *
     * @param int $last_update_on last_update_on
     *
     * @return $this
     */
    public function setLastUpdateOn($last_update_on)
    {
        $this->container['last_update_on'] = $last_update_on;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoLocation $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets neighbor_links
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoNeighborLinks[]
     */
    public function getNeighborLinks()
    {
        return $this->container['neighbor_links'];
    }

    /**
     * Sets neighbor_links
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoNeighborLinks[] $neighbor_links neighbor_links
     *
     * @return $this
     */
    public function setNeighborLinks($neighbor_links)
    {
        $this->container['neighbor_links'] = $neighbor_links;

        return $this;
    }

    /**
     * Gets onb_state
     *
     * @return string
     */
    public function getOnbState()
    {
        return $this->container['onb_state'];
    }

    /**
     * Sets onb_state
     *
     * @param string $onb_state onb_state
     *
     * @return $this
     */
    public function setOnbState($onb_state)
    {
        $allowedValues = $this->getOnbStateAllowableValues();
        if (!is_null($onb_state) && !in_array($onb_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'onb_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['onb_state'] = $onb_state;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets pnp_profile_list
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPnpProfileList[]
     */
    public function getPnpProfileList()
    {
        return $this->container['pnp_profile_list'];
    }

    /**
     * Sets pnp_profile_list
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPnpProfileList[] $pnp_profile_list pnp_profile_list
     *
     * @return $this
     */
    public function setPnpProfileList($pnp_profile_list)
    {
        $this->container['pnp_profile_list'] = $pnp_profile_list;

        return $this;
    }

    /**
     * Gets pre_workflow_cli_ouputs
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPreWorkflowCliOuputs[]
     */
    public function getPreWorkflowCliOuputs()
    {
        return $this->container['pre_workflow_cli_ouputs'];
    }

    /**
     * Sets pre_workflow_cli_ouputs
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPreWorkflowCliOuputs[] $pre_workflow_cli_ouputs pre_workflow_cli_ouputs
     *
     * @return $this
     */
    public function setPreWorkflowCliOuputs($pre_workflow_cli_ouputs)
    {
        $this->container['pre_workflow_cli_ouputs'] = $pre_workflow_cli_ouputs;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets reload_requested
     *
     * @return bool
     */
    public function getReloadRequested()
    {
        return $this->container['reload_requested'];
    }

    /**
     * Sets reload_requested
     *
     * @param bool $reload_requested reload_requested
     *
     * @return $this
     */
    public function setReloadRequested($reload_requested)
    {
        $this->container['reload_requested'] = $reload_requested;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets smart_account_id
     *
     * @return string
     */
    public function getSmartAccountId()
    {
        return $this->container['smart_account_id'];
    }

    /**
     * Sets smart_account_id
     *
     * @param string $smart_account_id smart_account_id
     *
     * @return $this
     */
    public function setSmartAccountId($smart_account_id)
    {
        $this->container['smart_account_id'] = $smart_account_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets stack
     *
     * @return bool
     */
    public function getStack()
    {
        return $this->container['stack'];
    }

    /**
     * Sets stack
     *
     * @param bool $stack stack
     *
     * @return $this
     */
    public function setStack($stack)
    {
        $this->container['stack'] = $stack;

        return $this;
    }

    /**
     * Gets stack_info
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfo
     */
    public function getStackInfo()
    {
        return $this->container['stack_info'];
    }

    /**
     * Sets stack_info
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfo $stack_info stack_info
     *
     * @return $this
     */
    public function setStackInfo($stack_info)
    {
        $this->container['stack_info'] = $stack_info;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets sudi_required
     *
     * @return bool
     */
    public function getSudiRequired()
    {
        return $this->container['sudi_required'];
    }

    /**
     * Sets sudi_required
     *
     * @param bool $sudi_required sudi_required
     *
     * @return $this
     */
    public function setSudiRequired($sudi_required)
    {
        $this->container['sudi_required'] = $sudi_required;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return object
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets user_sudi_serial_nos
     *
     * @return string[]
     */
    public function getUserSudiSerialNos()
    {
        return $this->container['user_sudi_serial_nos'];
    }

    /**
     * Sets user_sudi_serial_nos
     *
     * @param string[] $user_sudi_serial_nos user_sudi_serial_nos
     *
     * @return $this
     */
    public function setUserSudiSerialNos($user_sudi_serial_nos)
    {
        $this->container['user_sudi_serial_nos'] = $user_sudi_serial_nos;

        return $this;
    }

    /**
     * Gets virtual_account_id
     *
     * @return string
     */
    public function getVirtualAccountId()
    {
        return $this->container['virtual_account_id'];
    }

    /**
     * Sets virtual_account_id
     *
     * @param string $virtual_account_id virtual_account_id
     *
     * @return $this
     */
    public function setVirtualAccountId($virtual_account_id)
    {
        $this->container['virtual_account_id'] = $virtual_account_id;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param string $workflow_id workflow_id
     *
     * @return $this
     */
    public function setWorkflowId($workflow_id)
    {
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets workflow_name
     *
     * @return string
     */
    public function getWorkflowName()
    {
        return $this->container['workflow_name'];
    }

    /**
     * Sets workflow_name
     *
     * @param string $workflow_name workflow_name
     *
     * @return $this
     */
    public function setWorkflowName($workflow_name)
    {
        $this->container['workflow_name'] = $workflow_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


