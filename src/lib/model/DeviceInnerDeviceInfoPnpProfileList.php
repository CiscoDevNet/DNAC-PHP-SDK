<?php
/**
 * DeviceInnerDeviceInfoPnpProfileList
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DeviceInnerDeviceInfoPnpProfileList Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInnerDeviceInfoPnpProfileList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device_inner_deviceInfo_pnpProfileList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_by' => 'string',
        'discovery_created' => 'bool',
        'primary_endpoint' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint',
        'profile_name' => 'string',
        'secondary_endpoint' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_by' => null,
        'discovery_created' => null,
        'primary_endpoint' => null,
        'profile_name' => null,
        'secondary_endpoint' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_by' => 'createdBy',
        'discovery_created' => 'discoveryCreated',
        'primary_endpoint' => 'primaryEndpoint',
        'profile_name' => 'profileName',
        'secondary_endpoint' => 'secondaryEndpoint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_by' => 'setCreatedBy',
        'discovery_created' => 'setDiscoveryCreated',
        'primary_endpoint' => 'setPrimaryEndpoint',
        'profile_name' => 'setProfileName',
        'secondary_endpoint' => 'setSecondaryEndpoint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_by' => 'getCreatedBy',
        'discovery_created' => 'getDiscoveryCreated',
        'primary_endpoint' => 'getPrimaryEndpoint',
        'profile_name' => 'getProfileName',
        'secondary_endpoint' => 'getSecondaryEndpoint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['discovery_created'] = isset($data['discovery_created']) ? $data['discovery_created'] : null;
        $this->container['primary_endpoint'] = isset($data['primary_endpoint']) ? $data['primary_endpoint'] : null;
        $this->container['profile_name'] = isset($data['profile_name']) ? $data['profile_name'] : null;
        $this->container['secondary_endpoint'] = isset($data['secondary_endpoint']) ? $data['secondary_endpoint'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets discovery_created
     *
     * @return bool
     */
    public function getDiscoveryCreated()
    {
        return $this->container['discovery_created'];
    }

    /**
     * Sets discovery_created
     *
     * @param bool $discovery_created discovery_created
     *
     * @return $this
     */
    public function setDiscoveryCreated($discovery_created)
    {
        $this->container['discovery_created'] = $discovery_created;

        return $this;
    }

    /**
     * Gets primary_endpoint
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint
     */
    public function getPrimaryEndpoint()
    {
        return $this->container['primary_endpoint'];
    }

    /**
     * Sets primary_endpoint
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint $primary_endpoint primary_endpoint
     *
     * @return $this
     */
    public function setPrimaryEndpoint($primary_endpoint)
    {
        $this->container['primary_endpoint'] = $primary_endpoint;

        return $this;
    }

    /**
     * Gets profile_name
     *
     * @return string
     */
    public function getProfileName()
    {
        return $this->container['profile_name'];
    }

    /**
     * Sets profile_name
     *
     * @param string $profile_name profile_name
     *
     * @return $this
     */
    public function setProfileName($profile_name)
    {
        $this->container['profile_name'] = $profile_name;

        return $this;
    }

    /**
     * Gets secondary_endpoint
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint
     */
    public function getSecondaryEndpoint()
    {
        return $this->container['secondary_endpoint'];
    }

    /**
     * Sets secondary_endpoint
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoPrimaryEndpoint $secondary_endpoint secondary_endpoint
     *
     * @return $this
     */
    public function setSecondaryEndpoint($secondary_endpoint)
    {
        $this->container['secondary_endpoint'] = $secondary_endpoint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


