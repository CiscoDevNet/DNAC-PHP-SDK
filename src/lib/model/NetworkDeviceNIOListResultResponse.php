<?php
/**
 * NetworkDeviceNIOListResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * NetworkDeviceNIOListResultResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkDeviceNIOListResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkDeviceNIOListResult_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'anchor_wlc_for_ap' => 'string',
        'auth_model_id' => 'string',
        'avg_update_frequency' => 'int',
        'boot_date_time' => 'string',
        'cli_status' => 'string',
        'duplicate_device_id' => 'string',
        'error_code' => 'string',
        'error_description' => 'string',
        'family' => 'string',
        'hostname' => 'string',
        'http_status' => 'string',
        'id' => 'string',
        'image_name' => 'string',
        'ingress_queue_config' => 'string',
        'interface_count' => 'string',
        'inventory_collection_status' => 'string',
        'inventory_reachability_status' => 'string',
        'last_updated' => 'string',
        'line_card_count' => 'string',
        'line_card_id' => 'string',
        'location' => 'string',
        'location_name' => 'string',
        'mac_address' => 'string',
        'management_ip_address' => 'string',
        'memory_size' => 'string',
        'netconf_status' => 'string',
        'num_updates' => 'int',
        'ping_status' => 'string',
        'platform_id' => 'string',
        'port_range' => 'string',
        'qos_status' => 'string',
        'reachability_failure_reason' => 'string',
        'reachability_status' => 'string',
        'role' => 'string',
        'role_source' => 'string',
        'serial_number' => 'string',
        'snmp_contact' => 'string',
        'snmp_location' => 'string',
        'snmp_status' => 'string',
        'software_version' => 'string',
        'tag' => 'string',
        'tag_count' => 'int',
        'type' => 'string',
        'up_time' => 'string',
        'vendor' => 'string',
        'wlc_ap_device_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'anchor_wlc_for_ap' => null,
        'auth_model_id' => null,
        'avg_update_frequency' => null,
        'boot_date_time' => null,
        'cli_status' => null,
        'duplicate_device_id' => null,
        'error_code' => null,
        'error_description' => null,
        'family' => null,
        'hostname' => null,
        'http_status' => null,
        'id' => null,
        'image_name' => null,
        'ingress_queue_config' => null,
        'interface_count' => null,
        'inventory_collection_status' => null,
        'inventory_reachability_status' => null,
        'last_updated' => null,
        'line_card_count' => null,
        'line_card_id' => null,
        'location' => null,
        'location_name' => null,
        'mac_address' => null,
        'management_ip_address' => null,
        'memory_size' => null,
        'netconf_status' => null,
        'num_updates' => null,
        'ping_status' => null,
        'platform_id' => null,
        'port_range' => null,
        'qos_status' => null,
        'reachability_failure_reason' => null,
        'reachability_status' => null,
        'role' => null,
        'role_source' => null,
        'serial_number' => null,
        'snmp_contact' => null,
        'snmp_location' => null,
        'snmp_status' => null,
        'software_version' => null,
        'tag' => null,
        'tag_count' => null,
        'type' => null,
        'up_time' => null,
        'vendor' => null,
        'wlc_ap_device_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anchor_wlc_for_ap' => 'anchorWlcForAp',
        'auth_model_id' => 'authModelId',
        'avg_update_frequency' => 'avgUpdateFrequency',
        'boot_date_time' => 'bootDateTime',
        'cli_status' => 'cliStatus',
        'duplicate_device_id' => 'duplicateDeviceId',
        'error_code' => 'errorCode',
        'error_description' => 'errorDescription',
        'family' => 'family',
        'hostname' => 'hostname',
        'http_status' => 'httpStatus',
        'id' => 'id',
        'image_name' => 'imageName',
        'ingress_queue_config' => 'ingressQueueConfig',
        'interface_count' => 'interfaceCount',
        'inventory_collection_status' => 'inventoryCollectionStatus',
        'inventory_reachability_status' => 'inventoryReachabilityStatus',
        'last_updated' => 'lastUpdated',
        'line_card_count' => 'lineCardCount',
        'line_card_id' => 'lineCardId',
        'location' => 'location',
        'location_name' => 'locationName',
        'mac_address' => 'macAddress',
        'management_ip_address' => 'managementIpAddress',
        'memory_size' => 'memorySize',
        'netconf_status' => 'netconfStatus',
        'num_updates' => 'numUpdates',
        'ping_status' => 'pingStatus',
        'platform_id' => 'platformId',
        'port_range' => 'portRange',
        'qos_status' => 'qosStatus',
        'reachability_failure_reason' => 'reachabilityFailureReason',
        'reachability_status' => 'reachabilityStatus',
        'role' => 'role',
        'role_source' => 'roleSource',
        'serial_number' => 'serialNumber',
        'snmp_contact' => 'snmpContact',
        'snmp_location' => 'snmpLocation',
        'snmp_status' => 'snmpStatus',
        'software_version' => 'softwareVersion',
        'tag' => 'tag',
        'tag_count' => 'tagCount',
        'type' => 'type',
        'up_time' => 'upTime',
        'vendor' => 'vendor',
        'wlc_ap_device_status' => 'wlcApDeviceStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anchor_wlc_for_ap' => 'setAnchorWlcForAp',
        'auth_model_id' => 'setAuthModelId',
        'avg_update_frequency' => 'setAvgUpdateFrequency',
        'boot_date_time' => 'setBootDateTime',
        'cli_status' => 'setCliStatus',
        'duplicate_device_id' => 'setDuplicateDeviceId',
        'error_code' => 'setErrorCode',
        'error_description' => 'setErrorDescription',
        'family' => 'setFamily',
        'hostname' => 'setHostname',
        'http_status' => 'setHttpStatus',
        'id' => 'setId',
        'image_name' => 'setImageName',
        'ingress_queue_config' => 'setIngressQueueConfig',
        'interface_count' => 'setInterfaceCount',
        'inventory_collection_status' => 'setInventoryCollectionStatus',
        'inventory_reachability_status' => 'setInventoryReachabilityStatus',
        'last_updated' => 'setLastUpdated',
        'line_card_count' => 'setLineCardCount',
        'line_card_id' => 'setLineCardId',
        'location' => 'setLocation',
        'location_name' => 'setLocationName',
        'mac_address' => 'setMacAddress',
        'management_ip_address' => 'setManagementIpAddress',
        'memory_size' => 'setMemorySize',
        'netconf_status' => 'setNetconfStatus',
        'num_updates' => 'setNumUpdates',
        'ping_status' => 'setPingStatus',
        'platform_id' => 'setPlatformId',
        'port_range' => 'setPortRange',
        'qos_status' => 'setQosStatus',
        'reachability_failure_reason' => 'setReachabilityFailureReason',
        'reachability_status' => 'setReachabilityStatus',
        'role' => 'setRole',
        'role_source' => 'setRoleSource',
        'serial_number' => 'setSerialNumber',
        'snmp_contact' => 'setSnmpContact',
        'snmp_location' => 'setSnmpLocation',
        'snmp_status' => 'setSnmpStatus',
        'software_version' => 'setSoftwareVersion',
        'tag' => 'setTag',
        'tag_count' => 'setTagCount',
        'type' => 'setType',
        'up_time' => 'setUpTime',
        'vendor' => 'setVendor',
        'wlc_ap_device_status' => 'setWlcApDeviceStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anchor_wlc_for_ap' => 'getAnchorWlcForAp',
        'auth_model_id' => 'getAuthModelId',
        'avg_update_frequency' => 'getAvgUpdateFrequency',
        'boot_date_time' => 'getBootDateTime',
        'cli_status' => 'getCliStatus',
        'duplicate_device_id' => 'getDuplicateDeviceId',
        'error_code' => 'getErrorCode',
        'error_description' => 'getErrorDescription',
        'family' => 'getFamily',
        'hostname' => 'getHostname',
        'http_status' => 'getHttpStatus',
        'id' => 'getId',
        'image_name' => 'getImageName',
        'ingress_queue_config' => 'getIngressQueueConfig',
        'interface_count' => 'getInterfaceCount',
        'inventory_collection_status' => 'getInventoryCollectionStatus',
        'inventory_reachability_status' => 'getInventoryReachabilityStatus',
        'last_updated' => 'getLastUpdated',
        'line_card_count' => 'getLineCardCount',
        'line_card_id' => 'getLineCardId',
        'location' => 'getLocation',
        'location_name' => 'getLocationName',
        'mac_address' => 'getMacAddress',
        'management_ip_address' => 'getManagementIpAddress',
        'memory_size' => 'getMemorySize',
        'netconf_status' => 'getNetconfStatus',
        'num_updates' => 'getNumUpdates',
        'ping_status' => 'getPingStatus',
        'platform_id' => 'getPlatformId',
        'port_range' => 'getPortRange',
        'qos_status' => 'getQosStatus',
        'reachability_failure_reason' => 'getReachabilityFailureReason',
        'reachability_status' => 'getReachabilityStatus',
        'role' => 'getRole',
        'role_source' => 'getRoleSource',
        'serial_number' => 'getSerialNumber',
        'snmp_contact' => 'getSnmpContact',
        'snmp_location' => 'getSnmpLocation',
        'snmp_status' => 'getSnmpStatus',
        'software_version' => 'getSoftwareVersion',
        'tag' => 'getTag',
        'tag_count' => 'getTagCount',
        'type' => 'getType',
        'up_time' => 'getUpTime',
        'vendor' => 'getVendor',
        'wlc_ap_device_status' => 'getWlcApDeviceStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['anchor_wlc_for_ap'] = isset($data['anchor_wlc_for_ap']) ? $data['anchor_wlc_for_ap'] : null;
        $this->container['auth_model_id'] = isset($data['auth_model_id']) ? $data['auth_model_id'] : null;
        $this->container['avg_update_frequency'] = isset($data['avg_update_frequency']) ? $data['avg_update_frequency'] : null;
        $this->container['boot_date_time'] = isset($data['boot_date_time']) ? $data['boot_date_time'] : null;
        $this->container['cli_status'] = isset($data['cli_status']) ? $data['cli_status'] : null;
        $this->container['duplicate_device_id'] = isset($data['duplicate_device_id']) ? $data['duplicate_device_id'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_description'] = isset($data['error_description']) ? $data['error_description'] : null;
        $this->container['family'] = isset($data['family']) ? $data['family'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['http_status'] = isset($data['http_status']) ? $data['http_status'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_name'] = isset($data['image_name']) ? $data['image_name'] : null;
        $this->container['ingress_queue_config'] = isset($data['ingress_queue_config']) ? $data['ingress_queue_config'] : null;
        $this->container['interface_count'] = isset($data['interface_count']) ? $data['interface_count'] : null;
        $this->container['inventory_collection_status'] = isset($data['inventory_collection_status']) ? $data['inventory_collection_status'] : null;
        $this->container['inventory_reachability_status'] = isset($data['inventory_reachability_status']) ? $data['inventory_reachability_status'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['line_card_count'] = isset($data['line_card_count']) ? $data['line_card_count'] : null;
        $this->container['line_card_id'] = isset($data['line_card_id']) ? $data['line_card_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['management_ip_address'] = isset($data['management_ip_address']) ? $data['management_ip_address'] : null;
        $this->container['memory_size'] = isset($data['memory_size']) ? $data['memory_size'] : null;
        $this->container['netconf_status'] = isset($data['netconf_status']) ? $data['netconf_status'] : null;
        $this->container['num_updates'] = isset($data['num_updates']) ? $data['num_updates'] : null;
        $this->container['ping_status'] = isset($data['ping_status']) ? $data['ping_status'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['port_range'] = isset($data['port_range']) ? $data['port_range'] : null;
        $this->container['qos_status'] = isset($data['qos_status']) ? $data['qos_status'] : null;
        $this->container['reachability_failure_reason'] = isset($data['reachability_failure_reason']) ? $data['reachability_failure_reason'] : null;
        $this->container['reachability_status'] = isset($data['reachability_status']) ? $data['reachability_status'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['role_source'] = isset($data['role_source']) ? $data['role_source'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['snmp_contact'] = isset($data['snmp_contact']) ? $data['snmp_contact'] : null;
        $this->container['snmp_location'] = isset($data['snmp_location']) ? $data['snmp_location'] : null;
        $this->container['snmp_status'] = isset($data['snmp_status']) ? $data['snmp_status'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['tag_count'] = isset($data['tag_count']) ? $data['tag_count'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['up_time'] = isset($data['up_time']) ? $data['up_time'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['wlc_ap_device_status'] = isset($data['wlc_ap_device_status']) ? $data['wlc_ap_device_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets anchor_wlc_for_ap
     *
     * @return string
     */
    public function getAnchorWlcForAp()
    {
        return $this->container['anchor_wlc_for_ap'];
    }

    /**
     * Sets anchor_wlc_for_ap
     *
     * @param string $anchor_wlc_for_ap anchor_wlc_for_ap
     *
     * @return $this
     */
    public function setAnchorWlcForAp($anchor_wlc_for_ap)
    {
        $this->container['anchor_wlc_for_ap'] = $anchor_wlc_for_ap;

        return $this;
    }

    /**
     * Gets auth_model_id
     *
     * @return string
     */
    public function getAuthModelId()
    {
        return $this->container['auth_model_id'];
    }

    /**
     * Sets auth_model_id
     *
     * @param string $auth_model_id auth_model_id
     *
     * @return $this
     */
    public function setAuthModelId($auth_model_id)
    {
        $this->container['auth_model_id'] = $auth_model_id;

        return $this;
    }

    /**
     * Gets avg_update_frequency
     *
     * @return int
     */
    public function getAvgUpdateFrequency()
    {
        return $this->container['avg_update_frequency'];
    }

    /**
     * Sets avg_update_frequency
     *
     * @param int $avg_update_frequency avg_update_frequency
     *
     * @return $this
     */
    public function setAvgUpdateFrequency($avg_update_frequency)
    {
        $this->container['avg_update_frequency'] = $avg_update_frequency;

        return $this;
    }

    /**
     * Gets boot_date_time
     *
     * @return string
     */
    public function getBootDateTime()
    {
        return $this->container['boot_date_time'];
    }

    /**
     * Sets boot_date_time
     *
     * @param string $boot_date_time boot_date_time
     *
     * @return $this
     */
    public function setBootDateTime($boot_date_time)
    {
        $this->container['boot_date_time'] = $boot_date_time;

        return $this;
    }

    /**
     * Gets cli_status
     *
     * @return string
     */
    public function getCliStatus()
    {
        return $this->container['cli_status'];
    }

    /**
     * Sets cli_status
     *
     * @param string $cli_status cli_status
     *
     * @return $this
     */
    public function setCliStatus($cli_status)
    {
        $this->container['cli_status'] = $cli_status;

        return $this;
    }

    /**
     * Gets duplicate_device_id
     *
     * @return string
     */
    public function getDuplicateDeviceId()
    {
        return $this->container['duplicate_device_id'];
    }

    /**
     * Sets duplicate_device_id
     *
     * @param string $duplicate_device_id duplicate_device_id
     *
     * @return $this
     */
    public function setDuplicateDeviceId($duplicate_device_id)
    {
        $this->container['duplicate_device_id'] = $duplicate_device_id;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_description
     *
     * @return string
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * Sets error_description
     *
     * @param string $error_description error_description
     *
     * @return $this
     */
    public function setErrorDescription($error_description)
    {
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * Gets family
     *
     * @return string
     */
    public function getFamily()
    {
        return $this->container['family'];
    }

    /**
     * Sets family
     *
     * @param string $family family
     *
     * @return $this
     */
    public function setFamily($family)
    {
        $this->container['family'] = $family;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets http_status
     *
     * @return string
     */
    public function getHttpStatus()
    {
        return $this->container['http_status'];
    }

    /**
     * Sets http_status
     *
     * @param string $http_status http_status
     *
     * @return $this
     */
    public function setHttpStatus($http_status)
    {
        $this->container['http_status'] = $http_status;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string $image_name image_name
     *
     * @return $this
     */
    public function setImageName($image_name)
    {
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets ingress_queue_config
     *
     * @return string
     */
    public function getIngressQueueConfig()
    {
        return $this->container['ingress_queue_config'];
    }

    /**
     * Sets ingress_queue_config
     *
     * @param string $ingress_queue_config ingress_queue_config
     *
     * @return $this
     */
    public function setIngressQueueConfig($ingress_queue_config)
    {
        $this->container['ingress_queue_config'] = $ingress_queue_config;

        return $this;
    }

    /**
     * Gets interface_count
     *
     * @return string
     */
    public function getInterfaceCount()
    {
        return $this->container['interface_count'];
    }

    /**
     * Sets interface_count
     *
     * @param string $interface_count interface_count
     *
     * @return $this
     */
    public function setInterfaceCount($interface_count)
    {
        $this->container['interface_count'] = $interface_count;

        return $this;
    }

    /**
     * Gets inventory_collection_status
     *
     * @return string
     */
    public function getInventoryCollectionStatus()
    {
        return $this->container['inventory_collection_status'];
    }

    /**
     * Sets inventory_collection_status
     *
     * @param string $inventory_collection_status inventory_collection_status
     *
     * @return $this
     */
    public function setInventoryCollectionStatus($inventory_collection_status)
    {
        $this->container['inventory_collection_status'] = $inventory_collection_status;

        return $this;
    }

    /**
     * Gets inventory_reachability_status
     *
     * @return string
     */
    public function getInventoryReachabilityStatus()
    {
        return $this->container['inventory_reachability_status'];
    }

    /**
     * Sets inventory_reachability_status
     *
     * @param string $inventory_reachability_status inventory_reachability_status
     *
     * @return $this
     */
    public function setInventoryReachabilityStatus($inventory_reachability_status)
    {
        $this->container['inventory_reachability_status'] = $inventory_reachability_status;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets line_card_count
     *
     * @return string
     */
    public function getLineCardCount()
    {
        return $this->container['line_card_count'];
    }

    /**
     * Sets line_card_count
     *
     * @param string $line_card_count line_card_count
     *
     * @return $this
     */
    public function setLineCardCount($line_card_count)
    {
        $this->container['line_card_count'] = $line_card_count;

        return $this;
    }

    /**
     * Gets line_card_id
     *
     * @return string
     */
    public function getLineCardId()
    {
        return $this->container['line_card_id'];
    }

    /**
     * Sets line_card_id
     *
     * @param string $line_card_id line_card_id
     *
     * @return $this
     */
    public function setLineCardId($line_card_id)
    {
        $this->container['line_card_id'] = $line_card_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets management_ip_address
     *
     * @return string
     */
    public function getManagementIpAddress()
    {
        return $this->container['management_ip_address'];
    }

    /**
     * Sets management_ip_address
     *
     * @param string $management_ip_address management_ip_address
     *
     * @return $this
     */
    public function setManagementIpAddress($management_ip_address)
    {
        $this->container['management_ip_address'] = $management_ip_address;

        return $this;
    }

    /**
     * Gets memory_size
     *
     * @return string
     */
    public function getMemorySize()
    {
        return $this->container['memory_size'];
    }

    /**
     * Sets memory_size
     *
     * @param string $memory_size memory_size
     *
     * @return $this
     */
    public function setMemorySize($memory_size)
    {
        $this->container['memory_size'] = $memory_size;

        return $this;
    }

    /**
     * Gets netconf_status
     *
     * @return string
     */
    public function getNetconfStatus()
    {
        return $this->container['netconf_status'];
    }

    /**
     * Sets netconf_status
     *
     * @param string $netconf_status netconf_status
     *
     * @return $this
     */
    public function setNetconfStatus($netconf_status)
    {
        $this->container['netconf_status'] = $netconf_status;

        return $this;
    }

    /**
     * Gets num_updates
     *
     * @return int
     */
    public function getNumUpdates()
    {
        return $this->container['num_updates'];
    }

    /**
     * Sets num_updates
     *
     * @param int $num_updates num_updates
     *
     * @return $this
     */
    public function setNumUpdates($num_updates)
    {
        $this->container['num_updates'] = $num_updates;

        return $this;
    }

    /**
     * Gets ping_status
     *
     * @return string
     */
    public function getPingStatus()
    {
        return $this->container['ping_status'];
    }

    /**
     * Sets ping_status
     *
     * @param string $ping_status ping_status
     *
     * @return $this
     */
    public function setPingStatus($ping_status)
    {
        $this->container['ping_status'] = $ping_status;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id platform_id
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets port_range
     *
     * @return string
     */
    public function getPortRange()
    {
        return $this->container['port_range'];
    }

    /**
     * Sets port_range
     *
     * @param string $port_range port_range
     *
     * @return $this
     */
    public function setPortRange($port_range)
    {
        $this->container['port_range'] = $port_range;

        return $this;
    }

    /**
     * Gets qos_status
     *
     * @return string
     */
    public function getQosStatus()
    {
        return $this->container['qos_status'];
    }

    /**
     * Sets qos_status
     *
     * @param string $qos_status qos_status
     *
     * @return $this
     */
    public function setQosStatus($qos_status)
    {
        $this->container['qos_status'] = $qos_status;

        return $this;
    }

    /**
     * Gets reachability_failure_reason
     *
     * @return string
     */
    public function getReachabilityFailureReason()
    {
        return $this->container['reachability_failure_reason'];
    }

    /**
     * Sets reachability_failure_reason
     *
     * @param string $reachability_failure_reason reachability_failure_reason
     *
     * @return $this
     */
    public function setReachabilityFailureReason($reachability_failure_reason)
    {
        $this->container['reachability_failure_reason'] = $reachability_failure_reason;

        return $this;
    }

    /**
     * Gets reachability_status
     *
     * @return string
     */
    public function getReachabilityStatus()
    {
        return $this->container['reachability_status'];
    }

    /**
     * Sets reachability_status
     *
     * @param string $reachability_status reachability_status
     *
     * @return $this
     */
    public function setReachabilityStatus($reachability_status)
    {
        $this->container['reachability_status'] = $reachability_status;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_source
     *
     * @return string
     */
    public function getRoleSource()
    {
        return $this->container['role_source'];
    }

    /**
     * Sets role_source
     *
     * @param string $role_source role_source
     *
     * @return $this
     */
    public function setRoleSource($role_source)
    {
        $this->container['role_source'] = $role_source;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets snmp_contact
     *
     * @return string
     */
    public function getSnmpContact()
    {
        return $this->container['snmp_contact'];
    }

    /**
     * Sets snmp_contact
     *
     * @param string $snmp_contact snmp_contact
     *
     * @return $this
     */
    public function setSnmpContact($snmp_contact)
    {
        $this->container['snmp_contact'] = $snmp_contact;

        return $this;
    }

    /**
     * Gets snmp_location
     *
     * @return string
     */
    public function getSnmpLocation()
    {
        return $this->container['snmp_location'];
    }

    /**
     * Sets snmp_location
     *
     * @param string $snmp_location snmp_location
     *
     * @return $this
     */
    public function setSnmpLocation($snmp_location)
    {
        $this->container['snmp_location'] = $snmp_location;

        return $this;
    }

    /**
     * Gets snmp_status
     *
     * @return string
     */
    public function getSnmpStatus()
    {
        return $this->container['snmp_status'];
    }

    /**
     * Sets snmp_status
     *
     * @param string $snmp_status snmp_status
     *
     * @return $this
     */
    public function setSnmpStatus($snmp_status)
    {
        $this->container['snmp_status'] = $snmp_status;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets tag_count
     *
     * @return int
     */
    public function getTagCount()
    {
        return $this->container['tag_count'];
    }

    /**
     * Sets tag_count
     *
     * @param int $tag_count tag_count
     *
     * @return $this
     */
    public function setTagCount($tag_count)
    {
        $this->container['tag_count'] = $tag_count;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets up_time
     *
     * @return string
     */
    public function getUpTime()
    {
        return $this->container['up_time'];
    }

    /**
     * Sets up_time
     *
     * @param string $up_time up_time
     *
     * @return $this
     */
    public function setUpTime($up_time)
    {
        $this->container['up_time'] = $up_time;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets wlc_ap_device_status
     *
     * @return string
     */
    public function getWlcApDeviceStatus()
    {
        return $this->container['wlc_ap_device_status'];
    }

    /**
     * Sets wlc_ap_device_status
     *
     * @param string $wlc_ap_device_status wlc_ap_device_status
     *
     * @return $this
     */
    public function setWlcApDeviceStatus($wlc_ap_device_status)
    {
        $this->container['wlc_ap_device_status'] = $wlc_ap_device_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


