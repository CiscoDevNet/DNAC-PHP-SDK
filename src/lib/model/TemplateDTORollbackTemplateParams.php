<?php
/**
 * TemplateDTORollbackTemplateParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * TemplateDTORollbackTemplateParams Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemplateDTORollbackTemplateParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateDTO_rollbackTemplateParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_type' => 'string',
        'default_value' => 'string',
        'description' => 'string',
        'display_name' => 'string',
        'group' => 'string',
        'id' => 'string',
        'instruction_text' => 'string',
        'key' => 'string',
        'order' => 'int',
        'parameter_name' => 'string',
        'provider' => 'string',
        'range' => '\cisco\com\dnac\v1\api\client\model\TemplateDTORange[]',
        'required' => 'bool',
        'selection' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data_type' => null,
        'default_value' => null,
        'description' => null,
        'display_name' => null,
        'group' => null,
        'id' => null,
        'instruction_text' => null,
        'key' => null,
        'order' => null,
        'parameter_name' => null,
        'provider' => null,
        'range' => null,
        'required' => null,
        'selection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_type' => 'dataType',
        'default_value' => 'defaultValue',
        'description' => 'description',
        'display_name' => 'displayName',
        'group' => 'group',
        'id' => 'id',
        'instruction_text' => 'instructionText',
        'key' => 'key',
        'order' => 'order',
        'parameter_name' => 'parameterName',
        'provider' => 'provider',
        'range' => 'range',
        'required' => 'required',
        'selection' => 'selection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_type' => 'setDataType',
        'default_value' => 'setDefaultValue',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'group' => 'setGroup',
        'id' => 'setId',
        'instruction_text' => 'setInstructionText',
        'key' => 'setKey',
        'order' => 'setOrder',
        'parameter_name' => 'setParameterName',
        'provider' => 'setProvider',
        'range' => 'setRange',
        'required' => 'setRequired',
        'selection' => 'setSelection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_type' => 'getDataType',
        'default_value' => 'getDefaultValue',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'group' => 'getGroup',
        'id' => 'getId',
        'instruction_text' => 'getInstructionText',
        'key' => 'getKey',
        'order' => 'getOrder',
        'parameter_name' => 'getParameterName',
        'provider' => 'getProvider',
        'range' => 'getRange',
        'required' => 'getRequired',
        'selection' => 'getSelection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DATA_TYPE_STRING = 'STRING';
    const DATA_TYPE_INTEGER = 'INTEGER';
    const DATA_TYPE_IPADDRESS = 'IPADDRESS';
    const DATA_TYPE_MACADDRESS = 'MACADDRESS';
    const DATA_TYPE_SECTIONDIVIDER = 'SECTIONDIVIDER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataTypeAllowableValues()
    {
        return [
            self::DATA_TYPE_STRING,
            self::DATA_TYPE_INTEGER,
            self::DATA_TYPE_IPADDRESS,
            self::DATA_TYPE_MACADDRESS,
            self::DATA_TYPE_SECTIONDIVIDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instruction_text'] = isset($data['instruction_text']) ? $data['instruction_text'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['parameter_name'] = isset($data['parameter_name']) ? $data['parameter_name'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['selection'] = isset($data['selection']) ? $data['selection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDataTypeAllowableValues();
        if (!in_array($this->container['data_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDataTypeAllowableValues();
        if (!in_array($this->container['data_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $allowedValues = $this->getDataTypeAllowableValues();
        if (!is_null($data_type) && !in_array($data_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instruction_text
     *
     * @return string
     */
    public function getInstructionText()
    {
        return $this->container['instruction_text'];
    }

    /**
     * Sets instruction_text
     *
     * @param string $instruction_text instruction_text
     *
     * @return $this
     */
    public function setInstructionText($instruction_text)
    {
        $this->container['instruction_text'] = $instruction_text;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets parameter_name
     *
     * @return string
     */
    public function getParameterName()
    {
        return $this->container['parameter_name'];
    }

    /**
     * Sets parameter_name
     *
     * @param string $parameter_name parameter_name
     *
     * @return $this
     */
    public function setParameterName($parameter_name)
    {
        $this->container['parameter_name'] = $parameter_name;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \cisco\com\dnac\v1\api\client\model\TemplateDTORange[]
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \cisco\com\dnac\v1\api\client\model\TemplateDTORange[] $range range
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets selection
     *
     * @return object
     */
    public function getSelection()
    {
        return $this->container['selection'];
    }

    /**
     * Sets selection
     *
     * @param object $selection selection
     *
     * @return $this
     */
    public function setSelection($selection)
    {
        $this->container['selection'] = $selection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


