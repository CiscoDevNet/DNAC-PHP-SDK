<?php
/**
 * PathResponseResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'detailed_status' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseDetailedStatus',
        'last_update' => 'string',
        'network_elements' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElements[]',
        'network_elements_info' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElementsInfo[]',
        'properties' => 'string[]',
        'request' => '\cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutputResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'detailed_status' => null,
        'last_update' => null,
        'network_elements' => null,
        'network_elements_info' => null,
        'properties' => null,
        'request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detailed_status' => 'detailedStatus',
        'last_update' => 'lastUpdate',
        'network_elements' => 'networkElements',
        'network_elements_info' => 'networkElementsInfo',
        'properties' => 'properties',
        'request' => 'request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detailed_status' => 'setDetailedStatus',
        'last_update' => 'setLastUpdate',
        'network_elements' => 'setNetworkElements',
        'network_elements_info' => 'setNetworkElementsInfo',
        'properties' => 'setProperties',
        'request' => 'setRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detailed_status' => 'getDetailedStatus',
        'last_update' => 'getLastUpdate',
        'network_elements' => 'getNetworkElements',
        'network_elements_info' => 'getNetworkElementsInfo',
        'properties' => 'getProperties',
        'request' => 'getRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detailed_status'] = isset($data['detailed_status']) ? $data['detailed_status'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['network_elements'] = isset($data['network_elements']) ? $data['network_elements'] : null;
        $this->container['network_elements_info'] = isset($data['network_elements_info']) ? $data['network_elements_info'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets detailed_status
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseDetailedStatus
     */
    public function getDetailedStatus()
    {
        return $this->container['detailed_status'];
    }

    /**
     * Sets detailed_status
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseDetailedStatus $detailed_status detailed_status
     *
     * @return $this
     */
    public function setDetailedStatus($detailed_status)
    {
        $this->container['detailed_status'] = $detailed_status;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets network_elements
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElements[]
     */
    public function getNetworkElements()
    {
        return $this->container['network_elements'];
    }

    /**
     * Sets network_elements
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElements[] $network_elements network_elements
     *
     * @return $this
     */
    public function setNetworkElements($network_elements)
    {
        $this->container['network_elements'] = $network_elements;

        return $this;
    }

    /**
     * Gets network_elements_info
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElementsInfo[]
     */
    public function getNetworkElementsInfo()
    {
        return $this->container['network_elements_info'];
    }

    /**
     * Sets network_elements_info
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseNetworkElementsInfo[] $network_elements_info network_elements_info
     *
     * @return $this
     */
    public function setNetworkElementsInfo($network_elements_info)
    {
        $this->container['network_elements_info'] = $network_elements_info;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string[] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets request
     *
     * @return \cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutputResponse
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \cisco\com\dnac\v1\api\client\model\FlowAnalysisListOutputResponse $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


