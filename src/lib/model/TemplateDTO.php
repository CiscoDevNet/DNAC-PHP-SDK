<?php
/**
 * TemplateDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * TemplateDTO Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemplateDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'author' => 'string',
        'create_time' => 'int',
        'description' => 'string',
        'device_types' => '\cisco\com\dnac\v1\api\client\model\TemplateDTODeviceTypes[]',
        'id' => 'string',
        'last_update_time' => 'int',
        'name' => 'string',
        'parent_template_id' => 'string',
        'project_id' => 'string',
        'project_name' => 'string',
        'rollback_template_content' => 'string',
        'rollback_template_params' => '\cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[]',
        'software_type' => 'string',
        'software_variant' => 'string',
        'software_version' => 'string',
        'tags' => 'string[]',
        'template_content' => 'string',
        'template_params' => '\cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[]',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'author' => null,
        'create_time' => null,
        'description' => null,
        'device_types' => null,
        'id' => null,
        'last_update_time' => null,
        'name' => null,
        'parent_template_id' => null,
        'project_id' => null,
        'project_name' => null,
        'rollback_template_content' => null,
        'rollback_template_params' => null,
        'software_type' => null,
        'software_variant' => null,
        'software_version' => null,
        'tags' => null,
        'template_content' => null,
        'template_params' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'create_time' => 'createTime',
        'description' => 'description',
        'device_types' => 'deviceTypes',
        'id' => 'id',
        'last_update_time' => 'lastUpdateTime',
        'name' => 'name',
        'parent_template_id' => 'parentTemplateId',
        'project_id' => 'projectId',
        'project_name' => 'projectName',
        'rollback_template_content' => 'rollbackTemplateContent',
        'rollback_template_params' => 'rollbackTemplateParams',
        'software_type' => 'softwareType',
        'software_variant' => 'softwareVariant',
        'software_version' => 'softwareVersion',
        'tags' => 'tags',
        'template_content' => 'templateContent',
        'template_params' => 'templateParams',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'device_types' => 'setDeviceTypes',
        'id' => 'setId',
        'last_update_time' => 'setLastUpdateTime',
        'name' => 'setName',
        'parent_template_id' => 'setParentTemplateId',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'rollback_template_content' => 'setRollbackTemplateContent',
        'rollback_template_params' => 'setRollbackTemplateParams',
        'software_type' => 'setSoftwareType',
        'software_variant' => 'setSoftwareVariant',
        'software_version' => 'setSoftwareVersion',
        'tags' => 'setTags',
        'template_content' => 'setTemplateContent',
        'template_params' => 'setTemplateParams',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'device_types' => 'getDeviceTypes',
        'id' => 'getId',
        'last_update_time' => 'getLastUpdateTime',
        'name' => 'getName',
        'parent_template_id' => 'getParentTemplateId',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'rollback_template_content' => 'getRollbackTemplateContent',
        'rollback_template_params' => 'getRollbackTemplateParams',
        'software_type' => 'getSoftwareType',
        'software_variant' => 'getSoftwareVariant',
        'software_version' => 'getSoftwareVersion',
        'tags' => 'getTags',
        'template_content' => 'getTemplateContent',
        'template_params' => 'getTemplateParams',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_types'] = isset($data['device_types']) ? $data['device_types'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_template_id'] = isset($data['parent_template_id']) ? $data['parent_template_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rollback_template_content'] = isset($data['rollback_template_content']) ? $data['rollback_template_content'] : null;
        $this->container['rollback_template_params'] = isset($data['rollback_template_params']) ? $data['rollback_template_params'] : null;
        $this->container['software_type'] = isset($data['software_type']) ? $data['software_type'] : null;
        $this->container['software_variant'] = isset($data['software_variant']) ? $data['software_variant'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['template_content'] = isset($data['template_content']) ? $data['template_content'] : null;
        $this->container['template_params'] = isset($data['template_params']) ? $data['template_params'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_types
     *
     * @return \cisco\com\dnac\v1\api\client\model\TemplateDTODeviceTypes[]
     */
    public function getDeviceTypes()
    {
        return $this->container['device_types'];
    }

    /**
     * Sets device_types
     *
     * @param \cisco\com\dnac\v1\api\client\model\TemplateDTODeviceTypes[] $device_types device_types
     *
     * @return $this
     */
    public function setDeviceTypes($device_types)
    {
        $this->container['device_types'] = $device_types;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_update_time
     *
     * @return int
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param int $last_update_time last_update_time
     *
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_template_id
     *
     * @return string
     */
    public function getParentTemplateId()
    {
        return $this->container['parent_template_id'];
    }

    /**
     * Sets parent_template_id
     *
     * @param string $parent_template_id parent_template_id
     *
     * @return $this
     */
    public function setParentTemplateId($parent_template_id)
    {
        $this->container['parent_template_id'] = $parent_template_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rollback_template_content
     *
     * @return string
     */
    public function getRollbackTemplateContent()
    {
        return $this->container['rollback_template_content'];
    }

    /**
     * Sets rollback_template_content
     *
     * @param string $rollback_template_content rollback_template_content
     *
     * @return $this
     */
    public function setRollbackTemplateContent($rollback_template_content)
    {
        $this->container['rollback_template_content'] = $rollback_template_content;

        return $this;
    }

    /**
     * Gets rollback_template_params
     *
     * @return \cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[]
     */
    public function getRollbackTemplateParams()
    {
        return $this->container['rollback_template_params'];
    }

    /**
     * Sets rollback_template_params
     *
     * @param \cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[] $rollback_template_params rollback_template_params
     *
     * @return $this
     */
    public function setRollbackTemplateParams($rollback_template_params)
    {
        $this->container['rollback_template_params'] = $rollback_template_params;

        return $this;
    }

    /**
     * Gets software_type
     *
     * @return string
     */
    public function getSoftwareType()
    {
        return $this->container['software_type'];
    }

    /**
     * Sets software_type
     *
     * @param string $software_type software_type
     *
     * @return $this
     */
    public function setSoftwareType($software_type)
    {
        $this->container['software_type'] = $software_type;

        return $this;
    }

    /**
     * Gets software_variant
     *
     * @return string
     */
    public function getSoftwareVariant()
    {
        return $this->container['software_variant'];
    }

    /**
     * Sets software_variant
     *
     * @param string $software_variant software_variant
     *
     * @return $this
     */
    public function setSoftwareVariant($software_variant)
    {
        $this->container['software_variant'] = $software_variant;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets template_content
     *
     * @return string
     */
    public function getTemplateContent()
    {
        return $this->container['template_content'];
    }

    /**
     * Sets template_content
     *
     * @param string $template_content template_content
     *
     * @return $this
     */
    public function setTemplateContent($template_content)
    {
        $this->container['template_content'] = $template_content;

        return $this;
    }

    /**
     * Gets template_params
     *
     * @return \cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[]
     */
    public function getTemplateParams()
    {
        return $this->container['template_params'];
    }

    /**
     * Sets template_params
     *
     * @param \cisco\com\dnac\v1\api\client\model\TemplateDTORollbackTemplateParams[] $template_params template_params
     *
     * @return $this
     */
    public function setTemplateParams($template_params)
    {
        $this->container['template_params'] = $template_params;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


