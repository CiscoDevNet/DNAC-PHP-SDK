<?php
/**
 * DeviceInnerDeviceInfoStackInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DeviceInnerDeviceInfoStackInfo Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInnerDeviceInfoStackInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device_inner_deviceInfo_stackInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_full_ring' => 'bool',
        'stack_member_list' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfoStackMemberList[]',
        'stack_ring_protocol' => 'string',
        'supports_stack_workflows' => 'bool',
        'total_member_count' => 'int',
        'valid_license_levels' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_full_ring' => null,
        'stack_member_list' => null,
        'stack_ring_protocol' => null,
        'supports_stack_workflows' => null,
        'total_member_count' => null,
        'valid_license_levels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_full_ring' => 'isFullRing',
        'stack_member_list' => 'stackMemberList',
        'stack_ring_protocol' => 'stackRingProtocol',
        'supports_stack_workflows' => 'supportsStackWorkflows',
        'total_member_count' => 'totalMemberCount',
        'valid_license_levels' => 'validLicenseLevels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_full_ring' => 'setIsFullRing',
        'stack_member_list' => 'setStackMemberList',
        'stack_ring_protocol' => 'setStackRingProtocol',
        'supports_stack_workflows' => 'setSupportsStackWorkflows',
        'total_member_count' => 'setTotalMemberCount',
        'valid_license_levels' => 'setValidLicenseLevels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_full_ring' => 'getIsFullRing',
        'stack_member_list' => 'getStackMemberList',
        'stack_ring_protocol' => 'getStackRingProtocol',
        'supports_stack_workflows' => 'getSupportsStackWorkflows',
        'total_member_count' => 'getTotalMemberCount',
        'valid_license_levels' => 'getValidLicenseLevels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_full_ring'] = isset($data['is_full_ring']) ? $data['is_full_ring'] : null;
        $this->container['stack_member_list'] = isset($data['stack_member_list']) ? $data['stack_member_list'] : null;
        $this->container['stack_ring_protocol'] = isset($data['stack_ring_protocol']) ? $data['stack_ring_protocol'] : null;
        $this->container['supports_stack_workflows'] = isset($data['supports_stack_workflows']) ? $data['supports_stack_workflows'] : null;
        $this->container['total_member_count'] = isset($data['total_member_count']) ? $data['total_member_count'] : null;
        $this->container['valid_license_levels'] = isset($data['valid_license_levels']) ? $data['valid_license_levels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_full_ring
     *
     * @return bool
     */
    public function getIsFullRing()
    {
        return $this->container['is_full_ring'];
    }

    /**
     * Sets is_full_ring
     *
     * @param bool $is_full_ring is_full_ring
     *
     * @return $this
     */
    public function setIsFullRing($is_full_ring)
    {
        $this->container['is_full_ring'] = $is_full_ring;

        return $this;
    }

    /**
     * Gets stack_member_list
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfoStackMemberList[]
     */
    public function getStackMemberList()
    {
        return $this->container['stack_member_list'];
    }

    /**
     * Sets stack_member_list
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerDeviceInfoStackInfoStackMemberList[] $stack_member_list stack_member_list
     *
     * @return $this
     */
    public function setStackMemberList($stack_member_list)
    {
        $this->container['stack_member_list'] = $stack_member_list;

        return $this;
    }

    /**
     * Gets stack_ring_protocol
     *
     * @return string
     */
    public function getStackRingProtocol()
    {
        return $this->container['stack_ring_protocol'];
    }

    /**
     * Sets stack_ring_protocol
     *
     * @param string $stack_ring_protocol stack_ring_protocol
     *
     * @return $this
     */
    public function setStackRingProtocol($stack_ring_protocol)
    {
        $this->container['stack_ring_protocol'] = $stack_ring_protocol;

        return $this;
    }

    /**
     * Gets supports_stack_workflows
     *
     * @return bool
     */
    public function getSupportsStackWorkflows()
    {
        return $this->container['supports_stack_workflows'];
    }

    /**
     * Sets supports_stack_workflows
     *
     * @param bool $supports_stack_workflows supports_stack_workflows
     *
     * @return $this
     */
    public function setSupportsStackWorkflows($supports_stack_workflows)
    {
        $this->container['supports_stack_workflows'] = $supports_stack_workflows;

        return $this;
    }

    /**
     * Gets total_member_count
     *
     * @return int
     */
    public function getTotalMemberCount()
    {
        return $this->container['total_member_count'];
    }

    /**
     * Sets total_member_count
     *
     * @param int $total_member_count total_member_count
     *
     * @return $this
     */
    public function setTotalMemberCount($total_member_count)
    {
        $this->container['total_member_count'] = $total_member_count;

        return $this;
    }

    /**
     * Gets valid_license_levels
     *
     * @return string[]
     */
    public function getValidLicenseLevels()
    {
        return $this->container['valid_license_levels'];
    }

    /**
     * Sets valid_license_levels
     *
     * @param string[] $valid_license_levels valid_license_levels
     *
     * @return $this
     */
    public function setValidLicenseLevels($valid_license_levels)
    {
        $this->container['valid_license_levels'] = $valid_license_levels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


