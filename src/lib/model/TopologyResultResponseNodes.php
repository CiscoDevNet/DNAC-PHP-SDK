<?php
/**
 * TopologyResultResponseNodes
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * TopologyResultResponseNodes Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TopologyResultResponseNodes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TopologyResult_response_nodes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acl_applied' => 'bool',
        'additional_info' => 'object',
        'custom_param' => '\cisco\com\dnac\v1\api\client\model\TopologyResultResponseCustomParam',
        'data_path_id' => 'string',
        'device_type' => 'string',
        'family' => 'string',
        'fixed' => 'bool',
        'grey_out' => 'bool',
        'id' => 'string',
        'ip' => 'string',
        'label' => 'string',
        'network_type' => 'string',
        'node_type' => 'string',
        'order' => 'int',
        'os_type' => 'string',
        'platform_id' => 'string',
        'role' => 'string',
        'role_source' => 'string',
        'software_version' => 'string',
        'tags' => 'string[]',
        'upper_node' => 'string',
        'user_id' => 'string',
        'vlan_id' => 'string',
        'x' => 'int',
        'y' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acl_applied' => null,
        'additional_info' => null,
        'custom_param' => null,
        'data_path_id' => null,
        'device_type' => null,
        'family' => null,
        'fixed' => null,
        'grey_out' => null,
        'id' => null,
        'ip' => null,
        'label' => null,
        'network_type' => null,
        'node_type' => null,
        'order' => null,
        'os_type' => null,
        'platform_id' => null,
        'role' => null,
        'role_source' => null,
        'software_version' => null,
        'tags' => null,
        'upper_node' => null,
        'user_id' => null,
        'vlan_id' => null,
        'x' => null,
        'y' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acl_applied' => 'aclApplied',
        'additional_info' => 'additionalInfo',
        'custom_param' => 'customParam',
        'data_path_id' => 'dataPathId',
        'device_type' => 'deviceType',
        'family' => 'family',
        'fixed' => 'fixed',
        'grey_out' => 'greyOut',
        'id' => 'id',
        'ip' => 'ip',
        'label' => 'label',
        'network_type' => 'networkType',
        'node_type' => 'nodeType',
        'order' => 'order',
        'os_type' => 'osType',
        'platform_id' => 'platformId',
        'role' => 'role',
        'role_source' => 'roleSource',
        'software_version' => 'softwareVersion',
        'tags' => 'tags',
        'upper_node' => 'upperNode',
        'user_id' => 'userId',
        'vlan_id' => 'vlanId',
        'x' => 'x',
        'y' => 'y'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acl_applied' => 'setAclApplied',
        'additional_info' => 'setAdditionalInfo',
        'custom_param' => 'setCustomParam',
        'data_path_id' => 'setDataPathId',
        'device_type' => 'setDeviceType',
        'family' => 'setFamily',
        'fixed' => 'setFixed',
        'grey_out' => 'setGreyOut',
        'id' => 'setId',
        'ip' => 'setIp',
        'label' => 'setLabel',
        'network_type' => 'setNetworkType',
        'node_type' => 'setNodeType',
        'order' => 'setOrder',
        'os_type' => 'setOsType',
        'platform_id' => 'setPlatformId',
        'role' => 'setRole',
        'role_source' => 'setRoleSource',
        'software_version' => 'setSoftwareVersion',
        'tags' => 'setTags',
        'upper_node' => 'setUpperNode',
        'user_id' => 'setUserId',
        'vlan_id' => 'setVlanId',
        'x' => 'setX',
        'y' => 'setY'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acl_applied' => 'getAclApplied',
        'additional_info' => 'getAdditionalInfo',
        'custom_param' => 'getCustomParam',
        'data_path_id' => 'getDataPathId',
        'device_type' => 'getDeviceType',
        'family' => 'getFamily',
        'fixed' => 'getFixed',
        'grey_out' => 'getGreyOut',
        'id' => 'getId',
        'ip' => 'getIp',
        'label' => 'getLabel',
        'network_type' => 'getNetworkType',
        'node_type' => 'getNodeType',
        'order' => 'getOrder',
        'os_type' => 'getOsType',
        'platform_id' => 'getPlatformId',
        'role' => 'getRole',
        'role_source' => 'getRoleSource',
        'software_version' => 'getSoftwareVersion',
        'tags' => 'getTags',
        'upper_node' => 'getUpperNode',
        'user_id' => 'getUserId',
        'vlan_id' => 'getVlanId',
        'x' => 'getX',
        'y' => 'getY'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acl_applied'] = isset($data['acl_applied']) ? $data['acl_applied'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['custom_param'] = isset($data['custom_param']) ? $data['custom_param'] : null;
        $this->container['data_path_id'] = isset($data['data_path_id']) ? $data['data_path_id'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
        $this->container['family'] = isset($data['family']) ? $data['family'] : null;
        $this->container['fixed'] = isset($data['fixed']) ? $data['fixed'] : null;
        $this->container['grey_out'] = isset($data['grey_out']) ? $data['grey_out'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['os_type'] = isset($data['os_type']) ? $data['os_type'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['role_source'] = isset($data['role_source']) ? $data['role_source'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['upper_node'] = isset($data['upper_node']) ? $data['upper_node'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets acl_applied
     *
     * @return bool
     */
    public function getAclApplied()
    {
        return $this->container['acl_applied'];
    }

    /**
     * Sets acl_applied
     *
     * @param bool $acl_applied acl_applied
     *
     * @return $this
     */
    public function setAclApplied($acl_applied)
    {
        $this->container['acl_applied'] = $acl_applied;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return object
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param object $additional_info additional_info
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets custom_param
     *
     * @return \cisco\com\dnac\v1\api\client\model\TopologyResultResponseCustomParam
     */
    public function getCustomParam()
    {
        return $this->container['custom_param'];
    }

    /**
     * Sets custom_param
     *
     * @param \cisco\com\dnac\v1\api\client\model\TopologyResultResponseCustomParam $custom_param custom_param
     *
     * @return $this
     */
    public function setCustomParam($custom_param)
    {
        $this->container['custom_param'] = $custom_param;

        return $this;
    }

    /**
     * Gets data_path_id
     *
     * @return string
     */
    public function getDataPathId()
    {
        return $this->container['data_path_id'];
    }

    /**
     * Sets data_path_id
     *
     * @param string $data_path_id data_path_id
     *
     * @return $this
     */
    public function setDataPathId($data_path_id)
    {
        $this->container['data_path_id'] = $data_path_id;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type device_type
     *
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets family
     *
     * @return string
     */
    public function getFamily()
    {
        return $this->container['family'];
    }

    /**
     * Sets family
     *
     * @param string $family family
     *
     * @return $this
     */
    public function setFamily($family)
    {
        $this->container['family'] = $family;

        return $this;
    }

    /**
     * Gets fixed
     *
     * @return bool
     */
    public function getFixed()
    {
        return $this->container['fixed'];
    }

    /**
     * Sets fixed
     *
     * @param bool $fixed fixed
     *
     * @return $this
     */
    public function setFixed($fixed)
    {
        $this->container['fixed'] = $fixed;

        return $this;
    }

    /**
     * Gets grey_out
     *
     * @return bool
     */
    public function getGreyOut()
    {
        return $this->container['grey_out'];
    }

    /**
     * Sets grey_out
     *
     * @param bool $grey_out grey_out
     *
     * @return $this
     */
    public function setGreyOut($grey_out)
    {
        $this->container['grey_out'] = $grey_out;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param string $os_type os_type
     *
     * @return $this
     */
    public function setOsType($os_type)
    {
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id platform_id
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_source
     *
     * @return string
     */
    public function getRoleSource()
    {
        return $this->container['role_source'];
    }

    /**
     * Sets role_source
     *
     * @param string $role_source role_source
     *
     * @return $this
     */
    public function setRoleSource($role_source)
    {
        $this->container['role_source'] = $role_source;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets upper_node
     *
     * @return string
     */
    public function getUpperNode()
    {
        return $this->container['upper_node'];
    }

    /**
     * Sets upper_node
     *
     * @param string $upper_node upper_node
     *
     * @return $this
     */
    public function setUpperNode($upper_node)
    {
        $this->container['upper_node'] = $upper_node;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return string
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param string $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets x
     *
     * @return int
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param int $x x
     *
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return int
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param int $y y
     *
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


