<?php
/**
 * ClientDetailResponseResponseDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ClientDetailResponseResponseDetail Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientDetailResponseResponseDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientDetailResponse_response_detail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'connection_status' => 'string',
        'host_type' => 'string',
        'user_id' => 'string',
        'host_name' => 'string',
        'host_os' => 'string',
        'host_version' => 'string',
        'sub_type' => 'string',
        'last_updated' => 'string',
        'health_score' => '\cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailHealthScore[]',
        'host_mac' => 'string',
        'host_ip_v4' => 'string',
        'host_ip_v6' => 'string[]',
        'auth_type' => 'string',
        'vlan_id' => 'string',
        'ssid' => 'string',
        'frequency' => 'string',
        'channel' => 'string',
        'ap_group' => 'string',
        'location' => 'string',
        'client_connection' => 'string',
        'connected_device' => 'string[]',
        'issue_count' => 'string',
        'rssi' => 'string',
        'avg_rssi' => 'string',
        'snr' => 'string',
        'avg_snr' => 'string',
        'data_rate' => 'string',
        'tx_bytes' => 'string',
        'rx_bytes' => 'string',
        'dns_success' => 'string',
        'dns_failure' => 'string',
        'onboarding' => '\cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailOnboarding',
        'onboarding_time' => 'string',
        'port' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'connection_status' => null,
        'host_type' => null,
        'user_id' => null,
        'host_name' => null,
        'host_os' => null,
        'host_version' => null,
        'sub_type' => null,
        'last_updated' => null,
        'health_score' => null,
        'host_mac' => null,
        'host_ip_v4' => null,
        'host_ip_v6' => null,
        'auth_type' => null,
        'vlan_id' => null,
        'ssid' => null,
        'frequency' => null,
        'channel' => null,
        'ap_group' => null,
        'location' => null,
        'client_connection' => null,
        'connected_device' => null,
        'issue_count' => null,
        'rssi' => null,
        'avg_rssi' => null,
        'snr' => null,
        'avg_snr' => null,
        'data_rate' => null,
        'tx_bytes' => null,
        'rx_bytes' => null,
        'dns_success' => null,
        'dns_failure' => null,
        'onboarding' => null,
        'onboarding_time' => null,
        'port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'connection_status' => 'connectionStatus',
        'host_type' => 'hostType',
        'user_id' => 'userId',
        'host_name' => 'hostName',
        'host_os' => 'hostOs',
        'host_version' => 'hostVersion',
        'sub_type' => 'subType',
        'last_updated' => 'lastUpdated',
        'health_score' => 'healthScore',
        'host_mac' => 'hostMac',
        'host_ip_v4' => 'hostIpV4',
        'host_ip_v6' => 'hostIpV6',
        'auth_type' => 'authType',
        'vlan_id' => 'vlanId',
        'ssid' => 'ssid',
        'frequency' => 'frequency',
        'channel' => 'channel',
        'ap_group' => 'apGroup',
        'location' => 'location',
        'client_connection' => 'clientConnection',
        'connected_device' => 'connectedDevice',
        'issue_count' => 'issueCount',
        'rssi' => 'rssi',
        'avg_rssi' => 'avgRssi',
        'snr' => 'snr',
        'avg_snr' => 'avgSnr',
        'data_rate' => 'dataRate',
        'tx_bytes' => 'txBytes',
        'rx_bytes' => 'rxBytes',
        'dns_success' => 'dnsSuccess',
        'dns_failure' => 'dnsFailure',
        'onboarding' => 'onboarding',
        'onboarding_time' => 'onboardingTime',
        'port' => 'port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'connection_status' => 'setConnectionStatus',
        'host_type' => 'setHostType',
        'user_id' => 'setUserId',
        'host_name' => 'setHostName',
        'host_os' => 'setHostOs',
        'host_version' => 'setHostVersion',
        'sub_type' => 'setSubType',
        'last_updated' => 'setLastUpdated',
        'health_score' => 'setHealthScore',
        'host_mac' => 'setHostMac',
        'host_ip_v4' => 'setHostIpV4',
        'host_ip_v6' => 'setHostIpV6',
        'auth_type' => 'setAuthType',
        'vlan_id' => 'setVlanId',
        'ssid' => 'setSsid',
        'frequency' => 'setFrequency',
        'channel' => 'setChannel',
        'ap_group' => 'setApGroup',
        'location' => 'setLocation',
        'client_connection' => 'setClientConnection',
        'connected_device' => 'setConnectedDevice',
        'issue_count' => 'setIssueCount',
        'rssi' => 'setRssi',
        'avg_rssi' => 'setAvgRssi',
        'snr' => 'setSnr',
        'avg_snr' => 'setAvgSnr',
        'data_rate' => 'setDataRate',
        'tx_bytes' => 'setTxBytes',
        'rx_bytes' => 'setRxBytes',
        'dns_success' => 'setDnsSuccess',
        'dns_failure' => 'setDnsFailure',
        'onboarding' => 'setOnboarding',
        'onboarding_time' => 'setOnboardingTime',
        'port' => 'setPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'connection_status' => 'getConnectionStatus',
        'host_type' => 'getHostType',
        'user_id' => 'getUserId',
        'host_name' => 'getHostName',
        'host_os' => 'getHostOs',
        'host_version' => 'getHostVersion',
        'sub_type' => 'getSubType',
        'last_updated' => 'getLastUpdated',
        'health_score' => 'getHealthScore',
        'host_mac' => 'getHostMac',
        'host_ip_v4' => 'getHostIpV4',
        'host_ip_v6' => 'getHostIpV6',
        'auth_type' => 'getAuthType',
        'vlan_id' => 'getVlanId',
        'ssid' => 'getSsid',
        'frequency' => 'getFrequency',
        'channel' => 'getChannel',
        'ap_group' => 'getApGroup',
        'location' => 'getLocation',
        'client_connection' => 'getClientConnection',
        'connected_device' => 'getConnectedDevice',
        'issue_count' => 'getIssueCount',
        'rssi' => 'getRssi',
        'avg_rssi' => 'getAvgRssi',
        'snr' => 'getSnr',
        'avg_snr' => 'getAvgSnr',
        'data_rate' => 'getDataRate',
        'tx_bytes' => 'getTxBytes',
        'rx_bytes' => 'getRxBytes',
        'dns_success' => 'getDnsSuccess',
        'dns_failure' => 'getDnsFailure',
        'onboarding' => 'getOnboarding',
        'onboarding_time' => 'getOnboardingTime',
        'port' => 'getPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['connection_status'] = isset($data['connection_status']) ? $data['connection_status'] : null;
        $this->container['host_type'] = isset($data['host_type']) ? $data['host_type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['host_name'] = isset($data['host_name']) ? $data['host_name'] : null;
        $this->container['host_os'] = isset($data['host_os']) ? $data['host_os'] : null;
        $this->container['host_version'] = isset($data['host_version']) ? $data['host_version'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['health_score'] = isset($data['health_score']) ? $data['health_score'] : null;
        $this->container['host_mac'] = isset($data['host_mac']) ? $data['host_mac'] : null;
        $this->container['host_ip_v4'] = isset($data['host_ip_v4']) ? $data['host_ip_v4'] : null;
        $this->container['host_ip_v6'] = isset($data['host_ip_v6']) ? $data['host_ip_v6'] : null;
        $this->container['auth_type'] = isset($data['auth_type']) ? $data['auth_type'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['ssid'] = isset($data['ssid']) ? $data['ssid'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['ap_group'] = isset($data['ap_group']) ? $data['ap_group'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['client_connection'] = isset($data['client_connection']) ? $data['client_connection'] : null;
        $this->container['connected_device'] = isset($data['connected_device']) ? $data['connected_device'] : null;
        $this->container['issue_count'] = isset($data['issue_count']) ? $data['issue_count'] : null;
        $this->container['rssi'] = isset($data['rssi']) ? $data['rssi'] : null;
        $this->container['avg_rssi'] = isset($data['avg_rssi']) ? $data['avg_rssi'] : null;
        $this->container['snr'] = isset($data['snr']) ? $data['snr'] : null;
        $this->container['avg_snr'] = isset($data['avg_snr']) ? $data['avg_snr'] : null;
        $this->container['data_rate'] = isset($data['data_rate']) ? $data['data_rate'] : null;
        $this->container['tx_bytes'] = isset($data['tx_bytes']) ? $data['tx_bytes'] : null;
        $this->container['rx_bytes'] = isset($data['rx_bytes']) ? $data['rx_bytes'] : null;
        $this->container['dns_success'] = isset($data['dns_success']) ? $data['dns_success'] : null;
        $this->container['dns_failure'] = isset($data['dns_failure']) ? $data['dns_failure'] : null;
        $this->container['onboarding'] = isset($data['onboarding']) ? $data['onboarding'] : null;
        $this->container['onboarding_time'] = isset($data['onboarding_time']) ? $data['onboarding_time'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets connection_status
     *
     * @return string
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string $connection_status connection_status
     *
     * @return $this
     */
    public function setConnectionStatus($connection_status)
    {
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets host_type
     *
     * @return string
     */
    public function getHostType()
    {
        return $this->container['host_type'];
    }

    /**
     * Sets host_type
     *
     * @param string $host_type host_type
     *
     * @return $this
     */
    public function setHostType($host_type)
    {
        $this->container['host_type'] = $host_type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string $host_name host_name
     *
     * @return $this
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets host_os
     *
     * @return string
     */
    public function getHostOs()
    {
        return $this->container['host_os'];
    }

    /**
     * Sets host_os
     *
     * @param string $host_os host_os
     *
     * @return $this
     */
    public function setHostOs($host_os)
    {
        $this->container['host_os'] = $host_os;

        return $this;
    }

    /**
     * Gets host_version
     *
     * @return string
     */
    public function getHostVersion()
    {
        return $this->container['host_version'];
    }

    /**
     * Sets host_version
     *
     * @param string $host_version host_version
     *
     * @return $this
     */
    public function setHostVersion($host_version)
    {
        $this->container['host_version'] = $host_version;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string $sub_type sub_type
     *
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets health_score
     *
     * @return \cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailHealthScore[]
     */
    public function getHealthScore()
    {
        return $this->container['health_score'];
    }

    /**
     * Sets health_score
     *
     * @param \cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailHealthScore[] $health_score health_score
     *
     * @return $this
     */
    public function setHealthScore($health_score)
    {
        $this->container['health_score'] = $health_score;

        return $this;
    }

    /**
     * Gets host_mac
     *
     * @return string
     */
    public function getHostMac()
    {
        return $this->container['host_mac'];
    }

    /**
     * Sets host_mac
     *
     * @param string $host_mac host_mac
     *
     * @return $this
     */
    public function setHostMac($host_mac)
    {
        $this->container['host_mac'] = $host_mac;

        return $this;
    }

    /**
     * Gets host_ip_v4
     *
     * @return string
     */
    public function getHostIpV4()
    {
        return $this->container['host_ip_v4'];
    }

    /**
     * Sets host_ip_v4
     *
     * @param string $host_ip_v4 host_ip_v4
     *
     * @return $this
     */
    public function setHostIpV4($host_ip_v4)
    {
        $this->container['host_ip_v4'] = $host_ip_v4;

        return $this;
    }

    /**
     * Gets host_ip_v6
     *
     * @return string[]
     */
    public function getHostIpV6()
    {
        return $this->container['host_ip_v6'];
    }

    /**
     * Sets host_ip_v6
     *
     * @param string[] $host_ip_v6 host_ip_v6
     *
     * @return $this
     */
    public function setHostIpV6($host_ip_v6)
    {
        $this->container['host_ip_v6'] = $host_ip_v6;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string $auth_type auth_type
     *
     * @return $this
     */
    public function setAuthType($auth_type)
    {
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return string
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param string $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets ssid
     *
     * @return string
     */
    public function getSsid()
    {
        return $this->container['ssid'];
    }

    /**
     * Sets ssid
     *
     * @param string $ssid ssid
     *
     * @return $this
     */
    public function setSsid($ssid)
    {
        $this->container['ssid'] = $ssid;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets ap_group
     *
     * @return string
     */
    public function getApGroup()
    {
        return $this->container['ap_group'];
    }

    /**
     * Sets ap_group
     *
     * @param string $ap_group ap_group
     *
     * @return $this
     */
    public function setApGroup($ap_group)
    {
        $this->container['ap_group'] = $ap_group;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets client_connection
     *
     * @return string
     */
    public function getClientConnection()
    {
        return $this->container['client_connection'];
    }

    /**
     * Sets client_connection
     *
     * @param string $client_connection client_connection
     *
     * @return $this
     */
    public function setClientConnection($client_connection)
    {
        $this->container['client_connection'] = $client_connection;

        return $this;
    }

    /**
     * Gets connected_device
     *
     * @return string[]
     */
    public function getConnectedDevice()
    {
        return $this->container['connected_device'];
    }

    /**
     * Sets connected_device
     *
     * @param string[] $connected_device connected_device
     *
     * @return $this
     */
    public function setConnectedDevice($connected_device)
    {
        $this->container['connected_device'] = $connected_device;

        return $this;
    }

    /**
     * Gets issue_count
     *
     * @return string
     */
    public function getIssueCount()
    {
        return $this->container['issue_count'];
    }

    /**
     * Sets issue_count
     *
     * @param string $issue_count issue_count
     *
     * @return $this
     */
    public function setIssueCount($issue_count)
    {
        $this->container['issue_count'] = $issue_count;

        return $this;
    }

    /**
     * Gets rssi
     *
     * @return string
     */
    public function getRssi()
    {
        return $this->container['rssi'];
    }

    /**
     * Sets rssi
     *
     * @param string $rssi rssi
     *
     * @return $this
     */
    public function setRssi($rssi)
    {
        $this->container['rssi'] = $rssi;

        return $this;
    }

    /**
     * Gets avg_rssi
     *
     * @return string
     */
    public function getAvgRssi()
    {
        return $this->container['avg_rssi'];
    }

    /**
     * Sets avg_rssi
     *
     * @param string $avg_rssi avg_rssi
     *
     * @return $this
     */
    public function setAvgRssi($avg_rssi)
    {
        $this->container['avg_rssi'] = $avg_rssi;

        return $this;
    }

    /**
     * Gets snr
     *
     * @return string
     */
    public function getSnr()
    {
        return $this->container['snr'];
    }

    /**
     * Sets snr
     *
     * @param string $snr snr
     *
     * @return $this
     */
    public function setSnr($snr)
    {
        $this->container['snr'] = $snr;

        return $this;
    }

    /**
     * Gets avg_snr
     *
     * @return string
     */
    public function getAvgSnr()
    {
        return $this->container['avg_snr'];
    }

    /**
     * Sets avg_snr
     *
     * @param string $avg_snr avg_snr
     *
     * @return $this
     */
    public function setAvgSnr($avg_snr)
    {
        $this->container['avg_snr'] = $avg_snr;

        return $this;
    }

    /**
     * Gets data_rate
     *
     * @return string
     */
    public function getDataRate()
    {
        return $this->container['data_rate'];
    }

    /**
     * Sets data_rate
     *
     * @param string $data_rate data_rate
     *
     * @return $this
     */
    public function setDataRate($data_rate)
    {
        $this->container['data_rate'] = $data_rate;

        return $this;
    }

    /**
     * Gets tx_bytes
     *
     * @return string
     */
    public function getTxBytes()
    {
        return $this->container['tx_bytes'];
    }

    /**
     * Sets tx_bytes
     *
     * @param string $tx_bytes tx_bytes
     *
     * @return $this
     */
    public function setTxBytes($tx_bytes)
    {
        $this->container['tx_bytes'] = $tx_bytes;

        return $this;
    }

    /**
     * Gets rx_bytes
     *
     * @return string
     */
    public function getRxBytes()
    {
        return $this->container['rx_bytes'];
    }

    /**
     * Sets rx_bytes
     *
     * @param string $rx_bytes rx_bytes
     *
     * @return $this
     */
    public function setRxBytes($rx_bytes)
    {
        $this->container['rx_bytes'] = $rx_bytes;

        return $this;
    }

    /**
     * Gets dns_success
     *
     * @return string
     */
    public function getDnsSuccess()
    {
        return $this->container['dns_success'];
    }

    /**
     * Sets dns_success
     *
     * @param string $dns_success dns_success
     *
     * @return $this
     */
    public function setDnsSuccess($dns_success)
    {
        $this->container['dns_success'] = $dns_success;

        return $this;
    }

    /**
     * Gets dns_failure
     *
     * @return string
     */
    public function getDnsFailure()
    {
        return $this->container['dns_failure'];
    }

    /**
     * Sets dns_failure
     *
     * @param string $dns_failure dns_failure
     *
     * @return $this
     */
    public function setDnsFailure($dns_failure)
    {
        $this->container['dns_failure'] = $dns_failure;

        return $this;
    }

    /**
     * Gets onboarding
     *
     * @return \cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailOnboarding
     */
    public function getOnboarding()
    {
        return $this->container['onboarding'];
    }

    /**
     * Sets onboarding
     *
     * @param \cisco\com\dnac\v1\api\client\model\ClientDetailResponseResponseDetailOnboarding $onboarding onboarding
     *
     * @return $this
     */
    public function setOnboarding($onboarding)
    {
        $this->container['onboarding'] = $onboarding;

        return $this;
    }

    /**
     * Gets onboarding_time
     *
     * @return string
     */
    public function getOnboardingTime()
    {
        return $this->container['onboarding_time'];
    }

    /**
     * Sets onboarding_time
     *
     * @param string $onboarding_time onboarding_time
     *
     * @return $this
     */
    public function setOnboardingTime($onboarding_time)
    {
        $this->container['onboarding_time'] = $onboarding_time;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


