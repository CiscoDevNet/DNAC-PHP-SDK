<?php
/**
 * ClientHealthResponseScoreDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ClientHealthResponseScoreDetail Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientHealthResponseScoreDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientHealthResponse_scoreDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'score_category' => '\cisco\com\dnac\v1\api\client\model\ClientHealthResponseScoreCategory',
        'score_value' => 'string',
        'client_count' => 'string',
        'client_unique_count' => 'string',
        'starttime' => 'string',
        'endtime' => 'string',
        'score_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'score_category' => null,
        'score_value' => null,
        'client_count' => null,
        'client_unique_count' => null,
        'starttime' => null,
        'endtime' => null,
        'score_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'score_category' => 'scoreCategory',
        'score_value' => 'scoreValue',
        'client_count' => 'clientCount',
        'client_unique_count' => 'clientUniqueCount',
        'starttime' => 'starttime',
        'endtime' => 'endtime',
        'score_list' => 'scoreList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'score_category' => 'setScoreCategory',
        'score_value' => 'setScoreValue',
        'client_count' => 'setClientCount',
        'client_unique_count' => 'setClientUniqueCount',
        'starttime' => 'setStarttime',
        'endtime' => 'setEndtime',
        'score_list' => 'setScoreList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'score_category' => 'getScoreCategory',
        'score_value' => 'getScoreValue',
        'client_count' => 'getClientCount',
        'client_unique_count' => 'getClientUniqueCount',
        'starttime' => 'getStarttime',
        'endtime' => 'getEndtime',
        'score_list' => 'getScoreList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['score_category'] = isset($data['score_category']) ? $data['score_category'] : null;
        $this->container['score_value'] = isset($data['score_value']) ? $data['score_value'] : null;
        $this->container['client_count'] = isset($data['client_count']) ? $data['client_count'] : null;
        $this->container['client_unique_count'] = isset($data['client_unique_count']) ? $data['client_unique_count'] : null;
        $this->container['starttime'] = isset($data['starttime']) ? $data['starttime'] : null;
        $this->container['endtime'] = isset($data['endtime']) ? $data['endtime'] : null;
        $this->container['score_list'] = isset($data['score_list']) ? $data['score_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets score_category
     *
     * @return \cisco\com\dnac\v1\api\client\model\ClientHealthResponseScoreCategory
     */
    public function getScoreCategory()
    {
        return $this->container['score_category'];
    }

    /**
     * Sets score_category
     *
     * @param \cisco\com\dnac\v1\api\client\model\ClientHealthResponseScoreCategory $score_category score_category
     *
     * @return $this
     */
    public function setScoreCategory($score_category)
    {
        $this->container['score_category'] = $score_category;

        return $this;
    }

    /**
     * Gets score_value
     *
     * @return string
     */
    public function getScoreValue()
    {
        return $this->container['score_value'];
    }

    /**
     * Sets score_value
     *
     * @param string $score_value score_value
     *
     * @return $this
     */
    public function setScoreValue($score_value)
    {
        $this->container['score_value'] = $score_value;

        return $this;
    }

    /**
     * Gets client_count
     *
     * @return string
     */
    public function getClientCount()
    {
        return $this->container['client_count'];
    }

    /**
     * Sets client_count
     *
     * @param string $client_count client_count
     *
     * @return $this
     */
    public function setClientCount($client_count)
    {
        $this->container['client_count'] = $client_count;

        return $this;
    }

    /**
     * Gets client_unique_count
     *
     * @return string
     */
    public function getClientUniqueCount()
    {
        return $this->container['client_unique_count'];
    }

    /**
     * Sets client_unique_count
     *
     * @param string $client_unique_count client_unique_count
     *
     * @return $this
     */
    public function setClientUniqueCount($client_unique_count)
    {
        $this->container['client_unique_count'] = $client_unique_count;

        return $this;
    }

    /**
     * Gets starttime
     *
     * @return string
     */
    public function getStarttime()
    {
        return $this->container['starttime'];
    }

    /**
     * Sets starttime
     *
     * @param string $starttime starttime
     *
     * @return $this
     */
    public function setStarttime($starttime)
    {
        $this->container['starttime'] = $starttime;

        return $this;
    }

    /**
     * Gets endtime
     *
     * @return string
     */
    public function getEndtime()
    {
        return $this->container['endtime'];
    }

    /**
     * Sets endtime
     *
     * @param string $endtime endtime
     *
     * @return $this
     */
    public function setEndtime($endtime)
    {
        $this->container['endtime'] = $endtime;

        return $this;
    }

    /**
     * Gets score_list
     *
     * @return string[]
     */
    public function getScoreList()
    {
        return $this->container['score_list'];
    }

    /**
     * Sets score_list
     *
     * @param string[] $score_list score_list
     *
     * @return $this
     */
    public function setScoreList($score_list)
    {
        $this->container['score_list'] = $score_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


