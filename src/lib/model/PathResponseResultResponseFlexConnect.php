<?php
/**
 * PathResponseResultResponseFlexConnect
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponseFlexConnect Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponseFlexConnect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_flexConnect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authentication' => 'string',
        'data_switching' => 'string',
        'egress_acl_analysis' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis',
        'ingress_acl_analysis' => '\cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis',
        'wireless_lan_controller_id' => 'string',
        'wireless_lan_controller_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authentication' => null,
        'data_switching' => null,
        'egress_acl_analysis' => null,
        'ingress_acl_analysis' => null,
        'wireless_lan_controller_id' => null,
        'wireless_lan_controller_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication' => 'authentication',
        'data_switching' => 'dataSwitching',
        'egress_acl_analysis' => 'egressAclAnalysis',
        'ingress_acl_analysis' => 'ingressAclAnalysis',
        'wireless_lan_controller_id' => 'wirelessLanControllerId',
        'wireless_lan_controller_name' => 'wirelessLanControllerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication' => 'setAuthentication',
        'data_switching' => 'setDataSwitching',
        'egress_acl_analysis' => 'setEgressAclAnalysis',
        'ingress_acl_analysis' => 'setIngressAclAnalysis',
        'wireless_lan_controller_id' => 'setWirelessLanControllerId',
        'wireless_lan_controller_name' => 'setWirelessLanControllerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication' => 'getAuthentication',
        'data_switching' => 'getDataSwitching',
        'egress_acl_analysis' => 'getEgressAclAnalysis',
        'ingress_acl_analysis' => 'getIngressAclAnalysis',
        'wireless_lan_controller_id' => 'getWirelessLanControllerId',
        'wireless_lan_controller_name' => 'getWirelessLanControllerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_LOCAL = 'LOCAL';
    const AUTHENTICATION_CENTRAL = 'CENTRAL';
    const DATA_SWITCHING_LOCAL = 'LOCAL';
    const DATA_SWITCHING_CENTRAL = 'CENTRAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAllowableValues()
    {
        return [
            self::AUTHENTICATION_LOCAL,
            self::AUTHENTICATION_CENTRAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataSwitchingAllowableValues()
    {
        return [
            self::DATA_SWITCHING_LOCAL,
            self::DATA_SWITCHING_CENTRAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authentication'] = isset($data['authentication']) ? $data['authentication'] : null;
        $this->container['data_switching'] = isset($data['data_switching']) ? $data['data_switching'] : null;
        $this->container['egress_acl_analysis'] = isset($data['egress_acl_analysis']) ? $data['egress_acl_analysis'] : null;
        $this->container['ingress_acl_analysis'] = isset($data['ingress_acl_analysis']) ? $data['ingress_acl_analysis'] : null;
        $this->container['wireless_lan_controller_id'] = isset($data['wireless_lan_controller_id']) ? $data['wireless_lan_controller_id'] : null;
        $this->container['wireless_lan_controller_name'] = isset($data['wireless_lan_controller_name']) ? $data['wireless_lan_controller_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!in_array($this->container['authentication'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authentication', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDataSwitchingAllowableValues();
        if (!in_array($this->container['data_switching'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'data_switching', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!in_array($this->container['authentication'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getDataSwitchingAllowableValues();
        if (!in_array($this->container['data_switching'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets authentication
     *
     * @return string
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string $authentication authentication
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $allowedValues = $this->getAuthenticationAllowableValues();
        if (!is_null($authentication) && !in_array($authentication, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authentication', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets data_switching
     *
     * @return string
     */
    public function getDataSwitching()
    {
        return $this->container['data_switching'];
    }

    /**
     * Sets data_switching
     *
     * @param string $data_switching data_switching
     *
     * @return $this
     */
    public function setDataSwitching($data_switching)
    {
        $allowedValues = $this->getDataSwitchingAllowableValues();
        if (!is_null($data_switching) && !in_array($data_switching, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_switching', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_switching'] = $data_switching;

        return $this;
    }

    /**
     * Gets egress_acl_analysis
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
     */
    public function getEgressAclAnalysis()
    {
        return $this->container['egress_acl_analysis'];
    }

    /**
     * Sets egress_acl_analysis
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis $egress_acl_analysis egress_acl_analysis
     *
     * @return $this
     */
    public function setEgressAclAnalysis($egress_acl_analysis)
    {
        $this->container['egress_acl_analysis'] = $egress_acl_analysis;

        return $this;
    }

    /**
     * Gets ingress_acl_analysis
     *
     * @return \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis
     */
    public function getIngressAclAnalysis()
    {
        return $this->container['ingress_acl_analysis'];
    }

    /**
     * Sets ingress_acl_analysis
     *
     * @param \cisco\com\dnac\v1\api\client\model\PathResponseResultResponseEgressPhysicalInterfaceAclAnalysis $ingress_acl_analysis ingress_acl_analysis
     *
     * @return $this
     */
    public function setIngressAclAnalysis($ingress_acl_analysis)
    {
        $this->container['ingress_acl_analysis'] = $ingress_acl_analysis;

        return $this;
    }

    /**
     * Gets wireless_lan_controller_id
     *
     * @return string
     */
    public function getWirelessLanControllerId()
    {
        return $this->container['wireless_lan_controller_id'];
    }

    /**
     * Sets wireless_lan_controller_id
     *
     * @param string $wireless_lan_controller_id wireless_lan_controller_id
     *
     * @return $this
     */
    public function setWirelessLanControllerId($wireless_lan_controller_id)
    {
        $this->container['wireless_lan_controller_id'] = $wireless_lan_controller_id;

        return $this;
    }

    /**
     * Gets wireless_lan_controller_name
     *
     * @return string
     */
    public function getWirelessLanControllerName()
    {
        return $this->container['wireless_lan_controller_name'];
    }

    /**
     * Sets wireless_lan_controller_name
     *
     * @param string $wireless_lan_controller_name wireless_lan_controller_name
     *
     * @return $this
     */
    public function setWirelessLanControllerName($wireless_lan_controller_name)
    {
        $this->container['wireless_lan_controller_name'] = $wireless_lan_controller_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


