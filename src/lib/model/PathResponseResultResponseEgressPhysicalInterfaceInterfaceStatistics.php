<?php
/**
 * PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponseEgressPhysicalInterfaceInterfaceStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_egressPhysicalInterface_interfaceStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'admin_status' => 'string',
        'input_packets' => 'int',
        'input_queue_count' => 'int',
        'input_queue_drops' => 'int',
        'input_queue_flushes' => 'int',
        'input_queue_max_depth' => 'int',
        'input_ratebps' => 'int',
        'operational_status' => 'string',
        'output_drop' => 'int',
        'output_packets' => 'int',
        'output_queue_count' => 'int',
        'output_queue_depth' => 'int',
        'output_ratebps' => 'int',
        'refreshed_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'admin_status' => null,
        'input_packets' => null,
        'input_queue_count' => null,
        'input_queue_drops' => null,
        'input_queue_flushes' => null,
        'input_queue_max_depth' => null,
        'input_ratebps' => null,
        'operational_status' => null,
        'output_drop' => null,
        'output_packets' => null,
        'output_queue_count' => null,
        'output_queue_depth' => null,
        'output_ratebps' => null,
        'refreshed_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_status' => 'adminStatus',
        'input_packets' => 'inputPackets',
        'input_queue_count' => 'inputQueueCount',
        'input_queue_drops' => 'inputQueueDrops',
        'input_queue_flushes' => 'inputQueueFlushes',
        'input_queue_max_depth' => 'inputQueueMaxDepth',
        'input_ratebps' => 'inputRatebps',
        'operational_status' => 'operationalStatus',
        'output_drop' => 'outputDrop',
        'output_packets' => 'outputPackets',
        'output_queue_count' => 'outputQueueCount',
        'output_queue_depth' => 'outputQueueDepth',
        'output_ratebps' => 'outputRatebps',
        'refreshed_at' => 'refreshedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_status' => 'setAdminStatus',
        'input_packets' => 'setInputPackets',
        'input_queue_count' => 'setInputQueueCount',
        'input_queue_drops' => 'setInputQueueDrops',
        'input_queue_flushes' => 'setInputQueueFlushes',
        'input_queue_max_depth' => 'setInputQueueMaxDepth',
        'input_ratebps' => 'setInputRatebps',
        'operational_status' => 'setOperationalStatus',
        'output_drop' => 'setOutputDrop',
        'output_packets' => 'setOutputPackets',
        'output_queue_count' => 'setOutputQueueCount',
        'output_queue_depth' => 'setOutputQueueDepth',
        'output_ratebps' => 'setOutputRatebps',
        'refreshed_at' => 'setRefreshedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_status' => 'getAdminStatus',
        'input_packets' => 'getInputPackets',
        'input_queue_count' => 'getInputQueueCount',
        'input_queue_drops' => 'getInputQueueDrops',
        'input_queue_flushes' => 'getInputQueueFlushes',
        'input_queue_max_depth' => 'getInputQueueMaxDepth',
        'input_ratebps' => 'getInputRatebps',
        'operational_status' => 'getOperationalStatus',
        'output_drop' => 'getOutputDrop',
        'output_packets' => 'getOutputPackets',
        'output_queue_count' => 'getOutputQueueCount',
        'output_queue_depth' => 'getOutputQueueDepth',
        'output_ratebps' => 'getOutputRatebps',
        'refreshed_at' => 'getRefreshedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin_status'] = isset($data['admin_status']) ? $data['admin_status'] : null;
        $this->container['input_packets'] = isset($data['input_packets']) ? $data['input_packets'] : null;
        $this->container['input_queue_count'] = isset($data['input_queue_count']) ? $data['input_queue_count'] : null;
        $this->container['input_queue_drops'] = isset($data['input_queue_drops']) ? $data['input_queue_drops'] : null;
        $this->container['input_queue_flushes'] = isset($data['input_queue_flushes']) ? $data['input_queue_flushes'] : null;
        $this->container['input_queue_max_depth'] = isset($data['input_queue_max_depth']) ? $data['input_queue_max_depth'] : null;
        $this->container['input_ratebps'] = isset($data['input_ratebps']) ? $data['input_ratebps'] : null;
        $this->container['operational_status'] = isset($data['operational_status']) ? $data['operational_status'] : null;
        $this->container['output_drop'] = isset($data['output_drop']) ? $data['output_drop'] : null;
        $this->container['output_packets'] = isset($data['output_packets']) ? $data['output_packets'] : null;
        $this->container['output_queue_count'] = isset($data['output_queue_count']) ? $data['output_queue_count'] : null;
        $this->container['output_queue_depth'] = isset($data['output_queue_depth']) ? $data['output_queue_depth'] : null;
        $this->container['output_ratebps'] = isset($data['output_ratebps']) ? $data['output_ratebps'] : null;
        $this->container['refreshed_at'] = isset($data['refreshed_at']) ? $data['refreshed_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets admin_status
     *
     * @return string
     */
    public function getAdminStatus()
    {
        return $this->container['admin_status'];
    }

    /**
     * Sets admin_status
     *
     * @param string $admin_status admin_status
     *
     * @return $this
     */
    public function setAdminStatus($admin_status)
    {
        $this->container['admin_status'] = $admin_status;

        return $this;
    }

    /**
     * Gets input_packets
     *
     * @return int
     */
    public function getInputPackets()
    {
        return $this->container['input_packets'];
    }

    /**
     * Sets input_packets
     *
     * @param int $input_packets input_packets
     *
     * @return $this
     */
    public function setInputPackets($input_packets)
    {
        $this->container['input_packets'] = $input_packets;

        return $this;
    }

    /**
     * Gets input_queue_count
     *
     * @return int
     */
    public function getInputQueueCount()
    {
        return $this->container['input_queue_count'];
    }

    /**
     * Sets input_queue_count
     *
     * @param int $input_queue_count input_queue_count
     *
     * @return $this
     */
    public function setInputQueueCount($input_queue_count)
    {
        $this->container['input_queue_count'] = $input_queue_count;

        return $this;
    }

    /**
     * Gets input_queue_drops
     *
     * @return int
     */
    public function getInputQueueDrops()
    {
        return $this->container['input_queue_drops'];
    }

    /**
     * Sets input_queue_drops
     *
     * @param int $input_queue_drops input_queue_drops
     *
     * @return $this
     */
    public function setInputQueueDrops($input_queue_drops)
    {
        $this->container['input_queue_drops'] = $input_queue_drops;

        return $this;
    }

    /**
     * Gets input_queue_flushes
     *
     * @return int
     */
    public function getInputQueueFlushes()
    {
        return $this->container['input_queue_flushes'];
    }

    /**
     * Sets input_queue_flushes
     *
     * @param int $input_queue_flushes input_queue_flushes
     *
     * @return $this
     */
    public function setInputQueueFlushes($input_queue_flushes)
    {
        $this->container['input_queue_flushes'] = $input_queue_flushes;

        return $this;
    }

    /**
     * Gets input_queue_max_depth
     *
     * @return int
     */
    public function getInputQueueMaxDepth()
    {
        return $this->container['input_queue_max_depth'];
    }

    /**
     * Sets input_queue_max_depth
     *
     * @param int $input_queue_max_depth input_queue_max_depth
     *
     * @return $this
     */
    public function setInputQueueMaxDepth($input_queue_max_depth)
    {
        $this->container['input_queue_max_depth'] = $input_queue_max_depth;

        return $this;
    }

    /**
     * Gets input_ratebps
     *
     * @return int
     */
    public function getInputRatebps()
    {
        return $this->container['input_ratebps'];
    }

    /**
     * Sets input_ratebps
     *
     * @param int $input_ratebps input_ratebps
     *
     * @return $this
     */
    public function setInputRatebps($input_ratebps)
    {
        $this->container['input_ratebps'] = $input_ratebps;

        return $this;
    }

    /**
     * Gets operational_status
     *
     * @return string
     */
    public function getOperationalStatus()
    {
        return $this->container['operational_status'];
    }

    /**
     * Sets operational_status
     *
     * @param string $operational_status operational_status
     *
     * @return $this
     */
    public function setOperationalStatus($operational_status)
    {
        $this->container['operational_status'] = $operational_status;

        return $this;
    }

    /**
     * Gets output_drop
     *
     * @return int
     */
    public function getOutputDrop()
    {
        return $this->container['output_drop'];
    }

    /**
     * Sets output_drop
     *
     * @param int $output_drop output_drop
     *
     * @return $this
     */
    public function setOutputDrop($output_drop)
    {
        $this->container['output_drop'] = $output_drop;

        return $this;
    }

    /**
     * Gets output_packets
     *
     * @return int
     */
    public function getOutputPackets()
    {
        return $this->container['output_packets'];
    }

    /**
     * Sets output_packets
     *
     * @param int $output_packets output_packets
     *
     * @return $this
     */
    public function setOutputPackets($output_packets)
    {
        $this->container['output_packets'] = $output_packets;

        return $this;
    }

    /**
     * Gets output_queue_count
     *
     * @return int
     */
    public function getOutputQueueCount()
    {
        return $this->container['output_queue_count'];
    }

    /**
     * Sets output_queue_count
     *
     * @param int $output_queue_count output_queue_count
     *
     * @return $this
     */
    public function setOutputQueueCount($output_queue_count)
    {
        $this->container['output_queue_count'] = $output_queue_count;

        return $this;
    }

    /**
     * Gets output_queue_depth
     *
     * @return int
     */
    public function getOutputQueueDepth()
    {
        return $this->container['output_queue_depth'];
    }

    /**
     * Sets output_queue_depth
     *
     * @param int $output_queue_depth output_queue_depth
     *
     * @return $this
     */
    public function setOutputQueueDepth($output_queue_depth)
    {
        $this->container['output_queue_depth'] = $output_queue_depth;

        return $this;
    }

    /**
     * Gets output_ratebps
     *
     * @return int
     */
    public function getOutputRatebps()
    {
        return $this->container['output_ratebps'];
    }

    /**
     * Sets output_ratebps
     *
     * @param int $output_ratebps output_ratebps
     *
     * @return $this
     */
    public function setOutputRatebps($output_ratebps)
    {
        $this->container['output_ratebps'] = $output_ratebps;

        return $this;
    }

    /**
     * Gets refreshed_at
     *
     * @return int
     */
    public function getRefreshedAt()
    {
        return $this->container['refreshed_at'];
    }

    /**
     * Sets refreshed_at
     *
     * @param int $refreshed_at refreshed_at
     *
     * @return $this
     */
    public function setRefreshedAt($refreshed_at)
    {
        $this->container['refreshed_at'] = $refreshed_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


