<?php
/**
 * CreateSSIDRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * CreateSSIDRequest Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateSSIDRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSSIDRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'interface_name' => 'string',
        'vlan_id' => 'float',
        'ssid_name' => 'string',
        'wlan_type' => 'string',
        'authentication_type' => 'string',
        'authentication_server' => 'string',
        'passpharse' => 'string',
        'traffic_type' => 'string',
        'radio_policy' => 'string',
        'fast_transition' => 'string',
        'enable_fastlane' => 'bool',
        'enable_mac_filering' => 'bool',
        'enable_broadcast_ssid' => 'bool',
        'enable_wlan_band_selection' => 'bool',
        'wireless_network_profile_name' => 'string',
        'sites_name_hierarchy_to_map_the_profile' => 'string',
        'device_name' => 'string',
        'site_name_hierarchy_to_map_device_physical_location' => 'string',
        'managed_ap_locations' => 'string',
        'interface_ip_address' => 'string',
        'interface_net_mask_in_cidr_format' => 'string',
        'interface_gateway_ip_address' => 'string',
        'interface_lag_port_number' => 'float',
        'site_name_hierarchy_to_map_ap_physical_location' => 'string',
        'ap_names' => 'string',
        'rf_profile' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'interface_name' => null,
        'vlan_id' => null,
        'ssid_name' => null,
        'wlan_type' => null,
        'authentication_type' => null,
        'authentication_server' => null,
        'passpharse' => null,
        'traffic_type' => null,
        'radio_policy' => null,
        'fast_transition' => null,
        'enable_fastlane' => null,
        'enable_mac_filering' => null,
        'enable_broadcast_ssid' => null,
        'enable_wlan_band_selection' => null,
        'wireless_network_profile_name' => null,
        'sites_name_hierarchy_to_map_the_profile' => null,
        'device_name' => null,
        'site_name_hierarchy_to_map_device_physical_location' => null,
        'managed_ap_locations' => null,
        'interface_ip_address' => null,
        'interface_net_mask_in_cidr_format' => null,
        'interface_gateway_ip_address' => null,
        'interface_lag_port_number' => null,
        'site_name_hierarchy_to_map_ap_physical_location' => null,
        'ap_names' => null,
        'rf_profile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interface_name' => 'interfaceName',
        'vlan_id' => 'vlanId',
        'ssid_name' => 'ssidName',
        'wlan_type' => 'wlanType',
        'authentication_type' => 'authenticationType',
        'authentication_server' => 'authenticationServer',
        'passpharse' => 'passpharse',
        'traffic_type' => 'trafficType',
        'radio_policy' => 'radioPolicy',
        'fast_transition' => 'fastTransition',
        'enable_fastlane' => 'enableFastlane',
        'enable_mac_filering' => 'enableMACFilering',
        'enable_broadcast_ssid' => 'enableBroadcastSSID',
        'enable_wlan_band_selection' => 'enableWLANBandSelection',
        'wireless_network_profile_name' => 'wirelessNetworkProfileName',
        'sites_name_hierarchy_to_map_the_profile' => 'sitesNameHierarchyToMapTheProfile',
        'device_name' => 'deviceName',
        'site_name_hierarchy_to_map_device_physical_location' => 'siteNameHierarchyToMapDevicePhysicalLocation',
        'managed_ap_locations' => 'managedAPLocations',
        'interface_ip_address' => 'interfaceIPAddress',
        'interface_net_mask_in_cidr_format' => 'interfaceNetMaskInCIDRFormat',
        'interface_gateway_ip_address' => 'interfaceGatewayIPAddress',
        'interface_lag_port_number' => 'interfaceLAGPortNumber',
        'site_name_hierarchy_to_map_ap_physical_location' => 'siteNameHierarchyToMapAPPhysicalLocation',
        'ap_names' => 'apNames',
        'rf_profile' => 'rfProfile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interface_name' => 'setInterfaceName',
        'vlan_id' => 'setVlanId',
        'ssid_name' => 'setSsidName',
        'wlan_type' => 'setWlanType',
        'authentication_type' => 'setAuthenticationType',
        'authentication_server' => 'setAuthenticationServer',
        'passpharse' => 'setPasspharse',
        'traffic_type' => 'setTrafficType',
        'radio_policy' => 'setRadioPolicy',
        'fast_transition' => 'setFastTransition',
        'enable_fastlane' => 'setEnableFastlane',
        'enable_mac_filering' => 'setEnableMacFilering',
        'enable_broadcast_ssid' => 'setEnableBroadcastSsid',
        'enable_wlan_band_selection' => 'setEnableWlanBandSelection',
        'wireless_network_profile_name' => 'setWirelessNetworkProfileName',
        'sites_name_hierarchy_to_map_the_profile' => 'setSitesNameHierarchyToMapTheProfile',
        'device_name' => 'setDeviceName',
        'site_name_hierarchy_to_map_device_physical_location' => 'setSiteNameHierarchyToMapDevicePhysicalLocation',
        'managed_ap_locations' => 'setManagedApLocations',
        'interface_ip_address' => 'setInterfaceIpAddress',
        'interface_net_mask_in_cidr_format' => 'setInterfaceNetMaskInCidrFormat',
        'interface_gateway_ip_address' => 'setInterfaceGatewayIpAddress',
        'interface_lag_port_number' => 'setInterfaceLagPortNumber',
        'site_name_hierarchy_to_map_ap_physical_location' => 'setSiteNameHierarchyToMapApPhysicalLocation',
        'ap_names' => 'setApNames',
        'rf_profile' => 'setRfProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interface_name' => 'getInterfaceName',
        'vlan_id' => 'getVlanId',
        'ssid_name' => 'getSsidName',
        'wlan_type' => 'getWlanType',
        'authentication_type' => 'getAuthenticationType',
        'authentication_server' => 'getAuthenticationServer',
        'passpharse' => 'getPasspharse',
        'traffic_type' => 'getTrafficType',
        'radio_policy' => 'getRadioPolicy',
        'fast_transition' => 'getFastTransition',
        'enable_fastlane' => 'getEnableFastlane',
        'enable_mac_filering' => 'getEnableMacFilering',
        'enable_broadcast_ssid' => 'getEnableBroadcastSsid',
        'enable_wlan_band_selection' => 'getEnableWlanBandSelection',
        'wireless_network_profile_name' => 'getWirelessNetworkProfileName',
        'sites_name_hierarchy_to_map_the_profile' => 'getSitesNameHierarchyToMapTheProfile',
        'device_name' => 'getDeviceName',
        'site_name_hierarchy_to_map_device_physical_location' => 'getSiteNameHierarchyToMapDevicePhysicalLocation',
        'managed_ap_locations' => 'getManagedApLocations',
        'interface_ip_address' => 'getInterfaceIpAddress',
        'interface_net_mask_in_cidr_format' => 'getInterfaceNetMaskInCidrFormat',
        'interface_gateway_ip_address' => 'getInterfaceGatewayIpAddress',
        'interface_lag_port_number' => 'getInterfaceLagPortNumber',
        'site_name_hierarchy_to_map_ap_physical_location' => 'getSiteNameHierarchyToMapApPhysicalLocation',
        'ap_names' => 'getApNames',
        'rf_profile' => 'getRfProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_TYPE_WPA2_ENTERPRISE = 'wpa2_enterprise';
    const AUTHENTICATION_TYPE_WPA2_PERSONAL = 'wpa2_personal';
    const AUTHENTICATION_TYPE_OPEN = 'open';
    const TRAFFIC_TYPE_VOICEDATA = 'voicedata';
    const TRAFFIC_TYPE_DATA = 'data';
    const RADIO_POLICY__0 = '0';
    const RADIO_POLICY__1 = '1';
    const FAST_TRANSITION_ADAPTIVE = 'ADAPTIVE';
    const FAST_TRANSITION_ENABLE = 'ENABLE';
    const FAST_TRANSITION_DISABLE = 'DISABLE';
    const RF_PROFILE_LOW = 'LOW';
    const RF_PROFILE_TYPICAL = 'TYPICAL';
    const RF_PROFILE_HIGH = 'HIGH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_WPA2_ENTERPRISE,
            self::AUTHENTICATION_TYPE_WPA2_PERSONAL,
            self::AUTHENTICATION_TYPE_OPEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficTypeAllowableValues()
    {
        return [
            self::TRAFFIC_TYPE_VOICEDATA,
            self::TRAFFIC_TYPE_DATA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRadioPolicyAllowableValues()
    {
        return [
            self::RADIO_POLICY__0,
            self::RADIO_POLICY__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFastTransitionAllowableValues()
    {
        return [
            self::FAST_TRANSITION_ADAPTIVE,
            self::FAST_TRANSITION_ENABLE,
            self::FAST_TRANSITION_DISABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRfProfileAllowableValues()
    {
        return [
            self::RF_PROFILE_LOW,
            self::RF_PROFILE_TYPICAL,
            self::RF_PROFILE_HIGH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interface_name'] = isset($data['interface_name']) ? $data['interface_name'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['ssid_name'] = isset($data['ssid_name']) ? $data['ssid_name'] : null;
        $this->container['wlan_type'] = isset($data['wlan_type']) ? $data['wlan_type'] : null;
        $this->container['authentication_type'] = isset($data['authentication_type']) ? $data['authentication_type'] : null;
        $this->container['authentication_server'] = isset($data['authentication_server']) ? $data['authentication_server'] : null;
        $this->container['passpharse'] = isset($data['passpharse']) ? $data['passpharse'] : null;
        $this->container['traffic_type'] = isset($data['traffic_type']) ? $data['traffic_type'] : null;
        $this->container['radio_policy'] = isset($data['radio_policy']) ? $data['radio_policy'] : null;
        $this->container['fast_transition'] = isset($data['fast_transition']) ? $data['fast_transition'] : null;
        $this->container['enable_fastlane'] = isset($data['enable_fastlane']) ? $data['enable_fastlane'] : null;
        $this->container['enable_mac_filering'] = isset($data['enable_mac_filering']) ? $data['enable_mac_filering'] : null;
        $this->container['enable_broadcast_ssid'] = isset($data['enable_broadcast_ssid']) ? $data['enable_broadcast_ssid'] : null;
        $this->container['enable_wlan_band_selection'] = isset($data['enable_wlan_band_selection']) ? $data['enable_wlan_band_selection'] : null;
        $this->container['wireless_network_profile_name'] = isset($data['wireless_network_profile_name']) ? $data['wireless_network_profile_name'] : null;
        $this->container['sites_name_hierarchy_to_map_the_profile'] = isset($data['sites_name_hierarchy_to_map_the_profile']) ? $data['sites_name_hierarchy_to_map_the_profile'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['site_name_hierarchy_to_map_device_physical_location'] = isset($data['site_name_hierarchy_to_map_device_physical_location']) ? $data['site_name_hierarchy_to_map_device_physical_location'] : null;
        $this->container['managed_ap_locations'] = isset($data['managed_ap_locations']) ? $data['managed_ap_locations'] : null;
        $this->container['interface_ip_address'] = isset($data['interface_ip_address']) ? $data['interface_ip_address'] : null;
        $this->container['interface_net_mask_in_cidr_format'] = isset($data['interface_net_mask_in_cidr_format']) ? $data['interface_net_mask_in_cidr_format'] : null;
        $this->container['interface_gateway_ip_address'] = isset($data['interface_gateway_ip_address']) ? $data['interface_gateway_ip_address'] : null;
        $this->container['interface_lag_port_number'] = isset($data['interface_lag_port_number']) ? $data['interface_lag_port_number'] : null;
        $this->container['site_name_hierarchy_to_map_ap_physical_location'] = isset($data['site_name_hierarchy_to_map_ap_physical_location']) ? $data['site_name_hierarchy_to_map_ap_physical_location'] : null;
        $this->container['ap_names'] = isset($data['ap_names']) ? $data['ap_names'] : null;
        $this->container['rf_profile'] = isset($data['rf_profile']) ? $data['rf_profile'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!in_array($this->container['authentication_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authentication_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrafficTypeAllowableValues();
        if (!in_array($this->container['traffic_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'traffic_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRadioPolicyAllowableValues();
        if (!in_array($this->container['radio_policy'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'radio_policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFastTransitionAllowableValues();
        if (!in_array($this->container['fast_transition'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fast_transition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRfProfileAllowableValues();
        if (!in_array($this->container['rf_profile'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rf_profile', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!in_array($this->container['authentication_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTrafficTypeAllowableValues();
        if (!in_array($this->container['traffic_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getRadioPolicyAllowableValues();
        if (!in_array($this->container['radio_policy'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getFastTransitionAllowableValues();
        if (!in_array($this->container['fast_transition'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getRfProfileAllowableValues();
        if (!in_array($this->container['rf_profile'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets interface_name
     *
     * @return string
     */
    public function getInterfaceName()
    {
        return $this->container['interface_name'];
    }

    /**
     * Sets interface_name
     *
     * @param string $interface_name interface_name
     *
     * @return $this
     */
    public function setInterfaceName($interface_name)
    {
        $this->container['interface_name'] = $interface_name;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return float
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param float $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets ssid_name
     *
     * @return string
     */
    public function getSsidName()
    {
        return $this->container['ssid_name'];
    }

    /**
     * Sets ssid_name
     *
     * @param string $ssid_name ssid_name
     *
     * @return $this
     */
    public function setSsidName($ssid_name)
    {
        $this->container['ssid_name'] = $ssid_name;

        return $this;
    }

    /**
     * Gets wlan_type
     *
     * @return string
     */
    public function getWlanType()
    {
        return $this->container['wlan_type'];
    }

    /**
     * Sets wlan_type
     *
     * @param string $wlan_type wlan_type
     *
     * @return $this
     */
    public function setWlanType($wlan_type)
    {
        $this->container['wlan_type'] = $wlan_type;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string $authentication_type authentication_type
     *
     * @return $this
     */
    public function setAuthenticationType($authentication_type)
    {
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($authentication_type) && !in_array($authentication_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authentication_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets authentication_server
     *
     * @return string
     */
    public function getAuthenticationServer()
    {
        return $this->container['authentication_server'];
    }

    /**
     * Sets authentication_server
     *
     * @param string $authentication_server authentication_server
     *
     * @return $this
     */
    public function setAuthenticationServer($authentication_server)
    {
        $this->container['authentication_server'] = $authentication_server;

        return $this;
    }

    /**
     * Gets passpharse
     *
     * @return string
     */
    public function getPasspharse()
    {
        return $this->container['passpharse'];
    }

    /**
     * Sets passpharse
     *
     * @param string $passpharse passpharse
     *
     * @return $this
     */
    public function setPasspharse($passpharse)
    {
        $this->container['passpharse'] = $passpharse;

        return $this;
    }

    /**
     * Gets traffic_type
     *
     * @return string
     */
    public function getTrafficType()
    {
        return $this->container['traffic_type'];
    }

    /**
     * Sets traffic_type
     *
     * @param string $traffic_type traffic_type
     *
     * @return $this
     */
    public function setTrafficType($traffic_type)
    {
        $allowedValues = $this->getTrafficTypeAllowableValues();
        if (!is_null($traffic_type) && !in_array($traffic_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'traffic_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['traffic_type'] = $traffic_type;

        return $this;
    }

    /**
     * Gets radio_policy
     *
     * @return string
     */
    public function getRadioPolicy()
    {
        return $this->container['radio_policy'];
    }

    /**
     * Sets radio_policy
     *
     * @param string $radio_policy radio_policy
     *
     * @return $this
     */
    public function setRadioPolicy($radio_policy)
    {
        $allowedValues = $this->getRadioPolicyAllowableValues();
        if (!is_null($radio_policy) && !in_array($radio_policy, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'radio_policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['radio_policy'] = $radio_policy;

        return $this;
    }

    /**
     * Gets fast_transition
     *
     * @return string
     */
    public function getFastTransition()
    {
        return $this->container['fast_transition'];
    }

    /**
     * Sets fast_transition
     *
     * @param string $fast_transition fast_transition
     *
     * @return $this
     */
    public function setFastTransition($fast_transition)
    {
        $allowedValues = $this->getFastTransitionAllowableValues();
        if (!is_null($fast_transition) && !in_array($fast_transition, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fast_transition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fast_transition'] = $fast_transition;

        return $this;
    }

    /**
     * Gets enable_fastlane
     *
     * @return bool
     */
    public function getEnableFastlane()
    {
        return $this->container['enable_fastlane'];
    }

    /**
     * Sets enable_fastlane
     *
     * @param bool $enable_fastlane enable_fastlane
     *
     * @return $this
     */
    public function setEnableFastlane($enable_fastlane)
    {
        $this->container['enable_fastlane'] = $enable_fastlane;

        return $this;
    }

    /**
     * Gets enable_mac_filering
     *
     * @return bool
     */
    public function getEnableMacFilering()
    {
        return $this->container['enable_mac_filering'];
    }

    /**
     * Sets enable_mac_filering
     *
     * @param bool $enable_mac_filering enable_mac_filering
     *
     * @return $this
     */
    public function setEnableMacFilering($enable_mac_filering)
    {
        $this->container['enable_mac_filering'] = $enable_mac_filering;

        return $this;
    }

    /**
     * Gets enable_broadcast_ssid
     *
     * @return bool
     */
    public function getEnableBroadcastSsid()
    {
        return $this->container['enable_broadcast_ssid'];
    }

    /**
     * Sets enable_broadcast_ssid
     *
     * @param bool $enable_broadcast_ssid enable_broadcast_ssid
     *
     * @return $this
     */
    public function setEnableBroadcastSsid($enable_broadcast_ssid)
    {
        $this->container['enable_broadcast_ssid'] = $enable_broadcast_ssid;

        return $this;
    }

    /**
     * Gets enable_wlan_band_selection
     *
     * @return bool
     */
    public function getEnableWlanBandSelection()
    {
        return $this->container['enable_wlan_band_selection'];
    }

    /**
     * Sets enable_wlan_band_selection
     *
     * @param bool $enable_wlan_band_selection enable_wlan_band_selection
     *
     * @return $this
     */
    public function setEnableWlanBandSelection($enable_wlan_band_selection)
    {
        $this->container['enable_wlan_band_selection'] = $enable_wlan_band_selection;

        return $this;
    }

    /**
     * Gets wireless_network_profile_name
     *
     * @return string
     */
    public function getWirelessNetworkProfileName()
    {
        return $this->container['wireless_network_profile_name'];
    }

    /**
     * Sets wireless_network_profile_name
     *
     * @param string $wireless_network_profile_name wireless_network_profile_name
     *
     * @return $this
     */
    public function setWirelessNetworkProfileName($wireless_network_profile_name)
    {
        $this->container['wireless_network_profile_name'] = $wireless_network_profile_name;

        return $this;
    }

    /**
     * Gets sites_name_hierarchy_to_map_the_profile
     *
     * @return string
     */
    public function getSitesNameHierarchyToMapTheProfile()
    {
        return $this->container['sites_name_hierarchy_to_map_the_profile'];
    }

    /**
     * Sets sites_name_hierarchy_to_map_the_profile
     *
     * @param string $sites_name_hierarchy_to_map_the_profile sites_name_hierarchy_to_map_the_profile
     *
     * @return $this
     */
    public function setSitesNameHierarchyToMapTheProfile($sites_name_hierarchy_to_map_the_profile)
    {
        $this->container['sites_name_hierarchy_to_map_the_profile'] = $sites_name_hierarchy_to_map_the_profile;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name device_name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets site_name_hierarchy_to_map_device_physical_location
     *
     * @return string
     */
    public function getSiteNameHierarchyToMapDevicePhysicalLocation()
    {
        return $this->container['site_name_hierarchy_to_map_device_physical_location'];
    }

    /**
     * Sets site_name_hierarchy_to_map_device_physical_location
     *
     * @param string $site_name_hierarchy_to_map_device_physical_location site_name_hierarchy_to_map_device_physical_location
     *
     * @return $this
     */
    public function setSiteNameHierarchyToMapDevicePhysicalLocation($site_name_hierarchy_to_map_device_physical_location)
    {
        $this->container['site_name_hierarchy_to_map_device_physical_location'] = $site_name_hierarchy_to_map_device_physical_location;

        return $this;
    }

    /**
     * Gets managed_ap_locations
     *
     * @return string
     */
    public function getManagedApLocations()
    {
        return $this->container['managed_ap_locations'];
    }

    /**
     * Sets managed_ap_locations
     *
     * @param string $managed_ap_locations managed_ap_locations
     *
     * @return $this
     */
    public function setManagedApLocations($managed_ap_locations)
    {
        $this->container['managed_ap_locations'] = $managed_ap_locations;

        return $this;
    }

    /**
     * Gets interface_ip_address
     *
     * @return string
     */
    public function getInterfaceIpAddress()
    {
        return $this->container['interface_ip_address'];
    }

    /**
     * Sets interface_ip_address
     *
     * @param string $interface_ip_address interface_ip_address
     *
     * @return $this
     */
    public function setInterfaceIpAddress($interface_ip_address)
    {
        $this->container['interface_ip_address'] = $interface_ip_address;

        return $this;
    }

    /**
     * Gets interface_net_mask_in_cidr_format
     *
     * @return string
     */
    public function getInterfaceNetMaskInCidrFormat()
    {
        return $this->container['interface_net_mask_in_cidr_format'];
    }

    /**
     * Sets interface_net_mask_in_cidr_format
     *
     * @param string $interface_net_mask_in_cidr_format interface_net_mask_in_cidr_format
     *
     * @return $this
     */
    public function setInterfaceNetMaskInCidrFormat($interface_net_mask_in_cidr_format)
    {
        $this->container['interface_net_mask_in_cidr_format'] = $interface_net_mask_in_cidr_format;

        return $this;
    }

    /**
     * Gets interface_gateway_ip_address
     *
     * @return string
     */
    public function getInterfaceGatewayIpAddress()
    {
        return $this->container['interface_gateway_ip_address'];
    }

    /**
     * Sets interface_gateway_ip_address
     *
     * @param string $interface_gateway_ip_address interface_gateway_ip_address
     *
     * @return $this
     */
    public function setInterfaceGatewayIpAddress($interface_gateway_ip_address)
    {
        $this->container['interface_gateway_ip_address'] = $interface_gateway_ip_address;

        return $this;
    }

    /**
     * Gets interface_lag_port_number
     *
     * @return float
     */
    public function getInterfaceLagPortNumber()
    {
        return $this->container['interface_lag_port_number'];
    }

    /**
     * Sets interface_lag_port_number
     *
     * @param float $interface_lag_port_number interface_lag_port_number
     *
     * @return $this
     */
    public function setInterfaceLagPortNumber($interface_lag_port_number)
    {
        $this->container['interface_lag_port_number'] = $interface_lag_port_number;

        return $this;
    }

    /**
     * Gets site_name_hierarchy_to_map_ap_physical_location
     *
     * @return string
     */
    public function getSiteNameHierarchyToMapApPhysicalLocation()
    {
        return $this->container['site_name_hierarchy_to_map_ap_physical_location'];
    }

    /**
     * Sets site_name_hierarchy_to_map_ap_physical_location
     *
     * @param string $site_name_hierarchy_to_map_ap_physical_location site_name_hierarchy_to_map_ap_physical_location
     *
     * @return $this
     */
    public function setSiteNameHierarchyToMapApPhysicalLocation($site_name_hierarchy_to_map_ap_physical_location)
    {
        $this->container['site_name_hierarchy_to_map_ap_physical_location'] = $site_name_hierarchy_to_map_ap_physical_location;

        return $this;
    }

    /**
     * Gets ap_names
     *
     * @return string
     */
    public function getApNames()
    {
        return $this->container['ap_names'];
    }

    /**
     * Sets ap_names
     *
     * @param string $ap_names ap_names
     *
     * @return $this
     */
    public function setApNames($ap_names)
    {
        $this->container['ap_names'] = $ap_names;

        return $this;
    }

    /**
     * Gets rf_profile
     *
     * @return string
     */
    public function getRfProfile()
    {
        return $this->container['rf_profile'];
    }

    /**
     * Sets rf_profile
     *
     * @param string $rf_profile rf_profile
     *
     * @return $this
     */
    public function setRfProfile($rf_profile)
    {
        $allowedValues = $this->getRfProfileAllowableValues();
        if (!is_null($rf_profile) && !in_array($rf_profile, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rf_profile', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rf_profile'] = $rf_profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


