<?php
/**
 * FlowAnalysisListOutputResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * FlowAnalysisListOutputResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlowAnalysisListOutputResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlowAnalysisListOutput_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'control_path' => 'bool',
        'create_time' => 'int',
        'dest_ip' => 'string',
        'dest_port' => 'string',
        'failure_reason' => 'string',
        'id' => 'string',
        'inclusions' => 'string[]',
        'last_update_time' => 'int',
        'periodic_refresh' => 'bool',
        'protocol' => 'string',
        'source_ip' => 'string',
        'source_port' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'control_path' => null,
        'create_time' => null,
        'dest_ip' => null,
        'dest_port' => null,
        'failure_reason' => null,
        'id' => null,
        'inclusions' => null,
        'last_update_time' => null,
        'periodic_refresh' => null,
        'protocol' => null,
        'source_ip' => null,
        'source_port' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'control_path' => 'controlPath',
        'create_time' => 'createTime',
        'dest_ip' => 'destIP',
        'dest_port' => 'destPort',
        'failure_reason' => 'failureReason',
        'id' => 'id',
        'inclusions' => 'inclusions',
        'last_update_time' => 'lastUpdateTime',
        'periodic_refresh' => 'periodicRefresh',
        'protocol' => 'protocol',
        'source_ip' => 'sourceIP',
        'source_port' => 'sourcePort',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'control_path' => 'setControlPath',
        'create_time' => 'setCreateTime',
        'dest_ip' => 'setDestIp',
        'dest_port' => 'setDestPort',
        'failure_reason' => 'setFailureReason',
        'id' => 'setId',
        'inclusions' => 'setInclusions',
        'last_update_time' => 'setLastUpdateTime',
        'periodic_refresh' => 'setPeriodicRefresh',
        'protocol' => 'setProtocol',
        'source_ip' => 'setSourceIp',
        'source_port' => 'setSourcePort',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'control_path' => 'getControlPath',
        'create_time' => 'getCreateTime',
        'dest_ip' => 'getDestIp',
        'dest_port' => 'getDestPort',
        'failure_reason' => 'getFailureReason',
        'id' => 'getId',
        'inclusions' => 'getInclusions',
        'last_update_time' => 'getLastUpdateTime',
        'periodic_refresh' => 'getPeriodicRefresh',
        'protocol' => 'getProtocol',
        'source_ip' => 'getSourceIp',
        'source_port' => 'getSourcePort',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['control_path'] = isset($data['control_path']) ? $data['control_path'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['dest_ip'] = isset($data['dest_ip']) ? $data['dest_ip'] : null;
        $this->container['dest_port'] = isset($data['dest_port']) ? $data['dest_port'] : null;
        $this->container['failure_reason'] = isset($data['failure_reason']) ? $data['failure_reason'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inclusions'] = isset($data['inclusions']) ? $data['inclusions'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['periodic_refresh'] = isset($data['periodic_refresh']) ? $data['periodic_refresh'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['source_ip'] = isset($data['source_ip']) ? $data['source_ip'] : null;
        $this->container['source_port'] = isset($data['source_port']) ? $data['source_port'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets control_path
     *
     * @return bool
     */
    public function getControlPath()
    {
        return $this->container['control_path'];
    }

    /**
     * Sets control_path
     *
     * @param bool $control_path control_path
     *
     * @return $this
     */
    public function setControlPath($control_path)
    {
        $this->container['control_path'] = $control_path;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets dest_ip
     *
     * @return string
     */
    public function getDestIp()
    {
        return $this->container['dest_ip'];
    }

    /**
     * Sets dest_ip
     *
     * @param string $dest_ip dest_ip
     *
     * @return $this
     */
    public function setDestIp($dest_ip)
    {
        $this->container['dest_ip'] = $dest_ip;

        return $this;
    }

    /**
     * Gets dest_port
     *
     * @return string
     */
    public function getDestPort()
    {
        return $this->container['dest_port'];
    }

    /**
     * Sets dest_port
     *
     * @param string $dest_port dest_port
     *
     * @return $this
     */
    public function setDestPort($dest_port)
    {
        $this->container['dest_port'] = $dest_port;

        return $this;
    }

    /**
     * Gets failure_reason
     *
     * @return string
     */
    public function getFailureReason()
    {
        return $this->container['failure_reason'];
    }

    /**
     * Sets failure_reason
     *
     * @param string $failure_reason failure_reason
     *
     * @return $this
     */
    public function setFailureReason($failure_reason)
    {
        $this->container['failure_reason'] = $failure_reason;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inclusions
     *
     * @return string[]
     */
    public function getInclusions()
    {
        return $this->container['inclusions'];
    }

    /**
     * Sets inclusions
     *
     * @param string[] $inclusions inclusions
     *
     * @return $this
     */
    public function setInclusions($inclusions)
    {
        $this->container['inclusions'] = $inclusions;

        return $this;
    }

    /**
     * Gets last_update_time
     *
     * @return int
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param int $last_update_time last_update_time
     *
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets periodic_refresh
     *
     * @return bool
     */
    public function getPeriodicRefresh()
    {
        return $this->container['periodic_refresh'];
    }

    /**
     * Sets periodic_refresh
     *
     * @param bool $periodic_refresh periodic_refresh
     *
     * @return $this
     */
    public function setPeriodicRefresh($periodic_refresh)
    {
        $this->container['periodic_refresh'] = $periodic_refresh;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string $source_ip source_ip
     *
     * @return $this
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return string
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param string $source_port source_port
     *
     * @return $this
     */
    public function setSourcePort($source_port)
    {
        $this->container['source_port'] = $source_port;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


