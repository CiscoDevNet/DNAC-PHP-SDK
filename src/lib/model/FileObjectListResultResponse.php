<?php
/**
 * FileObjectListResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * FileObjectListResultResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileObjectListResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileObjectListResult_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_info' => 'object',
        'download_path' => 'string',
        'encrypted' => 'bool',
        'file_format' => 'string',
        'file_size' => 'string',
        'id' => 'string',
        'md5_checksum' => 'string',
        'name' => 'string',
        'name_space' => 'string',
        'sftp_server_list' => 'object[]',
        'sha1_checksum' => 'string',
        'task_id' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_info' => null,
        'download_path' => null,
        'encrypted' => null,
        'file_format' => null,
        'file_size' => null,
        'id' => null,
        'md5_checksum' => null,
        'name' => null,
        'name_space' => null,
        'sftp_server_list' => null,
        'sha1_checksum' => null,
        'task_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_info' => 'attributeInfo',
        'download_path' => 'downloadPath',
        'encrypted' => 'encrypted',
        'file_format' => 'fileFormat',
        'file_size' => 'fileSize',
        'id' => 'id',
        'md5_checksum' => 'md5Checksum',
        'name' => 'name',
        'name_space' => 'nameSpace',
        'sftp_server_list' => 'sftpServerList',
        'sha1_checksum' => 'sha1Checksum',
        'task_id' => 'taskId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_info' => 'setAttributeInfo',
        'download_path' => 'setDownloadPath',
        'encrypted' => 'setEncrypted',
        'file_format' => 'setFileFormat',
        'file_size' => 'setFileSize',
        'id' => 'setId',
        'md5_checksum' => 'setMd5Checksum',
        'name' => 'setName',
        'name_space' => 'setNameSpace',
        'sftp_server_list' => 'setSftpServerList',
        'sha1_checksum' => 'setSha1Checksum',
        'task_id' => 'setTaskId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_info' => 'getAttributeInfo',
        'download_path' => 'getDownloadPath',
        'encrypted' => 'getEncrypted',
        'file_format' => 'getFileFormat',
        'file_size' => 'getFileSize',
        'id' => 'getId',
        'md5_checksum' => 'getMd5Checksum',
        'name' => 'getName',
        'name_space' => 'getNameSpace',
        'sftp_server_list' => 'getSftpServerList',
        'sha1_checksum' => 'getSha1Checksum',
        'task_id' => 'getTaskId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_info'] = isset($data['attribute_info']) ? $data['attribute_info'] : null;
        $this->container['download_path'] = isset($data['download_path']) ? $data['download_path'] : null;
        $this->container['encrypted'] = isset($data['encrypted']) ? $data['encrypted'] : null;
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['md5_checksum'] = isset($data['md5_checksum']) ? $data['md5_checksum'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_space'] = isset($data['name_space']) ? $data['name_space'] : null;
        $this->container['sftp_server_list'] = isset($data['sftp_server_list']) ? $data['sftp_server_list'] : null;
        $this->container['sha1_checksum'] = isset($data['sha1_checksum']) ? $data['sha1_checksum'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets attribute_info
     *
     * @return object
     */
    public function getAttributeInfo()
    {
        return $this->container['attribute_info'];
    }

    /**
     * Sets attribute_info
     *
     * @param object $attribute_info attribute_info
     *
     * @return $this
     */
    public function setAttributeInfo($attribute_info)
    {
        $this->container['attribute_info'] = $attribute_info;

        return $this;
    }

    /**
     * Gets download_path
     *
     * @return string
     */
    public function getDownloadPath()
    {
        return $this->container['download_path'];
    }

    /**
     * Sets download_path
     *
     * @param string $download_path download_path
     *
     * @return $this
     */
    public function setDownloadPath($download_path)
    {
        $this->container['download_path'] = $download_path;

        return $this;
    }

    /**
     * Gets encrypted
     *
     * @return bool
     */
    public function getEncrypted()
    {
        return $this->container['encrypted'];
    }

    /**
     * Sets encrypted
     *
     * @param bool $encrypted encrypted
     *
     * @return $this
     */
    public function setEncrypted($encrypted)
    {
        $this->container['encrypted'] = $encrypted;

        return $this;
    }

    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format file_format
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return string
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param string $file_size file_size
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets md5_checksum
     *
     * @return string
     */
    public function getMd5Checksum()
    {
        return $this->container['md5_checksum'];
    }

    /**
     * Sets md5_checksum
     *
     * @param string $md5_checksum md5_checksum
     *
     * @return $this
     */
    public function setMd5Checksum($md5_checksum)
    {
        $this->container['md5_checksum'] = $md5_checksum;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_space
     *
     * @return string
     */
    public function getNameSpace()
    {
        return $this->container['name_space'];
    }

    /**
     * Sets name_space
     *
     * @param string $name_space name_space
     *
     * @return $this
     */
    public function setNameSpace($name_space)
    {
        $this->container['name_space'] = $name_space;

        return $this;
    }

    /**
     * Gets sftp_server_list
     *
     * @return object[]
     */
    public function getSftpServerList()
    {
        return $this->container['sftp_server_list'];
    }

    /**
     * Sets sftp_server_list
     *
     * @param object[] $sftp_server_list sftp_server_list
     *
     * @return $this
     */
    public function setSftpServerList($sftp_server_list)
    {
        $this->container['sftp_server_list'] = $sftp_server_list;

        return $this;
    }

    /**
     * Gets sha1_checksum
     *
     * @return string
     */
    public function getSha1Checksum()
    {
        return $this->container['sha1_checksum'];
    }

    /**
     * Sets sha1_checksum
     *
     * @param string $sha1_checksum sha1_checksum
     *
     * @return $this
     */
    public function setSha1Checksum($sha1_checksum)
    {
        $this->container['sha1_checksum'] = $sha1_checksum;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return object
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param object $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


