<?php
/**
 * DeviceInnerSystemResetWorkflow
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DeviceInnerSystemResetWorkflow Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInnerSystemResetWorkflow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device_inner_systemResetWorkflow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'add_to_inventory' => 'bool',
        'added_on' => 'int',
        'config_id' => 'string',
        'curr_task_idx' => 'int',
        'description' => 'string',
        'end_time' => 'int',
        'exec_time' => 'int',
        'image_id' => 'string',
        'lastupdate_on' => 'int',
        'name' => 'string',
        'start_time' => 'int',
        'state' => 'string',
        'tasks' => '\cisco\com\dnac\v1\api\client\model\DeviceInnerSystemResetWorkflowTasks[]',
        'tenant_id' => 'string',
        'type' => 'string',
        'use_state' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'add_to_inventory' => null,
        'added_on' => null,
        'config_id' => null,
        'curr_task_idx' => null,
        'description' => null,
        'end_time' => null,
        'exec_time' => null,
        'image_id' => null,
        'lastupdate_on' => null,
        'name' => null,
        'start_time' => null,
        'state' => null,
        'tasks' => null,
        'tenant_id' => null,
        'type' => null,
        'use_state' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'add_to_inventory' => 'addToInventory',
        'added_on' => 'addedOn',
        'config_id' => 'configId',
        'curr_task_idx' => 'currTaskIdx',
        'description' => 'description',
        'end_time' => 'endTime',
        'exec_time' => 'execTime',
        'image_id' => 'imageId',
        'lastupdate_on' => 'lastupdateOn',
        'name' => 'name',
        'start_time' => 'startTime',
        'state' => 'state',
        'tasks' => 'tasks',
        'tenant_id' => 'tenantId',
        'type' => 'type',
        'use_state' => 'useState',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'add_to_inventory' => 'setAddToInventory',
        'added_on' => 'setAddedOn',
        'config_id' => 'setConfigId',
        'curr_task_idx' => 'setCurrTaskIdx',
        'description' => 'setDescription',
        'end_time' => 'setEndTime',
        'exec_time' => 'setExecTime',
        'image_id' => 'setImageId',
        'lastupdate_on' => 'setLastupdateOn',
        'name' => 'setName',
        'start_time' => 'setStartTime',
        'state' => 'setState',
        'tasks' => 'setTasks',
        'tenant_id' => 'setTenantId',
        'type' => 'setType',
        'use_state' => 'setUseState',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'add_to_inventory' => 'getAddToInventory',
        'added_on' => 'getAddedOn',
        'config_id' => 'getConfigId',
        'curr_task_idx' => 'getCurrTaskIdx',
        'description' => 'getDescription',
        'end_time' => 'getEndTime',
        'exec_time' => 'getExecTime',
        'image_id' => 'getImageId',
        'lastupdate_on' => 'getLastupdateOn',
        'name' => 'getName',
        'start_time' => 'getStartTime',
        'state' => 'getState',
        'tasks' => 'getTasks',
        'tenant_id' => 'getTenantId',
        'type' => 'getType',
        'use_state' => 'getUseState',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['add_to_inventory'] = isset($data['add_to_inventory']) ? $data['add_to_inventory'] : null;
        $this->container['added_on'] = isset($data['added_on']) ? $data['added_on'] : null;
        $this->container['config_id'] = isset($data['config_id']) ? $data['config_id'] : null;
        $this->container['curr_task_idx'] = isset($data['curr_task_idx']) ? $data['curr_task_idx'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['exec_time'] = isset($data['exec_time']) ? $data['exec_time'] : null;
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['lastupdate_on'] = isset($data['lastupdate_on']) ? $data['lastupdate_on'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['use_state'] = isset($data['use_state']) ? $data['use_state'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets add_to_inventory
     *
     * @return bool
     */
    public function getAddToInventory()
    {
        return $this->container['add_to_inventory'];
    }

    /**
     * Sets add_to_inventory
     *
     * @param bool $add_to_inventory add_to_inventory
     *
     * @return $this
     */
    public function setAddToInventory($add_to_inventory)
    {
        $this->container['add_to_inventory'] = $add_to_inventory;

        return $this;
    }

    /**
     * Gets added_on
     *
     * @return int
     */
    public function getAddedOn()
    {
        return $this->container['added_on'];
    }

    /**
     * Sets added_on
     *
     * @param int $added_on added_on
     *
     * @return $this
     */
    public function setAddedOn($added_on)
    {
        $this->container['added_on'] = $added_on;

        return $this;
    }

    /**
     * Gets config_id
     *
     * @return string
     */
    public function getConfigId()
    {
        return $this->container['config_id'];
    }

    /**
     * Sets config_id
     *
     * @param string $config_id config_id
     *
     * @return $this
     */
    public function setConfigId($config_id)
    {
        $this->container['config_id'] = $config_id;

        return $this;
    }

    /**
     * Gets curr_task_idx
     *
     * @return int
     */
    public function getCurrTaskIdx()
    {
        return $this->container['curr_task_idx'];
    }

    /**
     * Sets curr_task_idx
     *
     * @param int $curr_task_idx curr_task_idx
     *
     * @return $this
     */
    public function setCurrTaskIdx($curr_task_idx)
    {
        $this->container['curr_task_idx'] = $curr_task_idx;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets exec_time
     *
     * @return int
     */
    public function getExecTime()
    {
        return $this->container['exec_time'];
    }

    /**
     * Sets exec_time
     *
     * @param int $exec_time exec_time
     *
     * @return $this
     */
    public function setExecTime($exec_time)
    {
        $this->container['exec_time'] = $exec_time;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets lastupdate_on
     *
     * @return int
     */
    public function getLastupdateOn()
    {
        return $this->container['lastupdate_on'];
    }

    /**
     * Sets lastupdate_on
     *
     * @param int $lastupdate_on lastupdate_on
     *
     * @return $this
     */
    public function setLastupdateOn($lastupdate_on)
    {
        $this->container['lastupdate_on'] = $lastupdate_on;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \cisco\com\dnac\v1\api\client\model\DeviceInnerSystemResetWorkflowTasks[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \cisco\com\dnac\v1\api\client\model\DeviceInnerSystemResetWorkflowTasks[] $tasks tasks
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_state
     *
     * @return string
     */
    public function getUseState()
    {
        return $this->container['use_state'];
    }

    /**
     * Sets use_state
     *
     * @param string $use_state use_state
     *
     * @return $this
     */
    public function setUseState($use_state)
    {
        $this->container['use_state'] = $use_state;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


