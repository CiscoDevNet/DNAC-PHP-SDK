<?php
/**
 * DeviceInnerDeviceInfoStackInfoStackMemberList
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DeviceInnerDeviceInfoStackInfoStackMemberList Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceInnerDeviceInfoStackInfoStackMemberList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device_inner_deviceInfo_stackInfo_stackMemberList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hardware_version' => 'string',
        'license_level' => 'string',
        'license_type' => 'string',
        'mac_address' => 'string',
        'pid' => 'string',
        'priority' => 'int',
        'role' => 'string',
        'serial_number' => 'string',
        'software_version' => 'string',
        'stack_number' => 'int',
        'state' => 'string',
        'sudi_serial_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hardware_version' => null,
        'license_level' => null,
        'license_type' => null,
        'mac_address' => null,
        'pid' => null,
        'priority' => null,
        'role' => null,
        'serial_number' => null,
        'software_version' => null,
        'stack_number' => null,
        'state' => null,
        'sudi_serial_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hardware_version' => 'hardwareVersion',
        'license_level' => 'licenseLevel',
        'license_type' => 'licenseType',
        'mac_address' => 'macAddress',
        'pid' => 'pid',
        'priority' => 'priority',
        'role' => 'role',
        'serial_number' => 'serialNumber',
        'software_version' => 'softwareVersion',
        'stack_number' => 'stackNumber',
        'state' => 'state',
        'sudi_serial_number' => 'sudiSerialNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hardware_version' => 'setHardwareVersion',
        'license_level' => 'setLicenseLevel',
        'license_type' => 'setLicenseType',
        'mac_address' => 'setMacAddress',
        'pid' => 'setPid',
        'priority' => 'setPriority',
        'role' => 'setRole',
        'serial_number' => 'setSerialNumber',
        'software_version' => 'setSoftwareVersion',
        'stack_number' => 'setStackNumber',
        'state' => 'setState',
        'sudi_serial_number' => 'setSudiSerialNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hardware_version' => 'getHardwareVersion',
        'license_level' => 'getLicenseLevel',
        'license_type' => 'getLicenseType',
        'mac_address' => 'getMacAddress',
        'pid' => 'getPid',
        'priority' => 'getPriority',
        'role' => 'getRole',
        'serial_number' => 'getSerialNumber',
        'software_version' => 'getSoftwareVersion',
        'stack_number' => 'getStackNumber',
        'state' => 'getState',
        'sudi_serial_number' => 'getSudiSerialNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hardware_version'] = isset($data['hardware_version']) ? $data['hardware_version'] : null;
        $this->container['license_level'] = isset($data['license_level']) ? $data['license_level'] : null;
        $this->container['license_type'] = isset($data['license_type']) ? $data['license_type'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['stack_number'] = isset($data['stack_number']) ? $data['stack_number'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['sudi_serial_number'] = isset($data['sudi_serial_number']) ? $data['sudi_serial_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets hardware_version
     *
     * @return string
     */
    public function getHardwareVersion()
    {
        return $this->container['hardware_version'];
    }

    /**
     * Sets hardware_version
     *
     * @param string $hardware_version hardware_version
     *
     * @return $this
     */
    public function setHardwareVersion($hardware_version)
    {
        $this->container['hardware_version'] = $hardware_version;

        return $this;
    }

    /**
     * Gets license_level
     *
     * @return string
     */
    public function getLicenseLevel()
    {
        return $this->container['license_level'];
    }

    /**
     * Sets license_level
     *
     * @param string $license_level license_level
     *
     * @return $this
     */
    public function setLicenseLevel($license_level)
    {
        $this->container['license_level'] = $license_level;

        return $this;
    }

    /**
     * Gets license_type
     *
     * @return string
     */
    public function getLicenseType()
    {
        return $this->container['license_type'];
    }

    /**
     * Sets license_type
     *
     * @param string $license_type license_type
     *
     * @return $this
     */
    public function setLicenseType($license_type)
    {
        $this->container['license_type'] = $license_type;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return string
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param string $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets stack_number
     *
     * @return int
     */
    public function getStackNumber()
    {
        return $this->container['stack_number'];
    }

    /**
     * Sets stack_number
     *
     * @param int $stack_number stack_number
     *
     * @return $this
     */
    public function setStackNumber($stack_number)
    {
        $this->container['stack_number'] = $stack_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets sudi_serial_number
     *
     * @return string
     */
    public function getSudiSerialNumber()
    {
        return $this->container['sudi_serial_number'];
    }

    /**
     * Sets sudi_serial_number
     *
     * @param string $sudi_serial_number sudi_serial_number
     *
     * @return $this
     */
    public function setSudiSerialNumber($sudi_serial_number)
    {
        $this->container['sudi_serial_number'] = $sudi_serial_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


