<?php
/**
 * ClientDetailResponseResponseTopologyNodes
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * ClientDetailResponseResponseTopologyNodes Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientDetailResponseResponseTopologyNodes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientDetailResponse_response_topology_nodes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'role' => 'string',
        'name' => 'string',
        'id' => 'string',
        'description' => 'string',
        'device_type' => 'string',
        'platform_id' => 'string',
        'family' => 'string',
        'ip' => 'string',
        'software_version' => 'string',
        'user_id' => 'string',
        'node_type' => 'string',
        'radio_frequency' => 'string',
        'clients' => 'string',
        'count' => 'string',
        'health_score' => 'string',
        'level' => 'string',
        'fabric_group' => 'string',
        'connected_device' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'role' => null,
        'name' => null,
        'id' => null,
        'description' => null,
        'device_type' => null,
        'platform_id' => null,
        'family' => null,
        'ip' => null,
        'software_version' => null,
        'user_id' => null,
        'node_type' => null,
        'radio_frequency' => null,
        'clients' => null,
        'count' => null,
        'health_score' => null,
        'level' => null,
        'fabric_group' => null,
        'connected_device' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'role' => 'role',
        'name' => 'name',
        'id' => 'id',
        'description' => 'description',
        'device_type' => 'deviceType',
        'platform_id' => 'platformId',
        'family' => 'family',
        'ip' => 'ip',
        'software_version' => 'softwareVersion',
        'user_id' => 'userId',
        'node_type' => 'nodeType',
        'radio_frequency' => 'radioFrequency',
        'clients' => 'clients',
        'count' => 'count',
        'health_score' => 'healthScore',
        'level' => 'level',
        'fabric_group' => 'fabricGroup',
        'connected_device' => 'connectedDevice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'role' => 'setRole',
        'name' => 'setName',
        'id' => 'setId',
        'description' => 'setDescription',
        'device_type' => 'setDeviceType',
        'platform_id' => 'setPlatformId',
        'family' => 'setFamily',
        'ip' => 'setIp',
        'software_version' => 'setSoftwareVersion',
        'user_id' => 'setUserId',
        'node_type' => 'setNodeType',
        'radio_frequency' => 'setRadioFrequency',
        'clients' => 'setClients',
        'count' => 'setCount',
        'health_score' => 'setHealthScore',
        'level' => 'setLevel',
        'fabric_group' => 'setFabricGroup',
        'connected_device' => 'setConnectedDevice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'role' => 'getRole',
        'name' => 'getName',
        'id' => 'getId',
        'description' => 'getDescription',
        'device_type' => 'getDeviceType',
        'platform_id' => 'getPlatformId',
        'family' => 'getFamily',
        'ip' => 'getIp',
        'software_version' => 'getSoftwareVersion',
        'user_id' => 'getUserId',
        'node_type' => 'getNodeType',
        'radio_frequency' => 'getRadioFrequency',
        'clients' => 'getClients',
        'count' => 'getCount',
        'health_score' => 'getHealthScore',
        'level' => 'getLevel',
        'fabric_group' => 'getFabricGroup',
        'connected_device' => 'getConnectedDevice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['family'] = isset($data['family']) ? $data['family'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['radio_frequency'] = isset($data['radio_frequency']) ? $data['radio_frequency'] : null;
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['health_score'] = isset($data['health_score']) ? $data['health_score'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['fabric_group'] = isset($data['fabric_group']) ? $data['fabric_group'] : null;
        $this->container['connected_device'] = isset($data['connected_device']) ? $data['connected_device'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type device_type
     *
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id platform_id
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets family
     *
     * @return string
     */
    public function getFamily()
    {
        return $this->container['family'];
    }

    /**
     * Sets family
     *
     * @param string $family family
     *
     * @return $this
     */
    public function setFamily($family)
    {
        $this->container['family'] = $family;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets radio_frequency
     *
     * @return string
     */
    public function getRadioFrequency()
    {
        return $this->container['radio_frequency'];
    }

    /**
     * Sets radio_frequency
     *
     * @param string $radio_frequency radio_frequency
     *
     * @return $this
     */
    public function setRadioFrequency($radio_frequency)
    {
        $this->container['radio_frequency'] = $radio_frequency;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return string
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param string $clients clients
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets count
     *
     * @return string
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param string $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets health_score
     *
     * @return string
     */
    public function getHealthScore()
    {
        return $this->container['health_score'];
    }

    /**
     * Sets health_score
     *
     * @param string $health_score health_score
     *
     * @return $this
     */
    public function setHealthScore($health_score)
    {
        $this->container['health_score'] = $health_score;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets fabric_group
     *
     * @return string
     */
    public function getFabricGroup()
    {
        return $this->container['fabric_group'];
    }

    /**
     * Sets fabric_group
     *
     * @param string $fabric_group fabric_group
     *
     * @return $this
     */
    public function setFabricGroup($fabric_group)
    {
        $this->container['fabric_group'] = $fabric_group;

        return $this;
    }

    /**
     * Gets connected_device
     *
     * @return string
     */
    public function getConnectedDevice()
    {
        return $this->container['connected_device'];
    }

    /**
     * Sets connected_device
     *
     * @param string $connected_device connected_device
     *
     * @return $this
     */
    public function setConnectedDevice($connected_device)
    {
        $this->container['connected_device'] = $connected_device;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


