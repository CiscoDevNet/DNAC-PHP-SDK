<?php
/**
 * DiscoveryNIOResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * DiscoveryNIOResultResponse Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscoveryNIOResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscoveryNIOResult_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_info' => 'object',
        'cdp_level' => 'int',
        'device_ids' => 'string',
        'discovery_condition' => 'string',
        'discovery_status' => 'string',
        'discovery_type' => 'string',
        'enable_password_list' => 'string',
        'global_credential_id_list' => 'string[]',
        'http_read_credential' => '\cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner',
        'http_write_credential' => '\cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner',
        'id' => 'string',
        'ip_address_list' => 'string',
        'ip_filter_list' => 'string',
        'is_auto_cdp' => 'bool',
        'lldp_level' => 'int',
        'name' => 'string',
        'netconf_port' => 'string',
        'num_devices' => 'int',
        'parent_discovery_id' => 'string',
        'password_list' => 'string',
        'preferred_mgmt_ip_method' => 'string',
        'protocol_order' => 'string',
        'retry_count' => 'int',
        'snmp_auth_passphrase' => 'string',
        'snmp_auth_protocol' => 'string',
        'snmp_mode' => 'string',
        'snmp_priv_passphrase' => 'string',
        'snmp_priv_protocol' => 'string',
        'snmp_ro_community' => 'string',
        'snmp_ro_community_desc' => 'string',
        'snmp_rw_community' => 'string',
        'snmp_rw_community_desc' => 'string',
        'snmp_user_name' => 'string',
        'time_out' => 'int',
        'update_mgmt_ip' => 'bool',
        'user_name_list' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_info' => null,
        'cdp_level' => null,
        'device_ids' => null,
        'discovery_condition' => null,
        'discovery_status' => null,
        'discovery_type' => null,
        'enable_password_list' => null,
        'global_credential_id_list' => null,
        'http_read_credential' => null,
        'http_write_credential' => null,
        'id' => null,
        'ip_address_list' => null,
        'ip_filter_list' => null,
        'is_auto_cdp' => null,
        'lldp_level' => null,
        'name' => null,
        'netconf_port' => null,
        'num_devices' => null,
        'parent_discovery_id' => null,
        'password_list' => null,
        'preferred_mgmt_ip_method' => null,
        'protocol_order' => null,
        'retry_count' => null,
        'snmp_auth_passphrase' => null,
        'snmp_auth_protocol' => null,
        'snmp_mode' => null,
        'snmp_priv_passphrase' => null,
        'snmp_priv_protocol' => null,
        'snmp_ro_community' => null,
        'snmp_ro_community_desc' => null,
        'snmp_rw_community' => null,
        'snmp_rw_community_desc' => null,
        'snmp_user_name' => null,
        'time_out' => null,
        'update_mgmt_ip' => null,
        'user_name_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_info' => 'attributeInfo',
        'cdp_level' => 'cdpLevel',
        'device_ids' => 'deviceIds',
        'discovery_condition' => 'discoveryCondition',
        'discovery_status' => 'discoveryStatus',
        'discovery_type' => 'discoveryType',
        'enable_password_list' => 'enablePasswordList',
        'global_credential_id_list' => 'globalCredentialIdList',
        'http_read_credential' => 'httpReadCredential',
        'http_write_credential' => 'httpWriteCredential',
        'id' => 'id',
        'ip_address_list' => 'ipAddressList',
        'ip_filter_list' => 'ipFilterList',
        'is_auto_cdp' => 'isAutoCdp',
        'lldp_level' => 'lldpLevel',
        'name' => 'name',
        'netconf_port' => 'netconfPort',
        'num_devices' => 'numDevices',
        'parent_discovery_id' => 'parentDiscoveryId',
        'password_list' => 'passwordList',
        'preferred_mgmt_ip_method' => 'preferredMgmtIPMethod',
        'protocol_order' => 'protocolOrder',
        'retry_count' => 'retryCount',
        'snmp_auth_passphrase' => 'snmpAuthPassphrase',
        'snmp_auth_protocol' => 'snmpAuthProtocol',
        'snmp_mode' => 'snmpMode',
        'snmp_priv_passphrase' => 'snmpPrivPassphrase',
        'snmp_priv_protocol' => 'snmpPrivProtocol',
        'snmp_ro_community' => 'snmpRoCommunity',
        'snmp_ro_community_desc' => 'snmpRoCommunityDesc',
        'snmp_rw_community' => 'snmpRwCommunity',
        'snmp_rw_community_desc' => 'snmpRwCommunityDesc',
        'snmp_user_name' => 'snmpUserName',
        'time_out' => 'timeOut',
        'update_mgmt_ip' => 'updateMgmtIp',
        'user_name_list' => 'userNameList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_info' => 'setAttributeInfo',
        'cdp_level' => 'setCdpLevel',
        'device_ids' => 'setDeviceIds',
        'discovery_condition' => 'setDiscoveryCondition',
        'discovery_status' => 'setDiscoveryStatus',
        'discovery_type' => 'setDiscoveryType',
        'enable_password_list' => 'setEnablePasswordList',
        'global_credential_id_list' => 'setGlobalCredentialIdList',
        'http_read_credential' => 'setHttpReadCredential',
        'http_write_credential' => 'setHttpWriteCredential',
        'id' => 'setId',
        'ip_address_list' => 'setIpAddressList',
        'ip_filter_list' => 'setIpFilterList',
        'is_auto_cdp' => 'setIsAutoCdp',
        'lldp_level' => 'setLldpLevel',
        'name' => 'setName',
        'netconf_port' => 'setNetconfPort',
        'num_devices' => 'setNumDevices',
        'parent_discovery_id' => 'setParentDiscoveryId',
        'password_list' => 'setPasswordList',
        'preferred_mgmt_ip_method' => 'setPreferredMgmtIpMethod',
        'protocol_order' => 'setProtocolOrder',
        'retry_count' => 'setRetryCount',
        'snmp_auth_passphrase' => 'setSnmpAuthPassphrase',
        'snmp_auth_protocol' => 'setSnmpAuthProtocol',
        'snmp_mode' => 'setSnmpMode',
        'snmp_priv_passphrase' => 'setSnmpPrivPassphrase',
        'snmp_priv_protocol' => 'setSnmpPrivProtocol',
        'snmp_ro_community' => 'setSnmpRoCommunity',
        'snmp_ro_community_desc' => 'setSnmpRoCommunityDesc',
        'snmp_rw_community' => 'setSnmpRwCommunity',
        'snmp_rw_community_desc' => 'setSnmpRwCommunityDesc',
        'snmp_user_name' => 'setSnmpUserName',
        'time_out' => 'setTimeOut',
        'update_mgmt_ip' => 'setUpdateMgmtIp',
        'user_name_list' => 'setUserNameList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_info' => 'getAttributeInfo',
        'cdp_level' => 'getCdpLevel',
        'device_ids' => 'getDeviceIds',
        'discovery_condition' => 'getDiscoveryCondition',
        'discovery_status' => 'getDiscoveryStatus',
        'discovery_type' => 'getDiscoveryType',
        'enable_password_list' => 'getEnablePasswordList',
        'global_credential_id_list' => 'getGlobalCredentialIdList',
        'http_read_credential' => 'getHttpReadCredential',
        'http_write_credential' => 'getHttpWriteCredential',
        'id' => 'getId',
        'ip_address_list' => 'getIpAddressList',
        'ip_filter_list' => 'getIpFilterList',
        'is_auto_cdp' => 'getIsAutoCdp',
        'lldp_level' => 'getLldpLevel',
        'name' => 'getName',
        'netconf_port' => 'getNetconfPort',
        'num_devices' => 'getNumDevices',
        'parent_discovery_id' => 'getParentDiscoveryId',
        'password_list' => 'getPasswordList',
        'preferred_mgmt_ip_method' => 'getPreferredMgmtIpMethod',
        'protocol_order' => 'getProtocolOrder',
        'retry_count' => 'getRetryCount',
        'snmp_auth_passphrase' => 'getSnmpAuthPassphrase',
        'snmp_auth_protocol' => 'getSnmpAuthProtocol',
        'snmp_mode' => 'getSnmpMode',
        'snmp_priv_passphrase' => 'getSnmpPrivPassphrase',
        'snmp_priv_protocol' => 'getSnmpPrivProtocol',
        'snmp_ro_community' => 'getSnmpRoCommunity',
        'snmp_ro_community_desc' => 'getSnmpRoCommunityDesc',
        'snmp_rw_community' => 'getSnmpRwCommunity',
        'snmp_rw_community_desc' => 'getSnmpRwCommunityDesc',
        'snmp_user_name' => 'getSnmpUserName',
        'time_out' => 'getTimeOut',
        'update_mgmt_ip' => 'getUpdateMgmtIp',
        'user_name_list' => 'getUserNameList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_info'] = isset($data['attribute_info']) ? $data['attribute_info'] : null;
        $this->container['cdp_level'] = isset($data['cdp_level']) ? $data['cdp_level'] : null;
        $this->container['device_ids'] = isset($data['device_ids']) ? $data['device_ids'] : null;
        $this->container['discovery_condition'] = isset($data['discovery_condition']) ? $data['discovery_condition'] : null;
        $this->container['discovery_status'] = isset($data['discovery_status']) ? $data['discovery_status'] : null;
        $this->container['discovery_type'] = isset($data['discovery_type']) ? $data['discovery_type'] : null;
        $this->container['enable_password_list'] = isset($data['enable_password_list']) ? $data['enable_password_list'] : null;
        $this->container['global_credential_id_list'] = isset($data['global_credential_id_list']) ? $data['global_credential_id_list'] : null;
        $this->container['http_read_credential'] = isset($data['http_read_credential']) ? $data['http_read_credential'] : null;
        $this->container['http_write_credential'] = isset($data['http_write_credential']) ? $data['http_write_credential'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ip_address_list'] = isset($data['ip_address_list']) ? $data['ip_address_list'] : null;
        $this->container['ip_filter_list'] = isset($data['ip_filter_list']) ? $data['ip_filter_list'] : null;
        $this->container['is_auto_cdp'] = isset($data['is_auto_cdp']) ? $data['is_auto_cdp'] : null;
        $this->container['lldp_level'] = isset($data['lldp_level']) ? $data['lldp_level'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['netconf_port'] = isset($data['netconf_port']) ? $data['netconf_port'] : null;
        $this->container['num_devices'] = isset($data['num_devices']) ? $data['num_devices'] : null;
        $this->container['parent_discovery_id'] = isset($data['parent_discovery_id']) ? $data['parent_discovery_id'] : null;
        $this->container['password_list'] = isset($data['password_list']) ? $data['password_list'] : null;
        $this->container['preferred_mgmt_ip_method'] = isset($data['preferred_mgmt_ip_method']) ? $data['preferred_mgmt_ip_method'] : null;
        $this->container['protocol_order'] = isset($data['protocol_order']) ? $data['protocol_order'] : null;
        $this->container['retry_count'] = isset($data['retry_count']) ? $data['retry_count'] : null;
        $this->container['snmp_auth_passphrase'] = isset($data['snmp_auth_passphrase']) ? $data['snmp_auth_passphrase'] : null;
        $this->container['snmp_auth_protocol'] = isset($data['snmp_auth_protocol']) ? $data['snmp_auth_protocol'] : null;
        $this->container['snmp_mode'] = isset($data['snmp_mode']) ? $data['snmp_mode'] : null;
        $this->container['snmp_priv_passphrase'] = isset($data['snmp_priv_passphrase']) ? $data['snmp_priv_passphrase'] : null;
        $this->container['snmp_priv_protocol'] = isset($data['snmp_priv_protocol']) ? $data['snmp_priv_protocol'] : null;
        $this->container['snmp_ro_community'] = isset($data['snmp_ro_community']) ? $data['snmp_ro_community'] : null;
        $this->container['snmp_ro_community_desc'] = isset($data['snmp_ro_community_desc']) ? $data['snmp_ro_community_desc'] : null;
        $this->container['snmp_rw_community'] = isset($data['snmp_rw_community']) ? $data['snmp_rw_community'] : null;
        $this->container['snmp_rw_community_desc'] = isset($data['snmp_rw_community_desc']) ? $data['snmp_rw_community_desc'] : null;
        $this->container['snmp_user_name'] = isset($data['snmp_user_name']) ? $data['snmp_user_name'] : null;
        $this->container['time_out'] = isset($data['time_out']) ? $data['time_out'] : null;
        $this->container['update_mgmt_ip'] = isset($data['update_mgmt_ip']) ? $data['update_mgmt_ip'] : null;
        $this->container['user_name_list'] = isset($data['user_name_list']) ? $data['user_name_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets attribute_info
     *
     * @return object
     */
    public function getAttributeInfo()
    {
        return $this->container['attribute_info'];
    }

    /**
     * Sets attribute_info
     *
     * @param object $attribute_info attribute_info
     *
     * @return $this
     */
    public function setAttributeInfo($attribute_info)
    {
        $this->container['attribute_info'] = $attribute_info;

        return $this;
    }

    /**
     * Gets cdp_level
     *
     * @return int
     */
    public function getCdpLevel()
    {
        return $this->container['cdp_level'];
    }

    /**
     * Sets cdp_level
     *
     * @param int $cdp_level cdp_level
     *
     * @return $this
     */
    public function setCdpLevel($cdp_level)
    {
        $this->container['cdp_level'] = $cdp_level;

        return $this;
    }

    /**
     * Gets device_ids
     *
     * @return string
     */
    public function getDeviceIds()
    {
        return $this->container['device_ids'];
    }

    /**
     * Sets device_ids
     *
     * @param string $device_ids device_ids
     *
     * @return $this
     */
    public function setDeviceIds($device_ids)
    {
        $this->container['device_ids'] = $device_ids;

        return $this;
    }

    /**
     * Gets discovery_condition
     *
     * @return string
     */
    public function getDiscoveryCondition()
    {
        return $this->container['discovery_condition'];
    }

    /**
     * Sets discovery_condition
     *
     * @param string $discovery_condition discovery_condition
     *
     * @return $this
     */
    public function setDiscoveryCondition($discovery_condition)
    {
        $this->container['discovery_condition'] = $discovery_condition;

        return $this;
    }

    /**
     * Gets discovery_status
     *
     * @return string
     */
    public function getDiscoveryStatus()
    {
        return $this->container['discovery_status'];
    }

    /**
     * Sets discovery_status
     *
     * @param string $discovery_status discovery_status
     *
     * @return $this
     */
    public function setDiscoveryStatus($discovery_status)
    {
        $this->container['discovery_status'] = $discovery_status;

        return $this;
    }

    /**
     * Gets discovery_type
     *
     * @return string
     */
    public function getDiscoveryType()
    {
        return $this->container['discovery_type'];
    }

    /**
     * Sets discovery_type
     *
     * @param string $discovery_type discovery_type
     *
     * @return $this
     */
    public function setDiscoveryType($discovery_type)
    {
        $this->container['discovery_type'] = $discovery_type;

        return $this;
    }

    /**
     * Gets enable_password_list
     *
     * @return string
     */
    public function getEnablePasswordList()
    {
        return $this->container['enable_password_list'];
    }

    /**
     * Sets enable_password_list
     *
     * @param string $enable_password_list enable_password_list
     *
     * @return $this
     */
    public function setEnablePasswordList($enable_password_list)
    {
        $this->container['enable_password_list'] = $enable_password_list;

        return $this;
    }

    /**
     * Gets global_credential_id_list
     *
     * @return string[]
     */
    public function getGlobalCredentialIdList()
    {
        return $this->container['global_credential_id_list'];
    }

    /**
     * Sets global_credential_id_list
     *
     * @param string[] $global_credential_id_list global_credential_id_list
     *
     * @return $this
     */
    public function setGlobalCredentialIdList($global_credential_id_list)
    {
        $this->container['global_credential_id_list'] = $global_credential_id_list;

        return $this;
    }

    /**
     * Gets http_read_credential
     *
     * @return \cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner
     */
    public function getHttpReadCredential()
    {
        return $this->container['http_read_credential'];
    }

    /**
     * Sets http_read_credential
     *
     * @param \cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner $http_read_credential http_read_credential
     *
     * @return $this
     */
    public function setHttpReadCredential($http_read_credential)
    {
        $this->container['http_read_credential'] = $http_read_credential;

        return $this;
    }

    /**
     * Gets http_write_credential
     *
     * @return \cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner
     */
    public function getHttpWriteCredential()
    {
        return $this->container['http_write_credential'];
    }

    /**
     * Sets http_write_credential
     *
     * @param \cisco\com\dnac\v1\api\client\model\HTTPReadCredentialDTOInner $http_write_credential http_write_credential
     *
     * @return $this
     */
    public function setHttpWriteCredential($http_write_credential)
    {
        $this->container['http_write_credential'] = $http_write_credential;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip_address_list
     *
     * @return string
     */
    public function getIpAddressList()
    {
        return $this->container['ip_address_list'];
    }

    /**
     * Sets ip_address_list
     *
     * @param string $ip_address_list ip_address_list
     *
     * @return $this
     */
    public function setIpAddressList($ip_address_list)
    {
        $this->container['ip_address_list'] = $ip_address_list;

        return $this;
    }

    /**
     * Gets ip_filter_list
     *
     * @return string
     */
    public function getIpFilterList()
    {
        return $this->container['ip_filter_list'];
    }

    /**
     * Sets ip_filter_list
     *
     * @param string $ip_filter_list ip_filter_list
     *
     * @return $this
     */
    public function setIpFilterList($ip_filter_list)
    {
        $this->container['ip_filter_list'] = $ip_filter_list;

        return $this;
    }

    /**
     * Gets is_auto_cdp
     *
     * @return bool
     */
    public function getIsAutoCdp()
    {
        return $this->container['is_auto_cdp'];
    }

    /**
     * Sets is_auto_cdp
     *
     * @param bool $is_auto_cdp is_auto_cdp
     *
     * @return $this
     */
    public function setIsAutoCdp($is_auto_cdp)
    {
        $this->container['is_auto_cdp'] = $is_auto_cdp;

        return $this;
    }

    /**
     * Gets lldp_level
     *
     * @return int
     */
    public function getLldpLevel()
    {
        return $this->container['lldp_level'];
    }

    /**
     * Sets lldp_level
     *
     * @param int $lldp_level lldp_level
     *
     * @return $this
     */
    public function setLldpLevel($lldp_level)
    {
        $this->container['lldp_level'] = $lldp_level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets netconf_port
     *
     * @return string
     */
    public function getNetconfPort()
    {
        return $this->container['netconf_port'];
    }

    /**
     * Sets netconf_port
     *
     * @param string $netconf_port netconf_port
     *
     * @return $this
     */
    public function setNetconfPort($netconf_port)
    {
        $this->container['netconf_port'] = $netconf_port;

        return $this;
    }

    /**
     * Gets num_devices
     *
     * @return int
     */
    public function getNumDevices()
    {
        return $this->container['num_devices'];
    }

    /**
     * Sets num_devices
     *
     * @param int $num_devices num_devices
     *
     * @return $this
     */
    public function setNumDevices($num_devices)
    {
        $this->container['num_devices'] = $num_devices;

        return $this;
    }

    /**
     * Gets parent_discovery_id
     *
     * @return string
     */
    public function getParentDiscoveryId()
    {
        return $this->container['parent_discovery_id'];
    }

    /**
     * Sets parent_discovery_id
     *
     * @param string $parent_discovery_id parent_discovery_id
     *
     * @return $this
     */
    public function setParentDiscoveryId($parent_discovery_id)
    {
        $this->container['parent_discovery_id'] = $parent_discovery_id;

        return $this;
    }

    /**
     * Gets password_list
     *
     * @return string
     */
    public function getPasswordList()
    {
        return $this->container['password_list'];
    }

    /**
     * Sets password_list
     *
     * @param string $password_list password_list
     *
     * @return $this
     */
    public function setPasswordList($password_list)
    {
        $this->container['password_list'] = $password_list;

        return $this;
    }

    /**
     * Gets preferred_mgmt_ip_method
     *
     * @return string
     */
    public function getPreferredMgmtIpMethod()
    {
        return $this->container['preferred_mgmt_ip_method'];
    }

    /**
     * Sets preferred_mgmt_ip_method
     *
     * @param string $preferred_mgmt_ip_method preferred_mgmt_ip_method
     *
     * @return $this
     */
    public function setPreferredMgmtIpMethod($preferred_mgmt_ip_method)
    {
        $this->container['preferred_mgmt_ip_method'] = $preferred_mgmt_ip_method;

        return $this;
    }

    /**
     * Gets protocol_order
     *
     * @return string
     */
    public function getProtocolOrder()
    {
        return $this->container['protocol_order'];
    }

    /**
     * Sets protocol_order
     *
     * @param string $protocol_order protocol_order
     *
     * @return $this
     */
    public function setProtocolOrder($protocol_order)
    {
        $this->container['protocol_order'] = $protocol_order;

        return $this;
    }

    /**
     * Gets retry_count
     *
     * @return int
     */
    public function getRetryCount()
    {
        return $this->container['retry_count'];
    }

    /**
     * Sets retry_count
     *
     * @param int $retry_count retry_count
     *
     * @return $this
     */
    public function setRetryCount($retry_count)
    {
        $this->container['retry_count'] = $retry_count;

        return $this;
    }

    /**
     * Gets snmp_auth_passphrase
     *
     * @return string
     */
    public function getSnmpAuthPassphrase()
    {
        return $this->container['snmp_auth_passphrase'];
    }

    /**
     * Sets snmp_auth_passphrase
     *
     * @param string $snmp_auth_passphrase snmp_auth_passphrase
     *
     * @return $this
     */
    public function setSnmpAuthPassphrase($snmp_auth_passphrase)
    {
        $this->container['snmp_auth_passphrase'] = $snmp_auth_passphrase;

        return $this;
    }

    /**
     * Gets snmp_auth_protocol
     *
     * @return string
     */
    public function getSnmpAuthProtocol()
    {
        return $this->container['snmp_auth_protocol'];
    }

    /**
     * Sets snmp_auth_protocol
     *
     * @param string $snmp_auth_protocol snmp_auth_protocol
     *
     * @return $this
     */
    public function setSnmpAuthProtocol($snmp_auth_protocol)
    {
        $this->container['snmp_auth_protocol'] = $snmp_auth_protocol;

        return $this;
    }

    /**
     * Gets snmp_mode
     *
     * @return string
     */
    public function getSnmpMode()
    {
        return $this->container['snmp_mode'];
    }

    /**
     * Sets snmp_mode
     *
     * @param string $snmp_mode snmp_mode
     *
     * @return $this
     */
    public function setSnmpMode($snmp_mode)
    {
        $this->container['snmp_mode'] = $snmp_mode;

        return $this;
    }

    /**
     * Gets snmp_priv_passphrase
     *
     * @return string
     */
    public function getSnmpPrivPassphrase()
    {
        return $this->container['snmp_priv_passphrase'];
    }

    /**
     * Sets snmp_priv_passphrase
     *
     * @param string $snmp_priv_passphrase snmp_priv_passphrase
     *
     * @return $this
     */
    public function setSnmpPrivPassphrase($snmp_priv_passphrase)
    {
        $this->container['snmp_priv_passphrase'] = $snmp_priv_passphrase;

        return $this;
    }

    /**
     * Gets snmp_priv_protocol
     *
     * @return string
     */
    public function getSnmpPrivProtocol()
    {
        return $this->container['snmp_priv_protocol'];
    }

    /**
     * Sets snmp_priv_protocol
     *
     * @param string $snmp_priv_protocol snmp_priv_protocol
     *
     * @return $this
     */
    public function setSnmpPrivProtocol($snmp_priv_protocol)
    {
        $this->container['snmp_priv_protocol'] = $snmp_priv_protocol;

        return $this;
    }

    /**
     * Gets snmp_ro_community
     *
     * @return string
     */
    public function getSnmpRoCommunity()
    {
        return $this->container['snmp_ro_community'];
    }

    /**
     * Sets snmp_ro_community
     *
     * @param string $snmp_ro_community snmp_ro_community
     *
     * @return $this
     */
    public function setSnmpRoCommunity($snmp_ro_community)
    {
        $this->container['snmp_ro_community'] = $snmp_ro_community;

        return $this;
    }

    /**
     * Gets snmp_ro_community_desc
     *
     * @return string
     */
    public function getSnmpRoCommunityDesc()
    {
        return $this->container['snmp_ro_community_desc'];
    }

    /**
     * Sets snmp_ro_community_desc
     *
     * @param string $snmp_ro_community_desc snmp_ro_community_desc
     *
     * @return $this
     */
    public function setSnmpRoCommunityDesc($snmp_ro_community_desc)
    {
        $this->container['snmp_ro_community_desc'] = $snmp_ro_community_desc;

        return $this;
    }

    /**
     * Gets snmp_rw_community
     *
     * @return string
     */
    public function getSnmpRwCommunity()
    {
        return $this->container['snmp_rw_community'];
    }

    /**
     * Sets snmp_rw_community
     *
     * @param string $snmp_rw_community snmp_rw_community
     *
     * @return $this
     */
    public function setSnmpRwCommunity($snmp_rw_community)
    {
        $this->container['snmp_rw_community'] = $snmp_rw_community;

        return $this;
    }

    /**
     * Gets snmp_rw_community_desc
     *
     * @return string
     */
    public function getSnmpRwCommunityDesc()
    {
        return $this->container['snmp_rw_community_desc'];
    }

    /**
     * Sets snmp_rw_community_desc
     *
     * @param string $snmp_rw_community_desc snmp_rw_community_desc
     *
     * @return $this
     */
    public function setSnmpRwCommunityDesc($snmp_rw_community_desc)
    {
        $this->container['snmp_rw_community_desc'] = $snmp_rw_community_desc;

        return $this;
    }

    /**
     * Gets snmp_user_name
     *
     * @return string
     */
    public function getSnmpUserName()
    {
        return $this->container['snmp_user_name'];
    }

    /**
     * Sets snmp_user_name
     *
     * @param string $snmp_user_name snmp_user_name
     *
     * @return $this
     */
    public function setSnmpUserName($snmp_user_name)
    {
        $this->container['snmp_user_name'] = $snmp_user_name;

        return $this;
    }

    /**
     * Gets time_out
     *
     * @return int
     */
    public function getTimeOut()
    {
        return $this->container['time_out'];
    }

    /**
     * Sets time_out
     *
     * @param int $time_out time_out
     *
     * @return $this
     */
    public function setTimeOut($time_out)
    {
        $this->container['time_out'] = $time_out;

        return $this;
    }

    /**
     * Gets update_mgmt_ip
     *
     * @return bool
     */
    public function getUpdateMgmtIp()
    {
        return $this->container['update_mgmt_ip'];
    }

    /**
     * Sets update_mgmt_ip
     *
     * @param bool $update_mgmt_ip update_mgmt_ip
     *
     * @return $this
     */
    public function setUpdateMgmtIp($update_mgmt_ip)
    {
        $this->container['update_mgmt_ip'] = $update_mgmt_ip;

        return $this;
    }

    /**
     * Gets user_name_list
     *
     * @return string
     */
    public function getUserNameList()
    {
        return $this->container['user_name_list'];
    }

    /**
     * Sets user_name_list
     *
     * @param string $user_name_list user_name_list
     *
     * @return $this
     */
    public function setUserNameList($user_name_list)
    {
        $this->container['user_name_list'] = $user_name_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


