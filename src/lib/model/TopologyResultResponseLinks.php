<?php
/**
 * TopologyResultResponseLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * TopologyResultResponseLinks Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TopologyResultResponseLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TopologyResult_response_links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_info' => 'object',
        'end_port_id' => 'string',
        'end_port_ipv4_address' => 'string',
        'end_port_ipv4_mask' => 'string',
        'end_port_name' => 'string',
        'end_port_speed' => 'string',
        'grey_out' => 'bool',
        'id' => 'string',
        'link_status' => 'string',
        'source' => 'string',
        'start_port_id' => 'string',
        'start_port_ipv4_address' => 'string',
        'start_port_ipv4_mask' => 'string',
        'start_port_name' => 'string',
        'start_port_speed' => 'string',
        'tag' => 'string',
        'target' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_info' => null,
        'end_port_id' => null,
        'end_port_ipv4_address' => null,
        'end_port_ipv4_mask' => null,
        'end_port_name' => null,
        'end_port_speed' => null,
        'grey_out' => null,
        'id' => null,
        'link_status' => null,
        'source' => null,
        'start_port_id' => null,
        'start_port_ipv4_address' => null,
        'start_port_ipv4_mask' => null,
        'start_port_name' => null,
        'start_port_speed' => null,
        'tag' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_info' => 'additionalInfo',
        'end_port_id' => 'endPortID',
        'end_port_ipv4_address' => 'endPortIpv4Address',
        'end_port_ipv4_mask' => 'endPortIpv4Mask',
        'end_port_name' => 'endPortName',
        'end_port_speed' => 'endPortSpeed',
        'grey_out' => 'greyOut',
        'id' => 'id',
        'link_status' => 'linkStatus',
        'source' => 'source',
        'start_port_id' => 'startPortID',
        'start_port_ipv4_address' => 'startPortIpv4Address',
        'start_port_ipv4_mask' => 'startPortIpv4Mask',
        'start_port_name' => 'startPortName',
        'start_port_speed' => 'startPortSpeed',
        'tag' => 'tag',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_info' => 'setAdditionalInfo',
        'end_port_id' => 'setEndPortId',
        'end_port_ipv4_address' => 'setEndPortIpv4Address',
        'end_port_ipv4_mask' => 'setEndPortIpv4Mask',
        'end_port_name' => 'setEndPortName',
        'end_port_speed' => 'setEndPortSpeed',
        'grey_out' => 'setGreyOut',
        'id' => 'setId',
        'link_status' => 'setLinkStatus',
        'source' => 'setSource',
        'start_port_id' => 'setStartPortId',
        'start_port_ipv4_address' => 'setStartPortIpv4Address',
        'start_port_ipv4_mask' => 'setStartPortIpv4Mask',
        'start_port_name' => 'setStartPortName',
        'start_port_speed' => 'setStartPortSpeed',
        'tag' => 'setTag',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_info' => 'getAdditionalInfo',
        'end_port_id' => 'getEndPortId',
        'end_port_ipv4_address' => 'getEndPortIpv4Address',
        'end_port_ipv4_mask' => 'getEndPortIpv4Mask',
        'end_port_name' => 'getEndPortName',
        'end_port_speed' => 'getEndPortSpeed',
        'grey_out' => 'getGreyOut',
        'id' => 'getId',
        'link_status' => 'getLinkStatus',
        'source' => 'getSource',
        'start_port_id' => 'getStartPortId',
        'start_port_ipv4_address' => 'getStartPortIpv4Address',
        'start_port_ipv4_mask' => 'getStartPortIpv4Mask',
        'start_port_name' => 'getStartPortName',
        'start_port_speed' => 'getStartPortSpeed',
        'tag' => 'getTag',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['end_port_id'] = isset($data['end_port_id']) ? $data['end_port_id'] : null;
        $this->container['end_port_ipv4_address'] = isset($data['end_port_ipv4_address']) ? $data['end_port_ipv4_address'] : null;
        $this->container['end_port_ipv4_mask'] = isset($data['end_port_ipv4_mask']) ? $data['end_port_ipv4_mask'] : null;
        $this->container['end_port_name'] = isset($data['end_port_name']) ? $data['end_port_name'] : null;
        $this->container['end_port_speed'] = isset($data['end_port_speed']) ? $data['end_port_speed'] : null;
        $this->container['grey_out'] = isset($data['grey_out']) ? $data['grey_out'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['link_status'] = isset($data['link_status']) ? $data['link_status'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['start_port_id'] = isset($data['start_port_id']) ? $data['start_port_id'] : null;
        $this->container['start_port_ipv4_address'] = isset($data['start_port_ipv4_address']) ? $data['start_port_ipv4_address'] : null;
        $this->container['start_port_ipv4_mask'] = isset($data['start_port_ipv4_mask']) ? $data['start_port_ipv4_mask'] : null;
        $this->container['start_port_name'] = isset($data['start_port_name']) ? $data['start_port_name'] : null;
        $this->container['start_port_speed'] = isset($data['start_port_speed']) ? $data['start_port_speed'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_info
     *
     * @return object
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param object $additional_info additional_info
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets end_port_id
     *
     * @return string
     */
    public function getEndPortId()
    {
        return $this->container['end_port_id'];
    }

    /**
     * Sets end_port_id
     *
     * @param string $end_port_id end_port_id
     *
     * @return $this
     */
    public function setEndPortId($end_port_id)
    {
        $this->container['end_port_id'] = $end_port_id;

        return $this;
    }

    /**
     * Gets end_port_ipv4_address
     *
     * @return string
     */
    public function getEndPortIpv4Address()
    {
        return $this->container['end_port_ipv4_address'];
    }

    /**
     * Sets end_port_ipv4_address
     *
     * @param string $end_port_ipv4_address end_port_ipv4_address
     *
     * @return $this
     */
    public function setEndPortIpv4Address($end_port_ipv4_address)
    {
        $this->container['end_port_ipv4_address'] = $end_port_ipv4_address;

        return $this;
    }

    /**
     * Gets end_port_ipv4_mask
     *
     * @return string
     */
    public function getEndPortIpv4Mask()
    {
        return $this->container['end_port_ipv4_mask'];
    }

    /**
     * Sets end_port_ipv4_mask
     *
     * @param string $end_port_ipv4_mask end_port_ipv4_mask
     *
     * @return $this
     */
    public function setEndPortIpv4Mask($end_port_ipv4_mask)
    {
        $this->container['end_port_ipv4_mask'] = $end_port_ipv4_mask;

        return $this;
    }

    /**
     * Gets end_port_name
     *
     * @return string
     */
    public function getEndPortName()
    {
        return $this->container['end_port_name'];
    }

    /**
     * Sets end_port_name
     *
     * @param string $end_port_name end_port_name
     *
     * @return $this
     */
    public function setEndPortName($end_port_name)
    {
        $this->container['end_port_name'] = $end_port_name;

        return $this;
    }

    /**
     * Gets end_port_speed
     *
     * @return string
     */
    public function getEndPortSpeed()
    {
        return $this->container['end_port_speed'];
    }

    /**
     * Sets end_port_speed
     *
     * @param string $end_port_speed end_port_speed
     *
     * @return $this
     */
    public function setEndPortSpeed($end_port_speed)
    {
        $this->container['end_port_speed'] = $end_port_speed;

        return $this;
    }

    /**
     * Gets grey_out
     *
     * @return bool
     */
    public function getGreyOut()
    {
        return $this->container['grey_out'];
    }

    /**
     * Sets grey_out
     *
     * @param bool $grey_out grey_out
     *
     * @return $this
     */
    public function setGreyOut($grey_out)
    {
        $this->container['grey_out'] = $grey_out;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link_status
     *
     * @return string
     */
    public function getLinkStatus()
    {
        return $this->container['link_status'];
    }

    /**
     * Sets link_status
     *
     * @param string $link_status link_status
     *
     * @return $this
     */
    public function setLinkStatus($link_status)
    {
        $this->container['link_status'] = $link_status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets start_port_id
     *
     * @return string
     */
    public function getStartPortId()
    {
        return $this->container['start_port_id'];
    }

    /**
     * Sets start_port_id
     *
     * @param string $start_port_id start_port_id
     *
     * @return $this
     */
    public function setStartPortId($start_port_id)
    {
        $this->container['start_port_id'] = $start_port_id;

        return $this;
    }

    /**
     * Gets start_port_ipv4_address
     *
     * @return string
     */
    public function getStartPortIpv4Address()
    {
        return $this->container['start_port_ipv4_address'];
    }

    /**
     * Sets start_port_ipv4_address
     *
     * @param string $start_port_ipv4_address start_port_ipv4_address
     *
     * @return $this
     */
    public function setStartPortIpv4Address($start_port_ipv4_address)
    {
        $this->container['start_port_ipv4_address'] = $start_port_ipv4_address;

        return $this;
    }

    /**
     * Gets start_port_ipv4_mask
     *
     * @return string
     */
    public function getStartPortIpv4Mask()
    {
        return $this->container['start_port_ipv4_mask'];
    }

    /**
     * Sets start_port_ipv4_mask
     *
     * @param string $start_port_ipv4_mask start_port_ipv4_mask
     *
     * @return $this
     */
    public function setStartPortIpv4Mask($start_port_ipv4_mask)
    {
        $this->container['start_port_ipv4_mask'] = $start_port_ipv4_mask;

        return $this;
    }

    /**
     * Gets start_port_name
     *
     * @return string
     */
    public function getStartPortName()
    {
        return $this->container['start_port_name'];
    }

    /**
     * Sets start_port_name
     *
     * @param string $start_port_name start_port_name
     *
     * @return $this
     */
    public function setStartPortName($start_port_name)
    {
        $this->container['start_port_name'] = $start_port_name;

        return $this;
    }

    /**
     * Gets start_port_speed
     *
     * @return string
     */
    public function getStartPortSpeed()
    {
        return $this->container['start_port_speed'];
    }

    /**
     * Sets start_port_speed
     *
     * @param string $start_port_speed start_port_speed
     *
     * @return $this
     */
    public function setStartPortSpeed($start_port_speed)
    {
        $this->container['start_port_speed'] = $start_port_speed;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


