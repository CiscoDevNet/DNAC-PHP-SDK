<?php
/**
 * PathResponseResultResponsePerfMonStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cisco\com\dnac\v1\api\client\model;

use \ArrayAccess;
use \cisco\com\dnac\v1\api\client\ObjectSerializer;

/**
 * PathResponseResultResponsePerfMonStatistics Class Doc Comment
 *
 * @category Class
 * @package  cisco\com\dnac\v1\api\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathResponseResultResponsePerfMonStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PathResponseResult_response_perfMonStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'byte_rate' => 'int',
        'dest_ip_address' => 'string',
        'dest_port' => 'string',
        'input_interface' => 'string',
        'ipv4_dscp' => 'string',
        'ipv4_ttl' => 'int',
        'output_interface' => 'string',
        'packet_bytes' => 'int',
        'packet_count' => 'int',
        'packet_loss' => 'int',
        'packet_loss_percentage' => 'float',
        'protocol' => 'string',
        'refreshed_at' => 'int',
        'rtp_jitter_max' => 'int',
        'rtp_jitter_mean' => 'int',
        'rtp_jitter_min' => 'int',
        'source_ip_address' => 'string',
        'source_port' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'byte_rate' => null,
        'dest_ip_address' => null,
        'dest_port' => null,
        'input_interface' => null,
        'ipv4_dscp' => null,
        'ipv4_ttl' => null,
        'output_interface' => null,
        'packet_bytes' => null,
        'packet_count' => null,
        'packet_loss' => null,
        'packet_loss_percentage' => null,
        'protocol' => null,
        'refreshed_at' => null,
        'rtp_jitter_max' => null,
        'rtp_jitter_mean' => null,
        'rtp_jitter_min' => null,
        'source_ip_address' => null,
        'source_port' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'byte_rate' => 'byteRate',
        'dest_ip_address' => 'destIpAddress',
        'dest_port' => 'destPort',
        'input_interface' => 'inputInterface',
        'ipv4_dscp' => 'ipv4DSCP',
        'ipv4_ttl' => 'ipv4TTL',
        'output_interface' => 'outputInterface',
        'packet_bytes' => 'packetBytes',
        'packet_count' => 'packetCount',
        'packet_loss' => 'packetLoss',
        'packet_loss_percentage' => 'packetLossPercentage',
        'protocol' => 'protocol',
        'refreshed_at' => 'refreshedAt',
        'rtp_jitter_max' => 'rtpJitterMax',
        'rtp_jitter_mean' => 'rtpJitterMean',
        'rtp_jitter_min' => 'rtpJitterMin',
        'source_ip_address' => 'sourceIpAddress',
        'source_port' => 'sourcePort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'byte_rate' => 'setByteRate',
        'dest_ip_address' => 'setDestIpAddress',
        'dest_port' => 'setDestPort',
        'input_interface' => 'setInputInterface',
        'ipv4_dscp' => 'setIpv4Dscp',
        'ipv4_ttl' => 'setIpv4Ttl',
        'output_interface' => 'setOutputInterface',
        'packet_bytes' => 'setPacketBytes',
        'packet_count' => 'setPacketCount',
        'packet_loss' => 'setPacketLoss',
        'packet_loss_percentage' => 'setPacketLossPercentage',
        'protocol' => 'setProtocol',
        'refreshed_at' => 'setRefreshedAt',
        'rtp_jitter_max' => 'setRtpJitterMax',
        'rtp_jitter_mean' => 'setRtpJitterMean',
        'rtp_jitter_min' => 'setRtpJitterMin',
        'source_ip_address' => 'setSourceIpAddress',
        'source_port' => 'setSourcePort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'byte_rate' => 'getByteRate',
        'dest_ip_address' => 'getDestIpAddress',
        'dest_port' => 'getDestPort',
        'input_interface' => 'getInputInterface',
        'ipv4_dscp' => 'getIpv4Dscp',
        'ipv4_ttl' => 'getIpv4Ttl',
        'output_interface' => 'getOutputInterface',
        'packet_bytes' => 'getPacketBytes',
        'packet_count' => 'getPacketCount',
        'packet_loss' => 'getPacketLoss',
        'packet_loss_percentage' => 'getPacketLossPercentage',
        'protocol' => 'getProtocol',
        'refreshed_at' => 'getRefreshedAt',
        'rtp_jitter_max' => 'getRtpJitterMax',
        'rtp_jitter_mean' => 'getRtpJitterMean',
        'rtp_jitter_min' => 'getRtpJitterMin',
        'source_ip_address' => 'getSourceIpAddress',
        'source_port' => 'getSourcePort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['byte_rate'] = isset($data['byte_rate']) ? $data['byte_rate'] : null;
        $this->container['dest_ip_address'] = isset($data['dest_ip_address']) ? $data['dest_ip_address'] : null;
        $this->container['dest_port'] = isset($data['dest_port']) ? $data['dest_port'] : null;
        $this->container['input_interface'] = isset($data['input_interface']) ? $data['input_interface'] : null;
        $this->container['ipv4_dscp'] = isset($data['ipv4_dscp']) ? $data['ipv4_dscp'] : null;
        $this->container['ipv4_ttl'] = isset($data['ipv4_ttl']) ? $data['ipv4_ttl'] : null;
        $this->container['output_interface'] = isset($data['output_interface']) ? $data['output_interface'] : null;
        $this->container['packet_bytes'] = isset($data['packet_bytes']) ? $data['packet_bytes'] : null;
        $this->container['packet_count'] = isset($data['packet_count']) ? $data['packet_count'] : null;
        $this->container['packet_loss'] = isset($data['packet_loss']) ? $data['packet_loss'] : null;
        $this->container['packet_loss_percentage'] = isset($data['packet_loss_percentage']) ? $data['packet_loss_percentage'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['refreshed_at'] = isset($data['refreshed_at']) ? $data['refreshed_at'] : null;
        $this->container['rtp_jitter_max'] = isset($data['rtp_jitter_max']) ? $data['rtp_jitter_max'] : null;
        $this->container['rtp_jitter_mean'] = isset($data['rtp_jitter_mean']) ? $data['rtp_jitter_mean'] : null;
        $this->container['rtp_jitter_min'] = isset($data['rtp_jitter_min']) ? $data['rtp_jitter_min'] : null;
        $this->container['source_ip_address'] = isset($data['source_ip_address']) ? $data['source_ip_address'] : null;
        $this->container['source_port'] = isset($data['source_port']) ? $data['source_port'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets byte_rate
     *
     * @return int
     */
    public function getByteRate()
    {
        return $this->container['byte_rate'];
    }

    /**
     * Sets byte_rate
     *
     * @param int $byte_rate byte_rate
     *
     * @return $this
     */
    public function setByteRate($byte_rate)
    {
        $this->container['byte_rate'] = $byte_rate;

        return $this;
    }

    /**
     * Gets dest_ip_address
     *
     * @return string
     */
    public function getDestIpAddress()
    {
        return $this->container['dest_ip_address'];
    }

    /**
     * Sets dest_ip_address
     *
     * @param string $dest_ip_address dest_ip_address
     *
     * @return $this
     */
    public function setDestIpAddress($dest_ip_address)
    {
        $this->container['dest_ip_address'] = $dest_ip_address;

        return $this;
    }

    /**
     * Gets dest_port
     *
     * @return string
     */
    public function getDestPort()
    {
        return $this->container['dest_port'];
    }

    /**
     * Sets dest_port
     *
     * @param string $dest_port dest_port
     *
     * @return $this
     */
    public function setDestPort($dest_port)
    {
        $this->container['dest_port'] = $dest_port;

        return $this;
    }

    /**
     * Gets input_interface
     *
     * @return string
     */
    public function getInputInterface()
    {
        return $this->container['input_interface'];
    }

    /**
     * Sets input_interface
     *
     * @param string $input_interface input_interface
     *
     * @return $this
     */
    public function setInputInterface($input_interface)
    {
        $this->container['input_interface'] = $input_interface;

        return $this;
    }

    /**
     * Gets ipv4_dscp
     *
     * @return string
     */
    public function getIpv4Dscp()
    {
        return $this->container['ipv4_dscp'];
    }

    /**
     * Sets ipv4_dscp
     *
     * @param string $ipv4_dscp ipv4_dscp
     *
     * @return $this
     */
    public function setIpv4Dscp($ipv4_dscp)
    {
        $this->container['ipv4_dscp'] = $ipv4_dscp;

        return $this;
    }

    /**
     * Gets ipv4_ttl
     *
     * @return int
     */
    public function getIpv4Ttl()
    {
        return $this->container['ipv4_ttl'];
    }

    /**
     * Sets ipv4_ttl
     *
     * @param int $ipv4_ttl ipv4_ttl
     *
     * @return $this
     */
    public function setIpv4Ttl($ipv4_ttl)
    {
        $this->container['ipv4_ttl'] = $ipv4_ttl;

        return $this;
    }

    /**
     * Gets output_interface
     *
     * @return string
     */
    public function getOutputInterface()
    {
        return $this->container['output_interface'];
    }

    /**
     * Sets output_interface
     *
     * @param string $output_interface output_interface
     *
     * @return $this
     */
    public function setOutputInterface($output_interface)
    {
        $this->container['output_interface'] = $output_interface;

        return $this;
    }

    /**
     * Gets packet_bytes
     *
     * @return int
     */
    public function getPacketBytes()
    {
        return $this->container['packet_bytes'];
    }

    /**
     * Sets packet_bytes
     *
     * @param int $packet_bytes packet_bytes
     *
     * @return $this
     */
    public function setPacketBytes($packet_bytes)
    {
        $this->container['packet_bytes'] = $packet_bytes;

        return $this;
    }

    /**
     * Gets packet_count
     *
     * @return int
     */
    public function getPacketCount()
    {
        return $this->container['packet_count'];
    }

    /**
     * Sets packet_count
     *
     * @param int $packet_count packet_count
     *
     * @return $this
     */
    public function setPacketCount($packet_count)
    {
        $this->container['packet_count'] = $packet_count;

        return $this;
    }

    /**
     * Gets packet_loss
     *
     * @return int
     */
    public function getPacketLoss()
    {
        return $this->container['packet_loss'];
    }

    /**
     * Sets packet_loss
     *
     * @param int $packet_loss packet_loss
     *
     * @return $this
     */
    public function setPacketLoss($packet_loss)
    {
        $this->container['packet_loss'] = $packet_loss;

        return $this;
    }

    /**
     * Gets packet_loss_percentage
     *
     * @return float
     */
    public function getPacketLossPercentage()
    {
        return $this->container['packet_loss_percentage'];
    }

    /**
     * Sets packet_loss_percentage
     *
     * @param float $packet_loss_percentage packet_loss_percentage
     *
     * @return $this
     */
    public function setPacketLossPercentage($packet_loss_percentage)
    {
        $this->container['packet_loss_percentage'] = $packet_loss_percentage;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets refreshed_at
     *
     * @return int
     */
    public function getRefreshedAt()
    {
        return $this->container['refreshed_at'];
    }

    /**
     * Sets refreshed_at
     *
     * @param int $refreshed_at refreshed_at
     *
     * @return $this
     */
    public function setRefreshedAt($refreshed_at)
    {
        $this->container['refreshed_at'] = $refreshed_at;

        return $this;
    }

    /**
     * Gets rtp_jitter_max
     *
     * @return int
     */
    public function getRtpJitterMax()
    {
        return $this->container['rtp_jitter_max'];
    }

    /**
     * Sets rtp_jitter_max
     *
     * @param int $rtp_jitter_max rtp_jitter_max
     *
     * @return $this
     */
    public function setRtpJitterMax($rtp_jitter_max)
    {
        $this->container['rtp_jitter_max'] = $rtp_jitter_max;

        return $this;
    }

    /**
     * Gets rtp_jitter_mean
     *
     * @return int
     */
    public function getRtpJitterMean()
    {
        return $this->container['rtp_jitter_mean'];
    }

    /**
     * Sets rtp_jitter_mean
     *
     * @param int $rtp_jitter_mean rtp_jitter_mean
     *
     * @return $this
     */
    public function setRtpJitterMean($rtp_jitter_mean)
    {
        $this->container['rtp_jitter_mean'] = $rtp_jitter_mean;

        return $this;
    }

    /**
     * Gets rtp_jitter_min
     *
     * @return int
     */
    public function getRtpJitterMin()
    {
        return $this->container['rtp_jitter_min'];
    }

    /**
     * Sets rtp_jitter_min
     *
     * @param int $rtp_jitter_min rtp_jitter_min
     *
     * @return $this
     */
    public function setRtpJitterMin($rtp_jitter_min)
    {
        $this->container['rtp_jitter_min'] = $rtp_jitter_min;

        return $this;
    }

    /**
     * Gets source_ip_address
     *
     * @return string
     */
    public function getSourceIpAddress()
    {
        return $this->container['source_ip_address'];
    }

    /**
     * Sets source_ip_address
     *
     * @param string $source_ip_address source_ip_address
     *
     * @return $this
     */
    public function setSourceIpAddress($source_ip_address)
    {
        $this->container['source_ip_address'] = $source_ip_address;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return string
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param string $source_port source_port
     *
     * @return $this
     */
    public function setSourcePort($source_port)
    {
        $this->container['source_port'] = $source_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


